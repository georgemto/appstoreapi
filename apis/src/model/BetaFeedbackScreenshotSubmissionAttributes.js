/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BetaFeedbackScreenshotImage from './BetaFeedbackScreenshotImage';
import DeviceConnectionType from './DeviceConnectionType';
import DeviceFamily from './DeviceFamily';
import Platform from './Platform';

/**
 * The BetaFeedbackScreenshotSubmissionAttributes model module.
 * @module model/BetaFeedbackScreenshotSubmissionAttributes
 * @version 4.1
 */
class BetaFeedbackScreenshotSubmissionAttributes {
    /**
     * Constructs a new <code>BetaFeedbackScreenshotSubmissionAttributes</code>.
     * @alias module:model/BetaFeedbackScreenshotSubmissionAttributes
     */
    constructor() { 
        
        BetaFeedbackScreenshotSubmissionAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BetaFeedbackScreenshotSubmissionAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BetaFeedbackScreenshotSubmissionAttributes} obj Optional instance to populate.
     * @return {module:model/BetaFeedbackScreenshotSubmissionAttributes} The populated <code>BetaFeedbackScreenshotSubmissionAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BetaFeedbackScreenshotSubmissionAttributes();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('deviceModel')) {
                obj['deviceModel'] = ApiClient.convertToType(data['deviceModel'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = DeviceConnectionType.constructFromObject(data['connectionType']);
            }
            if (data.hasOwnProperty('pairedAppleWatch')) {
                obj['pairedAppleWatch'] = ApiClient.convertToType(data['pairedAppleWatch'], 'String');
            }
            if (data.hasOwnProperty('appUptimeInMilliseconds')) {
                obj['appUptimeInMilliseconds'] = ApiClient.convertToType(data['appUptimeInMilliseconds'], 'Number');
            }
            if (data.hasOwnProperty('diskBytesAvailable')) {
                obj['diskBytesAvailable'] = ApiClient.convertToType(data['diskBytesAvailable'], 'Number');
            }
            if (data.hasOwnProperty('diskBytesTotal')) {
                obj['diskBytesTotal'] = ApiClient.convertToType(data['diskBytesTotal'], 'Number');
            }
            if (data.hasOwnProperty('batteryPercentage')) {
                obj['batteryPercentage'] = ApiClient.convertToType(data['batteryPercentage'], 'Number');
            }
            if (data.hasOwnProperty('screenWidthInPoints')) {
                obj['screenWidthInPoints'] = ApiClient.convertToType(data['screenWidthInPoints'], 'Number');
            }
            if (data.hasOwnProperty('screenHeightInPoints')) {
                obj['screenHeightInPoints'] = ApiClient.convertToType(data['screenHeightInPoints'], 'Number');
            }
            if (data.hasOwnProperty('appPlatform')) {
                obj['appPlatform'] = Platform.constructFromObject(data['appPlatform']);
            }
            if (data.hasOwnProperty('devicePlatform')) {
                obj['devicePlatform'] = Platform.constructFromObject(data['devicePlatform']);
            }
            if (data.hasOwnProperty('deviceFamily')) {
                obj['deviceFamily'] = DeviceFamily.constructFromObject(data['deviceFamily']);
            }
            if (data.hasOwnProperty('buildBundleId')) {
                obj['buildBundleId'] = ApiClient.convertToType(data['buildBundleId'], 'String');
            }
            if (data.hasOwnProperty('screenshots')) {
                obj['screenshots'] = ApiClient.convertToType(data['screenshots'], [BetaFeedbackScreenshotImage]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BetaFeedbackScreenshotSubmissionAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BetaFeedbackScreenshotSubmissionAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['deviceModel'] && !(typeof data['deviceModel'] === 'string' || data['deviceModel'] instanceof String)) {
            throw new Error("Expected the field `deviceModel` to be a primitive type in the JSON string but got " + data['deviceModel']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['pairedAppleWatch'] && !(typeof data['pairedAppleWatch'] === 'string' || data['pairedAppleWatch'] instanceof String)) {
            throw new Error("Expected the field `pairedAppleWatch` to be a primitive type in the JSON string but got " + data['pairedAppleWatch']);
        }
        // ensure the json data is a string
        if (data['buildBundleId'] && !(typeof data['buildBundleId'] === 'string' || data['buildBundleId'] instanceof String)) {
            throw new Error("Expected the field `buildBundleId` to be a primitive type in the JSON string but got " + data['buildBundleId']);
        }
        if (data['screenshots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['screenshots'])) {
                throw new Error("Expected the field `screenshots` to be an array in the JSON data but got " + data['screenshots']);
            }
            // validate the optional field `screenshots` (array)
            for (const item of data['screenshots']) {
                BetaFeedbackScreenshotImage.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} createdDate
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['createdDate'] = undefined;

/**
 * @member {String} comment
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['comment'] = undefined;

/**
 * @member {String} email
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['email'] = undefined;

/**
 * @member {String} deviceModel
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['deviceModel'] = undefined;

/**
 * @member {String} osVersion
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['osVersion'] = undefined;

/**
 * @member {String} locale
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['locale'] = undefined;

/**
 * @member {String} timeZone
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['timeZone'] = undefined;

/**
 * @member {String} architecture
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['architecture'] = undefined;

/**
 * @member {module:model/DeviceConnectionType} connectionType
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['connectionType'] = undefined;

/**
 * @member {String} pairedAppleWatch
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['pairedAppleWatch'] = undefined;

/**
 * @member {Number} appUptimeInMilliseconds
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['appUptimeInMilliseconds'] = undefined;

/**
 * @member {Number} diskBytesAvailable
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['diskBytesAvailable'] = undefined;

/**
 * @member {Number} diskBytesTotal
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['diskBytesTotal'] = undefined;

/**
 * @member {Number} batteryPercentage
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['batteryPercentage'] = undefined;

/**
 * @member {Number} screenWidthInPoints
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['screenWidthInPoints'] = undefined;

/**
 * @member {Number} screenHeightInPoints
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['screenHeightInPoints'] = undefined;

/**
 * @member {module:model/Platform} appPlatform
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['appPlatform'] = undefined;

/**
 * @member {module:model/Platform} devicePlatform
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['devicePlatform'] = undefined;

/**
 * @member {module:model/DeviceFamily} deviceFamily
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['deviceFamily'] = undefined;

/**
 * @member {String} buildBundleId
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['buildBundleId'] = undefined;

/**
 * @member {Array.<module:model/BetaFeedbackScreenshotImage>} screenshots
 */
BetaFeedbackScreenshotSubmissionAttributes.prototype['screenshots'] = undefined;






export default BetaFeedbackScreenshotSubmissionAttributes;

