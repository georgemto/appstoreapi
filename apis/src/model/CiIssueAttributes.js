/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileLocation from './FileLocation';

/**
 * The CiIssueAttributes model module.
 * @module model/CiIssueAttributes
 * @version 4.1
 */
class CiIssueAttributes {
    /**
     * Constructs a new <code>CiIssueAttributes</code>.
     * @alias module:model/CiIssueAttributes
     */
    constructor() { 
        
        CiIssueAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CiIssueAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CiIssueAttributes} obj Optional instance to populate.
     * @return {module:model/CiIssueAttributes} The populated <code>CiIssueAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CiIssueAttributes();

            if (data.hasOwnProperty('issueType')) {
                obj['issueType'] = ApiClient.convertToType(data['issueType'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('fileSource')) {
                obj['fileSource'] = FileLocation.constructFromObject(data['fileSource']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CiIssueAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CiIssueAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['issueType'] && !(typeof data['issueType'] === 'string' || data['issueType'] instanceof String)) {
            throw new Error("Expected the field `issueType` to be a primitive type in the JSON string but got " + data['issueType']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `fileSource`
        if (data['fileSource']) { // data not null
          FileLocation.validateJSON(data['fileSource']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }

        return true;
    }


}



/**
 * @member {module:model/CiIssueAttributes.IssueTypeEnum} issueType
 */
CiIssueAttributes.prototype['issueType'] = undefined;

/**
 * @member {String} message
 */
CiIssueAttributes.prototype['message'] = undefined;

/**
 * @member {module:model/FileLocation} fileSource
 */
CiIssueAttributes.prototype['fileSource'] = undefined;

/**
 * @member {String} category
 */
CiIssueAttributes.prototype['category'] = undefined;





/**
 * Allowed values for the <code>issueType</code> property.
 * @enum {String}
 * @readonly
 */
CiIssueAttributes['IssueTypeEnum'] = {

    /**
     * value: "ANALYZER_WARNING"
     * @const
     */
    "ANALYZER_WARNING": "ANALYZER_WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "TEST_FAILURE"
     * @const
     */
    "TEST_FAILURE": "TEST_FAILURE",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING"
};



export default CiIssueAttributes;

