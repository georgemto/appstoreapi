/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GameCenterLeaderboardEntrySubmissionAttributes model module.
 * @module model/GameCenterLeaderboardEntrySubmissionAttributes
 * @version 4.1
 */
class GameCenterLeaderboardEntrySubmissionAttributes {
    /**
     * Constructs a new <code>GameCenterLeaderboardEntrySubmissionAttributes</code>.
     * @alias module:model/GameCenterLeaderboardEntrySubmissionAttributes
     */
    constructor() { 
        
        GameCenterLeaderboardEntrySubmissionAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GameCenterLeaderboardEntrySubmissionAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameCenterLeaderboardEntrySubmissionAttributes} obj Optional instance to populate.
     * @return {module:model/GameCenterLeaderboardEntrySubmissionAttributes} The populated <code>GameCenterLeaderboardEntrySubmissionAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GameCenterLeaderboardEntrySubmissionAttributes();

            if (data.hasOwnProperty('bundleId')) {
                obj['bundleId'] = ApiClient.convertToType(data['bundleId'], 'String');
            }
            if (data.hasOwnProperty('challengeIds')) {
                obj['challengeIds'] = ApiClient.convertToType(data['challengeIds'], ['String']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'Number');
            }
            if (data.hasOwnProperty('scopedPlayerId')) {
                obj['scopedPlayerId'] = ApiClient.convertToType(data['scopedPlayerId'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('submittedDate')) {
                obj['submittedDate'] = ApiClient.convertToType(data['submittedDate'], 'Date');
            }
            if (data.hasOwnProperty('vendorIdentifier')) {
                obj['vendorIdentifier'] = ApiClient.convertToType(data['vendorIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GameCenterLeaderboardEntrySubmissionAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GameCenterLeaderboardEntrySubmissionAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bundleId'] && !(typeof data['bundleId'] === 'string' || data['bundleId'] instanceof String)) {
            throw new Error("Expected the field `bundleId` to be a primitive type in the JSON string but got " + data['bundleId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['challengeIds'])) {
            throw new Error("Expected the field `challengeIds` to be an array in the JSON data but got " + data['challengeIds']);
        }
        // ensure the json data is a string
        if (data['scopedPlayerId'] && !(typeof data['scopedPlayerId'] === 'string' || data['scopedPlayerId'] instanceof String)) {
            throw new Error("Expected the field `scopedPlayerId` to be a primitive type in the JSON string but got " + data['scopedPlayerId']);
        }
        // ensure the json data is a string
        if (data['vendorIdentifier'] && !(typeof data['vendorIdentifier'] === 'string' || data['vendorIdentifier'] instanceof String)) {
            throw new Error("Expected the field `vendorIdentifier` to be a primitive type in the JSON string but got " + data['vendorIdentifier']);
        }

        return true;
    }


}



/**
 * @member {String} bundleId
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['bundleId'] = undefined;

/**
 * @member {Array.<String>} challengeIds
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['challengeIds'] = undefined;

/**
 * @member {Number} context
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['context'] = undefined;

/**
 * @member {String} scopedPlayerId
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['scopedPlayerId'] = undefined;

/**
 * @member {Number} score
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['score'] = undefined;

/**
 * @member {Date} submittedDate
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['submittedDate'] = undefined;

/**
 * @member {String} vendorIdentifier
 */
GameCenterLeaderboardEntrySubmissionAttributes.prototype['vendorIdentifier'] = undefined;






export default GameCenterLeaderboardEntrySubmissionAttributes;

