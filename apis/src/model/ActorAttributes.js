/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActorAttributes model module.
 * @module model/ActorAttributes
 * @version 4.1
 */
class ActorAttributes {
    /**
     * Constructs a new <code>ActorAttributes</code>.
     * @alias module:model/ActorAttributes
     */
    constructor() { 
        
        ActorAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActorAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActorAttributes} obj Optional instance to populate.
     * @return {module:model/ActorAttributes} The populated <code>ActorAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActorAttributes();

            if (data.hasOwnProperty('actorType')) {
                obj['actorType'] = ApiClient.convertToType(data['actorType'], 'String');
            }
            if (data.hasOwnProperty('userFirstName')) {
                obj['userFirstName'] = ApiClient.convertToType(data['userFirstName'], 'String');
            }
            if (data.hasOwnProperty('userLastName')) {
                obj['userLastName'] = ApiClient.convertToType(data['userLastName'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('apiKeyId')) {
                obj['apiKeyId'] = ApiClient.convertToType(data['apiKeyId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActorAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActorAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actorType'] && !(typeof data['actorType'] === 'string' || data['actorType'] instanceof String)) {
            throw new Error("Expected the field `actorType` to be a primitive type in the JSON string but got " + data['actorType']);
        }
        // ensure the json data is a string
        if (data['userFirstName'] && !(typeof data['userFirstName'] === 'string' || data['userFirstName'] instanceof String)) {
            throw new Error("Expected the field `userFirstName` to be a primitive type in the JSON string but got " + data['userFirstName']);
        }
        // ensure the json data is a string
        if (data['userLastName'] && !(typeof data['userLastName'] === 'string' || data['userLastName'] instanceof String)) {
            throw new Error("Expected the field `userLastName` to be a primitive type in the JSON string but got " + data['userLastName']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['apiKeyId'] && !(typeof data['apiKeyId'] === 'string' || data['apiKeyId'] instanceof String)) {
            throw new Error("Expected the field `apiKeyId` to be a primitive type in the JSON string but got " + data['apiKeyId']);
        }

        return true;
    }


}



/**
 * @member {module:model/ActorAttributes.ActorTypeEnum} actorType
 */
ActorAttributes.prototype['actorType'] = undefined;

/**
 * @member {String} userFirstName
 */
ActorAttributes.prototype['userFirstName'] = undefined;

/**
 * @member {String} userLastName
 */
ActorAttributes.prototype['userLastName'] = undefined;

/**
 * @member {String} userEmail
 */
ActorAttributes.prototype['userEmail'] = undefined;

/**
 * @member {String} apiKeyId
 */
ActorAttributes.prototype['apiKeyId'] = undefined;





/**
 * Allowed values for the <code>actorType</code> property.
 * @enum {String}
 * @readonly
 */
ActorAttributes['ActorTypeEnum'] = {

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "API_KEY"
     * @const
     */
    "API_KEY": "API_KEY",

    /**
     * value: "XCODE_CLOUD"
     * @const
     */
    "XCODE_CLOUD": "XCODE_CLOUD",

    /**
     * value: "APPLE"
     * @const
     */
    "APPLE": "APPLE"
};



export default ActorAttributes;

