/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CiStartConditionFileMatcher from './CiStartConditionFileMatcher';

/**
 * The CiFilesAndFoldersRule model module.
 * @module model/CiFilesAndFoldersRule
 * @version 4.1
 */
class CiFilesAndFoldersRule {
    /**
     * Constructs a new <code>CiFilesAndFoldersRule</code>.
     * @alias module:model/CiFilesAndFoldersRule
     */
    constructor() { 
        
        CiFilesAndFoldersRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CiFilesAndFoldersRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CiFilesAndFoldersRule} obj Optional instance to populate.
     * @return {module:model/CiFilesAndFoldersRule} The populated <code>CiFilesAndFoldersRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CiFilesAndFoldersRule();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('matchers')) {
                obj['matchers'] = ApiClient.convertToType(data['matchers'], [CiStartConditionFileMatcher]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CiFilesAndFoldersRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CiFilesAndFoldersRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        if (data['matchers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matchers'])) {
                throw new Error("Expected the field `matchers` to be an array in the JSON data but got " + data['matchers']);
            }
            // validate the optional field `matchers` (array)
            for (const item of data['matchers']) {
                CiStartConditionFileMatcher.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CiFilesAndFoldersRule.ModeEnum} mode
 */
CiFilesAndFoldersRule.prototype['mode'] = undefined;

/**
 * @member {Array.<module:model/CiStartConditionFileMatcher>} matchers
 */
CiFilesAndFoldersRule.prototype['matchers'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
CiFilesAndFoldersRule['ModeEnum'] = {

    /**
     * value: "START_IF_ANY_FILE_MATCHES"
     * @const
     */
    "START_IF_ANY_FILE_MATCHES": "START_IF_ANY_FILE_MATCHES",

    /**
     * value: "DO_NOT_START_IF_ALL_FILES_MATCH"
     * @const
     */
    "DO_NOT_START_IF_ALL_FILES_MATCH": "DO_NOT_START_IF_ALL_FILES_MATCH"
};



export default CiFilesAndFoldersRule;

