/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GameCenterAchievementRelationshipsActivity from './GameCenterAchievementRelationshipsActivity';
import GameCenterAchievementRelationshipsGameCenterGroup from './GameCenterAchievementRelationshipsGameCenterGroup';
import GameCenterAchievementReleaseRelationshipsGameCenterDetail from './GameCenterAchievementReleaseRelationshipsGameCenterDetail';
import GameCenterDetailRelationshipsLeaderboardReleases from './GameCenterDetailRelationshipsLeaderboardReleases';
import GameCenterLeaderboardRelationshipsChallenge from './GameCenterLeaderboardRelationshipsChallenge';
import GameCenterLeaderboardRelationshipsGameCenterLeaderboardSets from './GameCenterLeaderboardRelationshipsGameCenterLeaderboardSets';
import GameCenterLeaderboardRelationshipsGroupLeaderboard from './GameCenterLeaderboardRelationshipsGroupLeaderboard';
import GameCenterLeaderboardRelationshipsLocalizations from './GameCenterLeaderboardRelationshipsLocalizations';

/**
 * The GameCenterLeaderboardRelationships model module.
 * @module model/GameCenterLeaderboardRelationships
 * @version 4.1
 */
class GameCenterLeaderboardRelationships {
    /**
     * Constructs a new <code>GameCenterLeaderboardRelationships</code>.
     * @alias module:model/GameCenterLeaderboardRelationships
     */
    constructor() { 
        
        GameCenterLeaderboardRelationships.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GameCenterLeaderboardRelationships</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameCenterLeaderboardRelationships} obj Optional instance to populate.
     * @return {module:model/GameCenterLeaderboardRelationships} The populated <code>GameCenterLeaderboardRelationships</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GameCenterLeaderboardRelationships();

            if (data.hasOwnProperty('gameCenterDetail')) {
                obj['gameCenterDetail'] = GameCenterAchievementReleaseRelationshipsGameCenterDetail.constructFromObject(data['gameCenterDetail']);
            }
            if (data.hasOwnProperty('gameCenterGroup')) {
                obj['gameCenterGroup'] = GameCenterAchievementRelationshipsGameCenterGroup.constructFromObject(data['gameCenterGroup']);
            }
            if (data.hasOwnProperty('groupLeaderboard')) {
                obj['groupLeaderboard'] = GameCenterLeaderboardRelationshipsGroupLeaderboard.constructFromObject(data['groupLeaderboard']);
            }
            if (data.hasOwnProperty('gameCenterLeaderboardSets')) {
                obj['gameCenterLeaderboardSets'] = GameCenterLeaderboardRelationshipsGameCenterLeaderboardSets.constructFromObject(data['gameCenterLeaderboardSets']);
            }
            if (data.hasOwnProperty('localizations')) {
                obj['localizations'] = GameCenterLeaderboardRelationshipsLocalizations.constructFromObject(data['localizations']);
            }
            if (data.hasOwnProperty('releases')) {
                obj['releases'] = GameCenterDetailRelationshipsLeaderboardReleases.constructFromObject(data['releases']);
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = GameCenterAchievementRelationshipsActivity.constructFromObject(data['activity']);
            }
            if (data.hasOwnProperty('challenge')) {
                obj['challenge'] = GameCenterLeaderboardRelationshipsChallenge.constructFromObject(data['challenge']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GameCenterLeaderboardRelationships</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GameCenterLeaderboardRelationships</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gameCenterDetail`
        if (data['gameCenterDetail']) { // data not null
          GameCenterAchievementReleaseRelationshipsGameCenterDetail.validateJSON(data['gameCenterDetail']);
        }
        // validate the optional field `gameCenterGroup`
        if (data['gameCenterGroup']) { // data not null
          GameCenterAchievementRelationshipsGameCenterGroup.validateJSON(data['gameCenterGroup']);
        }
        // validate the optional field `groupLeaderboard`
        if (data['groupLeaderboard']) { // data not null
          GameCenterLeaderboardRelationshipsGroupLeaderboard.validateJSON(data['groupLeaderboard']);
        }
        // validate the optional field `gameCenterLeaderboardSets`
        if (data['gameCenterLeaderboardSets']) { // data not null
          GameCenterLeaderboardRelationshipsGameCenterLeaderboardSets.validateJSON(data['gameCenterLeaderboardSets']);
        }
        // validate the optional field `localizations`
        if (data['localizations']) { // data not null
          GameCenterLeaderboardRelationshipsLocalizations.validateJSON(data['localizations']);
        }
        // validate the optional field `releases`
        if (data['releases']) { // data not null
          GameCenterDetailRelationshipsLeaderboardReleases.validateJSON(data['releases']);
        }
        // validate the optional field `activity`
        if (data['activity']) { // data not null
          GameCenterAchievementRelationshipsActivity.validateJSON(data['activity']);
        }
        // validate the optional field `challenge`
        if (data['challenge']) { // data not null
          GameCenterLeaderboardRelationshipsChallenge.validateJSON(data['challenge']);
        }

        return true;
    }


}



/**
 * @member {module:model/GameCenterAchievementReleaseRelationshipsGameCenterDetail} gameCenterDetail
 */
GameCenterLeaderboardRelationships.prototype['gameCenterDetail'] = undefined;

/**
 * @member {module:model/GameCenterAchievementRelationshipsGameCenterGroup} gameCenterGroup
 */
GameCenterLeaderboardRelationships.prototype['gameCenterGroup'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardRelationshipsGroupLeaderboard} groupLeaderboard
 */
GameCenterLeaderboardRelationships.prototype['groupLeaderboard'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardRelationshipsGameCenterLeaderboardSets} gameCenterLeaderboardSets
 */
GameCenterLeaderboardRelationships.prototype['gameCenterLeaderboardSets'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardRelationshipsLocalizations} localizations
 */
GameCenterLeaderboardRelationships.prototype['localizations'] = undefined;

/**
 * @member {module:model/GameCenterDetailRelationshipsLeaderboardReleases} releases
 */
GameCenterLeaderboardRelationships.prototype['releases'] = undefined;

/**
 * @member {module:model/GameCenterAchievementRelationshipsActivity} activity
 */
GameCenterLeaderboardRelationships.prototype['activity'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardRelationshipsChallenge} challenge
 */
GameCenterLeaderboardRelationships.prototype['challenge'] = undefined;






export default GameCenterLeaderboardRelationships;

