/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CiTestDestination from './CiTestDestination';

/**
 * The CiActionTestConfiguration model module.
 * @module model/CiActionTestConfiguration
 * @version 4.1
 */
class CiActionTestConfiguration {
    /**
     * Constructs a new <code>CiActionTestConfiguration</code>.
     * @alias module:model/CiActionTestConfiguration
     */
    constructor() { 
        
        CiActionTestConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CiActionTestConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CiActionTestConfiguration} obj Optional instance to populate.
     * @return {module:model/CiActionTestConfiguration} The populated <code>CiActionTestConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CiActionTestConfiguration();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('testPlanName')) {
                obj['testPlanName'] = ApiClient.convertToType(data['testPlanName'], 'String');
            }
            if (data.hasOwnProperty('testDestinations')) {
                obj['testDestinations'] = ApiClient.convertToType(data['testDestinations'], [CiTestDestination]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CiActionTestConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CiActionTestConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['testPlanName'] && !(typeof data['testPlanName'] === 'string' || data['testPlanName'] instanceof String)) {
            throw new Error("Expected the field `testPlanName` to be a primitive type in the JSON string but got " + data['testPlanName']);
        }
        if (data['testDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testDestinations'])) {
                throw new Error("Expected the field `testDestinations` to be an array in the JSON data but got " + data['testDestinations']);
            }
            // validate the optional field `testDestinations` (array)
            for (const item of data['testDestinations']) {
                CiTestDestination.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CiActionTestConfiguration.KindEnum} kind
 */
CiActionTestConfiguration.prototype['kind'] = undefined;

/**
 * @member {String} testPlanName
 */
CiActionTestConfiguration.prototype['testPlanName'] = undefined;

/**
 * @member {Array.<module:model/CiTestDestination>} testDestinations
 */
CiActionTestConfiguration.prototype['testDestinations'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
CiActionTestConfiguration['KindEnum'] = {

    /**
     * value: "USE_SCHEME_SETTINGS"
     * @const
     */
    "USE_SCHEME_SETTINGS": "USE_SCHEME_SETTINGS",

    /**
     * value: "SPECIFIC_TEST_PLANS"
     * @const
     */
    "SPECIFIC_TEST_PLANS": "SPECIFIC_TEST_PLANS"
};



export default CiActionTestConfiguration;

