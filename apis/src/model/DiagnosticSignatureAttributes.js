/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticInsight from './DiagnosticInsight';

/**
 * The DiagnosticSignatureAttributes model module.
 * @module model/DiagnosticSignatureAttributes
 * @version 4.1
 */
class DiagnosticSignatureAttributes {
    /**
     * Constructs a new <code>DiagnosticSignatureAttributes</code>.
     * @alias module:model/DiagnosticSignatureAttributes
     */
    constructor() { 
        
        DiagnosticSignatureAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticSignatureAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticSignatureAttributes} obj Optional instance to populate.
     * @return {module:model/DiagnosticSignatureAttributes} The populated <code>DiagnosticSignatureAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticSignatureAttributes();

            if (data.hasOwnProperty('diagnosticType')) {
                obj['diagnosticType'] = ApiClient.convertToType(data['diagnosticType'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('insight')) {
                obj['insight'] = DiagnosticInsight.constructFromObject(data['insight']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticSignatureAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticSignatureAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diagnosticType'] && !(typeof data['diagnosticType'] === 'string' || data['diagnosticType'] instanceof String)) {
            throw new Error("Expected the field `diagnosticType` to be a primitive type in the JSON string but got " + data['diagnosticType']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `insight`
        if (data['insight']) { // data not null
          DiagnosticInsight.validateJSON(data['insight']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiagnosticSignatureAttributes.DiagnosticTypeEnum} diagnosticType
 */
DiagnosticSignatureAttributes.prototype['diagnosticType'] = undefined;

/**
 * @member {String} signature
 */
DiagnosticSignatureAttributes.prototype['signature'] = undefined;

/**
 * @member {Number} weight
 */
DiagnosticSignatureAttributes.prototype['weight'] = undefined;

/**
 * @member {module:model/DiagnosticInsight} insight
 */
DiagnosticSignatureAttributes.prototype['insight'] = undefined;





/**
 * Allowed values for the <code>diagnosticType</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticSignatureAttributes['DiagnosticTypeEnum'] = {

    /**
     * value: "DISK_WRITES"
     * @const
     */
    "DISK_WRITES": "DISK_WRITES",

    /**
     * value: "HANGS"
     * @const
     */
    "HANGS": "HANGS",

    /**
     * value: "LAUNCHES"
     * @const
     */
    "LAUNCHES": "LAUNCHES"
};



export default DiagnosticSignatureAttributes;

