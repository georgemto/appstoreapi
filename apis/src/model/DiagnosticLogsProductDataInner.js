/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticLogsProductDataInnerDiagnosticInsightsInner from './DiagnosticLogsProductDataInnerDiagnosticInsightsInner';
import DiagnosticLogsProductDataInnerDiagnosticLogsInner from './DiagnosticLogsProductDataInnerDiagnosticLogsInner';

/**
 * The DiagnosticLogsProductDataInner model module.
 * @module model/DiagnosticLogsProductDataInner
 * @version 4.1
 */
class DiagnosticLogsProductDataInner {
    /**
     * Constructs a new <code>DiagnosticLogsProductDataInner</code>.
     * @alias module:model/DiagnosticLogsProductDataInner
     */
    constructor() { 
        
        DiagnosticLogsProductDataInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticLogsProductDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticLogsProductDataInner} obj Optional instance to populate.
     * @return {module:model/DiagnosticLogsProductDataInner} The populated <code>DiagnosticLogsProductDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticLogsProductDataInner();

            if (data.hasOwnProperty('signatureId')) {
                obj['signatureId'] = ApiClient.convertToType(data['signatureId'], 'String');
            }
            if (data.hasOwnProperty('diagnosticInsights')) {
                obj['diagnosticInsights'] = ApiClient.convertToType(data['diagnosticInsights'], [DiagnosticLogsProductDataInnerDiagnosticInsightsInner]);
            }
            if (data.hasOwnProperty('diagnosticLogs')) {
                obj['diagnosticLogs'] = ApiClient.convertToType(data['diagnosticLogs'], [DiagnosticLogsProductDataInnerDiagnosticLogsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticLogsProductDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticLogsProductDataInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['signatureId'] && !(typeof data['signatureId'] === 'string' || data['signatureId'] instanceof String)) {
            throw new Error("Expected the field `signatureId` to be a primitive type in the JSON string but got " + data['signatureId']);
        }
        if (data['diagnosticInsights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diagnosticInsights'])) {
                throw new Error("Expected the field `diagnosticInsights` to be an array in the JSON data but got " + data['diagnosticInsights']);
            }
            // validate the optional field `diagnosticInsights` (array)
            for (const item of data['diagnosticInsights']) {
                DiagnosticLogsProductDataInnerDiagnosticInsightsInner.validateJSON(item);
            };
        }
        if (data['diagnosticLogs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diagnosticLogs'])) {
                throw new Error("Expected the field `diagnosticLogs` to be an array in the JSON data but got " + data['diagnosticLogs']);
            }
            // validate the optional field `diagnosticLogs` (array)
            for (const item of data['diagnosticLogs']) {
                DiagnosticLogsProductDataInnerDiagnosticLogsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} signatureId
 */
DiagnosticLogsProductDataInner.prototype['signatureId'] = undefined;

/**
 * @member {Array.<module:model/DiagnosticLogsProductDataInnerDiagnosticInsightsInner>} diagnosticInsights
 */
DiagnosticLogsProductDataInner.prototype['diagnosticInsights'] = undefined;

/**
 * @member {Array.<module:model/DiagnosticLogsProductDataInnerDiagnosticLogsInner>} diagnosticLogs
 */
DiagnosticLogsProductDataInner.prototype['diagnosticLogs'] = undefined;






export default DiagnosticLogsProductDataInner;

