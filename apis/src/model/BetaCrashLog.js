/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BetaCrashLogAttributes from './BetaCrashLogAttributes';
import ResourceLinks from './ResourceLinks';

/**
 * The BetaCrashLog model module.
 * @module model/BetaCrashLog
 * @version 4.1
 */
class BetaCrashLog {
    /**
     * Constructs a new <code>BetaCrashLog</code>.
     * @alias module:model/BetaCrashLog
     * @param type {module:model/BetaCrashLog.TypeEnum} 
     * @param id {String} 
     */
    constructor(type, id) { 
        
        BetaCrashLog.initialize(this, type, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, id) { 
        obj['type'] = type;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>BetaCrashLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BetaCrashLog} obj Optional instance to populate.
     * @return {module:model/BetaCrashLog} The populated <code>BetaCrashLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BetaCrashLog();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = BetaCrashLogAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ResourceLinks.constructFromObject(data['links']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BetaCrashLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BetaCrashLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BetaCrashLog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          BetaCrashLogAttributes.validateJSON(data['attributes']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ResourceLinks.validateJSON(data['links']);
        }

        return true;
    }


}

BetaCrashLog.RequiredProperties = ["type", "id"];

/**
 * @member {module:model/BetaCrashLog.TypeEnum} type
 */
BetaCrashLog.prototype['type'] = undefined;

/**
 * @member {String} id
 */
BetaCrashLog.prototype['id'] = undefined;

/**
 * @member {module:model/BetaCrashLogAttributes} attributes
 */
BetaCrashLog.prototype['attributes'] = undefined;

/**
 * @member {module:model/ResourceLinks} links
 */
BetaCrashLog.prototype['links'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BetaCrashLog['TypeEnum'] = {

    /**
     * value: "betaCrashLogs"
     * @const
     */
    "betaCrashLogs": "betaCrashLogs"
};



export default BetaCrashLog;

