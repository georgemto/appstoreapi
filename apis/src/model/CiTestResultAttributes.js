/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CiTestResultAttributesDestinationTestResultsInner from './CiTestResultAttributesDestinationTestResultsInner';
import CiTestStatus from './CiTestStatus';
import FileLocation from './FileLocation';

/**
 * The CiTestResultAttributes model module.
 * @module model/CiTestResultAttributes
 * @version 4.1
 */
class CiTestResultAttributes {
    /**
     * Constructs a new <code>CiTestResultAttributes</code>.
     * @alias module:model/CiTestResultAttributes
     */
    constructor() { 
        
        CiTestResultAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CiTestResultAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CiTestResultAttributes} obj Optional instance to populate.
     * @return {module:model/CiTestResultAttributes} The populated <code>CiTestResultAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CiTestResultAttributes();

            if (data.hasOwnProperty('className')) {
                obj['className'] = ApiClient.convertToType(data['className'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CiTestStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('fileSource')) {
                obj['fileSource'] = FileLocation.constructFromObject(data['fileSource']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('destinationTestResults')) {
                obj['destinationTestResults'] = ApiClient.convertToType(data['destinationTestResults'], [CiTestResultAttributesDestinationTestResultsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CiTestResultAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CiTestResultAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['className'] && !(typeof data['className'] === 'string' || data['className'] instanceof String)) {
            throw new Error("Expected the field `className` to be a primitive type in the JSON string but got " + data['className']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `fileSource`
        if (data['fileSource']) { // data not null
          FileLocation.validateJSON(data['fileSource']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['destinationTestResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinationTestResults'])) {
                throw new Error("Expected the field `destinationTestResults` to be an array in the JSON data but got " + data['destinationTestResults']);
            }
            // validate the optional field `destinationTestResults` (array)
            for (const item of data['destinationTestResults']) {
                CiTestResultAttributesDestinationTestResultsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} className
 */
CiTestResultAttributes.prototype['className'] = undefined;

/**
 * @member {String} name
 */
CiTestResultAttributes.prototype['name'] = undefined;

/**
 * @member {module:model/CiTestStatus} status
 */
CiTestResultAttributes.prototype['status'] = undefined;

/**
 * @member {module:model/FileLocation} fileSource
 */
CiTestResultAttributes.prototype['fileSource'] = undefined;

/**
 * @member {String} message
 */
CiTestResultAttributes.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/CiTestResultAttributesDestinationTestResultsInner>} destinationTestResults
 */
CiTestResultAttributes.prototype['destinationTestResults'] = undefined;






export default CiTestResultAttributes;

