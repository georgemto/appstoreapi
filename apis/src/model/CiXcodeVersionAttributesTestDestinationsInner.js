/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CiTestDestinationKind from './CiTestDestinationKind';
import CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner from './CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner';

/**
 * The CiXcodeVersionAttributesTestDestinationsInner model module.
 * @module model/CiXcodeVersionAttributesTestDestinationsInner
 * @version 4.1
 */
class CiXcodeVersionAttributesTestDestinationsInner {
    /**
     * Constructs a new <code>CiXcodeVersionAttributesTestDestinationsInner</code>.
     * @alias module:model/CiXcodeVersionAttributesTestDestinationsInner
     */
    constructor() { 
        
        CiXcodeVersionAttributesTestDestinationsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CiXcodeVersionAttributesTestDestinationsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CiXcodeVersionAttributesTestDestinationsInner} obj Optional instance to populate.
     * @return {module:model/CiXcodeVersionAttributesTestDestinationsInner} The populated <code>CiXcodeVersionAttributesTestDestinationsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CiXcodeVersionAttributesTestDestinationsInner();

            if (data.hasOwnProperty('deviceTypeName')) {
                obj['deviceTypeName'] = ApiClient.convertToType(data['deviceTypeName'], 'String');
            }
            if (data.hasOwnProperty('deviceTypeIdentifier')) {
                obj['deviceTypeIdentifier'] = ApiClient.convertToType(data['deviceTypeIdentifier'], 'String');
            }
            if (data.hasOwnProperty('availableRuntimes')) {
                obj['availableRuntimes'] = ApiClient.convertToType(data['availableRuntimes'], [CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = CiTestDestinationKind.constructFromObject(data['kind']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CiXcodeVersionAttributesTestDestinationsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CiXcodeVersionAttributesTestDestinationsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceTypeName'] && !(typeof data['deviceTypeName'] === 'string' || data['deviceTypeName'] instanceof String)) {
            throw new Error("Expected the field `deviceTypeName` to be a primitive type in the JSON string but got " + data['deviceTypeName']);
        }
        // ensure the json data is a string
        if (data['deviceTypeIdentifier'] && !(typeof data['deviceTypeIdentifier'] === 'string' || data['deviceTypeIdentifier'] instanceof String)) {
            throw new Error("Expected the field `deviceTypeIdentifier` to be a primitive type in the JSON string but got " + data['deviceTypeIdentifier']);
        }
        if (data['availableRuntimes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableRuntimes'])) {
                throw new Error("Expected the field `availableRuntimes` to be an array in the JSON data but got " + data['availableRuntimes']);
            }
            // validate the optional field `availableRuntimes` (array)
            for (const item of data['availableRuntimes']) {
                CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} deviceTypeName
 */
CiXcodeVersionAttributesTestDestinationsInner.prototype['deviceTypeName'] = undefined;

/**
 * @member {String} deviceTypeIdentifier
 */
CiXcodeVersionAttributesTestDestinationsInner.prototype['deviceTypeIdentifier'] = undefined;

/**
 * @member {Array.<module:model/CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner>} availableRuntimes
 */
CiXcodeVersionAttributesTestDestinationsInner.prototype['availableRuntimes'] = undefined;

/**
 * @member {module:model/CiTestDestinationKind} kind
 */
CiXcodeVersionAttributesTestDestinationsInner.prototype['kind'] = undefined;






export default CiXcodeVersionAttributesTestDestinationsInner;

