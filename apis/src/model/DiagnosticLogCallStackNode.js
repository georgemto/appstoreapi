/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiagnosticLogCallStackNode model module.
 * @module model/DiagnosticLogCallStackNode
 * @version 4.1
 */
class DiagnosticLogCallStackNode {
    /**
     * Constructs a new <code>DiagnosticLogCallStackNode</code>.
     * @alias module:model/DiagnosticLogCallStackNode
     */
    constructor() { 
        
        DiagnosticLogCallStackNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticLogCallStackNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticLogCallStackNode} obj Optional instance to populate.
     * @return {module:model/DiagnosticLogCallStackNode} The populated <code>DiagnosticLogCallStackNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticLogCallStackNode();

            if (data.hasOwnProperty('sampleCount')) {
                obj['sampleCount'] = ApiClient.convertToType(data['sampleCount'], 'Number');
            }
            if (data.hasOwnProperty('isBlameFrame')) {
                obj['isBlameFrame'] = ApiClient.convertToType(data['isBlameFrame'], 'Boolean');
            }
            if (data.hasOwnProperty('symbolName')) {
                obj['symbolName'] = ApiClient.convertToType(data['symbolName'], 'String');
            }
            if (data.hasOwnProperty('insightsCategory')) {
                obj['insightsCategory'] = ApiClient.convertToType(data['insightsCategory'], 'String');
            }
            if (data.hasOwnProperty('offsetIntoSymbol')) {
                obj['offsetIntoSymbol'] = ApiClient.convertToType(data['offsetIntoSymbol'], 'String');
            }
            if (data.hasOwnProperty('binaryName')) {
                obj['binaryName'] = ApiClient.convertToType(data['binaryName'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('binaryUUID')) {
                obj['binaryUUID'] = ApiClient.convertToType(data['binaryUUID'], 'String');
            }
            if (data.hasOwnProperty('lineNumber')) {
                obj['lineNumber'] = ApiClient.convertToType(data['lineNumber'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('offsetIntoBinaryTextSegment')) {
                obj['offsetIntoBinaryTextSegment'] = ApiClient.convertToType(data['offsetIntoBinaryTextSegment'], 'String');
            }
            if (data.hasOwnProperty('rawFrame')) {
                obj['rawFrame'] = ApiClient.convertToType(data['rawFrame'], 'String');
            }
            if (data.hasOwnProperty('subFrames')) {
                obj['subFrames'] = ApiClient.convertToType(data['subFrames'], [DiagnosticLogCallStackNode]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticLogCallStackNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticLogCallStackNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['symbolName'] && !(typeof data['symbolName'] === 'string' || data['symbolName'] instanceof String)) {
            throw new Error("Expected the field `symbolName` to be a primitive type in the JSON string but got " + data['symbolName']);
        }
        // ensure the json data is a string
        if (data['insightsCategory'] && !(typeof data['insightsCategory'] === 'string' || data['insightsCategory'] instanceof String)) {
            throw new Error("Expected the field `insightsCategory` to be a primitive type in the JSON string but got " + data['insightsCategory']);
        }
        // ensure the json data is a string
        if (data['offsetIntoSymbol'] && !(typeof data['offsetIntoSymbol'] === 'string' || data['offsetIntoSymbol'] instanceof String)) {
            throw new Error("Expected the field `offsetIntoSymbol` to be a primitive type in the JSON string but got " + data['offsetIntoSymbol']);
        }
        // ensure the json data is a string
        if (data['binaryName'] && !(typeof data['binaryName'] === 'string' || data['binaryName'] instanceof String)) {
            throw new Error("Expected the field `binaryName` to be a primitive type in the JSON string but got " + data['binaryName']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['binaryUUID'] && !(typeof data['binaryUUID'] === 'string' || data['binaryUUID'] instanceof String)) {
            throw new Error("Expected the field `binaryUUID` to be a primitive type in the JSON string but got " + data['binaryUUID']);
        }
        // ensure the json data is a string
        if (data['lineNumber'] && !(typeof data['lineNumber'] === 'string' || data['lineNumber'] instanceof String)) {
            throw new Error("Expected the field `lineNumber` to be a primitive type in the JSON string but got " + data['lineNumber']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['offsetIntoBinaryTextSegment'] && !(typeof data['offsetIntoBinaryTextSegment'] === 'string' || data['offsetIntoBinaryTextSegment'] instanceof String)) {
            throw new Error("Expected the field `offsetIntoBinaryTextSegment` to be a primitive type in the JSON string but got " + data['offsetIntoBinaryTextSegment']);
        }
        // ensure the json data is a string
        if (data['rawFrame'] && !(typeof data['rawFrame'] === 'string' || data['rawFrame'] instanceof String)) {
            throw new Error("Expected the field `rawFrame` to be a primitive type in the JSON string but got " + data['rawFrame']);
        }
        if (data['subFrames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subFrames'])) {
                throw new Error("Expected the field `subFrames` to be an array in the JSON data but got " + data['subFrames']);
            }
            // validate the optional field `subFrames` (array)
            for (const item of data['subFrames']) {
                DiagnosticLogCallStackNode.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} sampleCount
 */
DiagnosticLogCallStackNode.prototype['sampleCount'] = undefined;

/**
 * @member {Boolean} isBlameFrame
 */
DiagnosticLogCallStackNode.prototype['isBlameFrame'] = undefined;

/**
 * @member {String} symbolName
 */
DiagnosticLogCallStackNode.prototype['symbolName'] = undefined;

/**
 * @member {String} insightsCategory
 */
DiagnosticLogCallStackNode.prototype['insightsCategory'] = undefined;

/**
 * @member {String} offsetIntoSymbol
 */
DiagnosticLogCallStackNode.prototype['offsetIntoSymbol'] = undefined;

/**
 * @member {String} binaryName
 */
DiagnosticLogCallStackNode.prototype['binaryName'] = undefined;

/**
 * @member {String} fileName
 */
DiagnosticLogCallStackNode.prototype['fileName'] = undefined;

/**
 * @member {String} binaryUUID
 */
DiagnosticLogCallStackNode.prototype['binaryUUID'] = undefined;

/**
 * @member {String} lineNumber
 */
DiagnosticLogCallStackNode.prototype['lineNumber'] = undefined;

/**
 * @member {String} address
 */
DiagnosticLogCallStackNode.prototype['address'] = undefined;

/**
 * @member {String} offsetIntoBinaryTextSegment
 */
DiagnosticLogCallStackNode.prototype['offsetIntoBinaryTextSegment'] = undefined;

/**
 * @member {String} rawFrame
 */
DiagnosticLogCallStackNode.prototype['rawFrame'] = undefined;

/**
 * @member {Array.<module:model/DiagnosticLogCallStackNode>} subFrames
 */
DiagnosticLogCallStackNode.prototype['subFrames'] = undefined;






export default DiagnosticLogCallStackNode;

