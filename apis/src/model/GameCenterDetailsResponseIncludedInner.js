/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import App from './App';
import AppStoreVersion from './AppStoreVersion';
import GameCenterAchievement from './GameCenterAchievement';
import GameCenterAchievementRelease from './GameCenterAchievementRelease';
import GameCenterActivity from './GameCenterActivity';
import GameCenterActivityVersionRelease from './GameCenterActivityVersionRelease';
import GameCenterAppVersion from './GameCenterAppVersion';
import GameCenterChallenge from './GameCenterChallenge';
import GameCenterChallengeVersionRelease from './GameCenterChallengeVersionRelease';
import GameCenterGroup from './GameCenterGroup';
import GameCenterLeaderboard from './GameCenterLeaderboard';
import GameCenterLeaderboardAttributes from './GameCenterLeaderboardAttributes';
import GameCenterLeaderboardRelationships from './GameCenterLeaderboardRelationships';
import GameCenterLeaderboardRelease from './GameCenterLeaderboardRelease';
import GameCenterLeaderboardSet from './GameCenterLeaderboardSet';
import GameCenterLeaderboardSetRelease from './GameCenterLeaderboardSetRelease';
import ResourceLinks from './ResourceLinks';

/**
 * The GameCenterDetailsResponseIncludedInner model module.
 * @module model/GameCenterDetailsResponseIncludedInner
 * @version 4.1
 */
class GameCenterDetailsResponseIncludedInner {
    /**
     * Constructs a new <code>GameCenterDetailsResponseIncludedInner</code>.
     * @alias module:model/GameCenterDetailsResponseIncludedInner
     * @param {(module:model/App|module:model/AppStoreVersion|module:model/GameCenterAchievement|module:model/GameCenterAchievementRelease|module:model/GameCenterActivity|module:model/GameCenterActivityVersionRelease|module:model/GameCenterAppVersion|module:model/GameCenterChallenge|module:model/GameCenterChallengeVersionRelease|module:model/GameCenterGroup|module:model/GameCenterLeaderboard|module:model/GameCenterLeaderboardRelease|module:model/GameCenterLeaderboardSet|module:model/GameCenterLeaderboardSetRelease)} instance The actual instance to initialize GameCenterDetailsResponseIncludedInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AppStoreVersion") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AppStoreVersion.validateJSON(instance); // throw an exception if no match
                // create AppStoreVersion from JS object
                this.actualInstance = AppStoreVersion.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AppStoreVersion
            errorMessages.push("Failed to construct AppStoreVersion: " + err)
        }

        try {
            if (typeof instance === "App") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                App.validateJSON(instance); // throw an exception if no match
                // create App from JS object
                this.actualInstance = App.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into App
            errorMessages.push("Failed to construct App: " + err)
        }

        try {
            if (typeof instance === "GameCenterAchievementRelease") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterAchievementRelease.validateJSON(instance); // throw an exception if no match
                // create GameCenterAchievementRelease from JS object
                this.actualInstance = GameCenterAchievementRelease.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterAchievementRelease
            errorMessages.push("Failed to construct GameCenterAchievementRelease: " + err)
        }

        try {
            if (typeof instance === "GameCenterAchievement") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterAchievement.validateJSON(instance); // throw an exception if no match
                // create GameCenterAchievement from JS object
                this.actualInstance = GameCenterAchievement.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterAchievement
            errorMessages.push("Failed to construct GameCenterAchievement: " + err)
        }

        try {
            if (typeof instance === "GameCenterActivity") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterActivity.validateJSON(instance); // throw an exception if no match
                // create GameCenterActivity from JS object
                this.actualInstance = GameCenterActivity.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterActivity
            errorMessages.push("Failed to construct GameCenterActivity: " + err)
        }

        try {
            if (typeof instance === "GameCenterActivityVersionRelease") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterActivityVersionRelease.validateJSON(instance); // throw an exception if no match
                // create GameCenterActivityVersionRelease from JS object
                this.actualInstance = GameCenterActivityVersionRelease.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterActivityVersionRelease
            errorMessages.push("Failed to construct GameCenterActivityVersionRelease: " + err)
        }

        try {
            if (typeof instance === "GameCenterAppVersion") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterAppVersion.validateJSON(instance); // throw an exception if no match
                // create GameCenterAppVersion from JS object
                this.actualInstance = GameCenterAppVersion.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterAppVersion
            errorMessages.push("Failed to construct GameCenterAppVersion: " + err)
        }

        try {
            if (typeof instance === "GameCenterChallengeVersionRelease") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterChallengeVersionRelease.validateJSON(instance); // throw an exception if no match
                // create GameCenterChallengeVersionRelease from JS object
                this.actualInstance = GameCenterChallengeVersionRelease.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterChallengeVersionRelease
            errorMessages.push("Failed to construct GameCenterChallengeVersionRelease: " + err)
        }

        try {
            if (typeof instance === "GameCenterChallenge") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterChallenge.validateJSON(instance); // throw an exception if no match
                // create GameCenterChallenge from JS object
                this.actualInstance = GameCenterChallenge.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterChallenge
            errorMessages.push("Failed to construct GameCenterChallenge: " + err)
        }

        try {
            if (typeof instance === "GameCenterGroup") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterGroup.validateJSON(instance); // throw an exception if no match
                // create GameCenterGroup from JS object
                this.actualInstance = GameCenterGroup.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterGroup
            errorMessages.push("Failed to construct GameCenterGroup: " + err)
        }

        try {
            if (typeof instance === "GameCenterLeaderboardRelease") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterLeaderboardRelease.validateJSON(instance); // throw an exception if no match
                // create GameCenterLeaderboardRelease from JS object
                this.actualInstance = GameCenterLeaderboardRelease.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterLeaderboardRelease
            errorMessages.push("Failed to construct GameCenterLeaderboardRelease: " + err)
        }

        try {
            if (typeof instance === "GameCenterLeaderboardSetRelease") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterLeaderboardSetRelease.validateJSON(instance); // throw an exception if no match
                // create GameCenterLeaderboardSetRelease from JS object
                this.actualInstance = GameCenterLeaderboardSetRelease.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterLeaderboardSetRelease
            errorMessages.push("Failed to construct GameCenterLeaderboardSetRelease: " + err)
        }

        try {
            if (typeof instance === "GameCenterLeaderboardSet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterLeaderboardSet.validateJSON(instance); // throw an exception if no match
                // create GameCenterLeaderboardSet from JS object
                this.actualInstance = GameCenterLeaderboardSet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterLeaderboardSet
            errorMessages.push("Failed to construct GameCenterLeaderboardSet: " + err)
        }

        try {
            if (typeof instance === "GameCenterLeaderboard") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GameCenterLeaderboard.validateJSON(instance); // throw an exception if no match
                // create GameCenterLeaderboard from JS object
                this.actualInstance = GameCenterLeaderboard.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GameCenterLeaderboard
            errorMessages.push("Failed to construct GameCenterLeaderboard: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GameCenterDetailsResponseIncludedInner` with oneOf schemas App, AppStoreVersion, GameCenterAchievement, GameCenterAchievementRelease, GameCenterActivity, GameCenterActivityVersionRelease, GameCenterAppVersion, GameCenterChallenge, GameCenterChallengeVersionRelease, GameCenterGroup, GameCenterLeaderboard, GameCenterLeaderboardRelease, GameCenterLeaderboardSet, GameCenterLeaderboardSetRelease. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GameCenterDetailsResponseIncludedInner` with oneOf schemas App, AppStoreVersion, GameCenterAchievement, GameCenterAchievementRelease, GameCenterActivity, GameCenterActivityVersionRelease, GameCenterAppVersion, GameCenterChallenge, GameCenterChallengeVersionRelease, GameCenterGroup, GameCenterLeaderboard, GameCenterLeaderboardRelease, GameCenterLeaderboardSet, GameCenterLeaderboardSetRelease. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GameCenterDetailsResponseIncludedInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameCenterDetailsResponseIncludedInner} obj Optional instance to populate.
     * @return {module:model/GameCenterDetailsResponseIncludedInner} The populated <code>GameCenterDetailsResponseIncludedInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GameCenterDetailsResponseIncludedInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>App</code>, <code>AppStoreVersion</code>, <code>GameCenterAchievement</code>, <code>GameCenterAchievementRelease</code>, <code>GameCenterActivity</code>, <code>GameCenterActivityVersionRelease</code>, <code>GameCenterAppVersion</code>, <code>GameCenterChallenge</code>, <code>GameCenterChallengeVersionRelease</code>, <code>GameCenterGroup</code>, <code>GameCenterLeaderboard</code>, <code>GameCenterLeaderboardRelease</code>, <code>GameCenterLeaderboardSet</code>, <code>GameCenterLeaderboardSetRelease</code>.
     * @return {(module:model/App|module:model/AppStoreVersion|module:model/GameCenterAchievement|module:model/GameCenterAchievementRelease|module:model/GameCenterActivity|module:model/GameCenterActivityVersionRelease|module:model/GameCenterAppVersion|module:model/GameCenterChallenge|module:model/GameCenterChallengeVersionRelease|module:model/GameCenterGroup|module:model/GameCenterLeaderboard|module:model/GameCenterLeaderboardRelease|module:model/GameCenterLeaderboardSet|module:model/GameCenterLeaderboardSetRelease)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>App</code>, <code>AppStoreVersion</code>, <code>GameCenterAchievement</code>, <code>GameCenterAchievementRelease</code>, <code>GameCenterActivity</code>, <code>GameCenterActivityVersionRelease</code>, <code>GameCenterAppVersion</code>, <code>GameCenterChallenge</code>, <code>GameCenterChallengeVersionRelease</code>, <code>GameCenterGroup</code>, <code>GameCenterLeaderboard</code>, <code>GameCenterLeaderboardRelease</code>, <code>GameCenterLeaderboardSet</code>, <code>GameCenterLeaderboardSetRelease</code>.
     * @param {(module:model/App|module:model/AppStoreVersion|module:model/GameCenterAchievement|module:model/GameCenterAchievementRelease|module:model/GameCenterActivity|module:model/GameCenterActivityVersionRelease|module:model/GameCenterAppVersion|module:model/GameCenterChallenge|module:model/GameCenterChallengeVersionRelease|module:model/GameCenterGroup|module:model/GameCenterLeaderboard|module:model/GameCenterLeaderboardRelease|module:model/GameCenterLeaderboardSet|module:model/GameCenterLeaderboardSetRelease)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GameCenterDetailsResponseIncludedInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GameCenterDetailsResponseIncludedInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GameCenterDetailsResponseIncludedInner} An instance of GameCenterDetailsResponseIncludedInner.
     */
    static fromJSON = function(json_string){
        return GameCenterDetailsResponseIncludedInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/GameCenterDetailsResponseIncludedInner.TypeEnum} type
 */
GameCenterDetailsResponseIncludedInner.prototype['type'] = undefined;

/**
 * @member {String} id
 */
GameCenterDetailsResponseIncludedInner.prototype['id'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardAttributes} attributes
 */
GameCenterDetailsResponseIncludedInner.prototype['attributes'] = undefined;

/**
 * @member {module:model/GameCenterLeaderboardRelationships} relationships
 */
GameCenterDetailsResponseIncludedInner.prototype['relationships'] = undefined;

/**
 * @member {module:model/ResourceLinks} links
 */
GameCenterDetailsResponseIncludedInner.prototype['links'] = undefined;


GameCenterDetailsResponseIncludedInner.OneOf = ["App", "AppStoreVersion", "GameCenterAchievement", "GameCenterAchievementRelease", "GameCenterActivity", "GameCenterActivityVersionRelease", "GameCenterAppVersion", "GameCenterChallenge", "GameCenterChallengeVersionRelease", "GameCenterGroup", "GameCenterLeaderboard", "GameCenterLeaderboardRelease", "GameCenterLeaderboardSet", "GameCenterLeaderboardSetRelease"];

export default GameCenterDetailsResponseIncludedInner;

