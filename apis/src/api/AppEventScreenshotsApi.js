/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEventScreenshotCreateRequest from '../model/AppEventScreenshotCreateRequest';
import AppEventScreenshotResponse from '../model/AppEventScreenshotResponse';
import AppEventScreenshotUpdateRequest from '../model/AppEventScreenshotUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppEventScreenshots service.
* @module api/AppEventScreenshotsApi
* @version 4.1
*/
export default class AppEventScreenshotsApi {

    /**
    * Constructs a new AppEventScreenshotsApi. 
    * @alias module:api/AppEventScreenshotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appEventScreenshotsCreateInstance operation.
     * @callback module:api/AppEventScreenshotsApi~appEventScreenshotsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppEventScreenshotCreateRequest} appEventScreenshotCreateRequest AppEventScreenshot representation
     * @param {module:api/AppEventScreenshotsApi~appEventScreenshotsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventScreenshotResponse}
     */
    appEventScreenshotsCreateInstance(appEventScreenshotCreateRequest, callback) {
      let postBody = appEventScreenshotCreateRequest;
      // verify the required parameter 'appEventScreenshotCreateRequest' is set
      if (appEventScreenshotCreateRequest === undefined || appEventScreenshotCreateRequest === null) {
        throw new Error("Missing the required parameter 'appEventScreenshotCreateRequest' when calling appEventScreenshotsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appEventScreenshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventScreenshotsDeleteInstance operation.
     * @callback module:api/AppEventScreenshotsApi~appEventScreenshotsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppEventScreenshotsApi~appEventScreenshotsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appEventScreenshotsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventScreenshotsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appEventScreenshots/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventScreenshotsGetInstance operation.
     * @callback module:api/AppEventScreenshotsApi~appEventScreenshotsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEventScreenshots] the fields to include for returned resources of type appEventScreenshots
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppEventScreenshotsApi~appEventScreenshotsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventScreenshotResponse}
     */
    appEventScreenshotsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventScreenshotsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEventScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppEventScreenshots'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appEventScreenshots/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventScreenshotsUpdateInstance operation.
     * @callback module:api/AppEventScreenshotsApi~appEventScreenshotsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppEventScreenshotUpdateRequest} appEventScreenshotUpdateRequest AppEventScreenshot representation
     * @param {module:api/AppEventScreenshotsApi~appEventScreenshotsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventScreenshotResponse}
     */
    appEventScreenshotsUpdateInstance(id, appEventScreenshotUpdateRequest, callback) {
      let postBody = appEventScreenshotUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventScreenshotsUpdateInstance");
      }
      // verify the required parameter 'appEventScreenshotUpdateRequest' is set
      if (appEventScreenshotUpdateRequest === undefined || appEventScreenshotUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appEventScreenshotUpdateRequest' when calling appEventScreenshotsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/appEventScreenshots/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
