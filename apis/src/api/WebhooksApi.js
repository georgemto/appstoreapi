/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import WebhookCreateRequest from '../model/WebhookCreateRequest';
import WebhookDeliveriesLinkagesResponse from '../model/WebhookDeliveriesLinkagesResponse';
import WebhookDeliveriesResponse from '../model/WebhookDeliveriesResponse';
import WebhookResponse from '../model/WebhookResponse';
import WebhookUpdateRequest from '../model/WebhookUpdateRequest';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 4.1
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhooksCreateInstance operation.
     * @callback module:api/WebhooksApi~webhooksCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebhookCreateRequest} webhookCreateRequest Webhook representation
     * @param {module:api/WebhooksApi~webhooksCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookResponse}
     */
    webhooksCreateInstance(webhookCreateRequest, callback) {
      let postBody = webhookCreateRequest;
      // verify the required parameter 'webhookCreateRequest' is set
      if (webhookCreateRequest === undefined || webhookCreateRequest === null) {
        throw new Error("Missing the required parameter 'webhookCreateRequest' when calling webhooksCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookResponse;
      return this.apiClient.callApi(
        '/v1/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksDeleteInstance operation.
     * @callback module:api/WebhooksApi~webhooksDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/WebhooksApi~webhooksDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksDeliveriesGetToManyRelated operation.
     * @callback module:api/WebhooksApi~webhooksDeliveriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookDeliveriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterDeliveryState] filter by attribute 'deliveryState'
     * @param {Array.<String>} [filterCreatedDateGreaterThanOrEqualTo] filter by createdDateGreaterThanOrEqualTo
     * @param {Array.<String>} [filterCreatedDateLessThan] filter by createdDateLessThan
     * @param {Array.<module:model/String>} [fieldsWebhookDeliveries] the fields to include for returned resources of type webhookDeliveries
     * @param {Array.<module:model/String>} [fieldsWebhookEvents] the fields to include for returned resources of type webhookEvents
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/WebhooksApi~webhooksDeliveriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookDeliveriesResponse}
     */
    webhooksDeliveriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksDeliveriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[deliveryState]': this.apiClient.buildCollectionParam(opts['filterDeliveryState'], 'csv'),
        'filter[createdDateGreaterThanOrEqualTo]': this.apiClient.buildCollectionParam(opts['filterCreatedDateGreaterThanOrEqualTo'], 'csv'),
        'filter[createdDateLessThan]': this.apiClient.buildCollectionParam(opts['filterCreatedDateLessThan'], 'csv'),
        'fields[webhookDeliveries]': this.apiClient.buildCollectionParam(opts['fieldsWebhookDeliveries'], 'csv'),
        'fields[webhookEvents]': this.apiClient.buildCollectionParam(opts['fieldsWebhookEvents'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookDeliveriesResponse;
      return this.apiClient.callApi(
        '/v1/webhooks/{id}/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksDeliveriesGetToManyRelationship operation.
     * @callback module:api/WebhooksApi~webhooksDeliveriesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookDeliveriesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/WebhooksApi~webhooksDeliveriesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookDeliveriesLinkagesResponse}
     */
    webhooksDeliveriesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksDeliveriesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookDeliveriesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/webhooks/{id}/relationships/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksGetInstance operation.
     * @callback module:api/WebhooksApi~webhooksGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsWebhooks] the fields to include for returned resources of type webhooks
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/WebhooksApi~webhooksGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookResponse}
     */
    webhooksGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[webhooks]': this.apiClient.buildCollectionParam(opts['fieldsWebhooks'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookResponse;
      return this.apiClient.callApi(
        '/v1/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksUpdateInstance operation.
     * @callback module:api/WebhooksApi~webhooksUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/WebhookUpdateRequest} webhookUpdateRequest Webhook representation
     * @param {module:api/WebhooksApi~webhooksUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookResponse}
     */
    webhooksUpdateInstance(id, webhookUpdateRequest, callback) {
      let postBody = webhookUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksUpdateInstance");
      }
      // verify the required parameter 'webhookUpdateRequest' is set
      if (webhookUpdateRequest === undefined || webhookUpdateRequest === null) {
        throw new Error("Missing the required parameter 'webhookUpdateRequest' when calling webhooksUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookResponse;
      return this.apiClient.callApi(
        '/v1/webhooks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
