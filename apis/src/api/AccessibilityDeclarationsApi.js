/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessibilityDeclarationCreateRequest from '../model/AccessibilityDeclarationCreateRequest';
import AccessibilityDeclarationResponse from '../model/AccessibilityDeclarationResponse';
import AccessibilityDeclarationUpdateRequest from '../model/AccessibilityDeclarationUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AccessibilityDeclarations service.
* @module api/AccessibilityDeclarationsApi
* @version 4.1
*/
export default class AccessibilityDeclarationsApi {

    /**
    * Constructs a new AccessibilityDeclarationsApi. 
    * @alias module:api/AccessibilityDeclarationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessibilityDeclarationsCreateInstance operation.
     * @callback module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessibilityDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AccessibilityDeclarationCreateRequest} accessibilityDeclarationCreateRequest AccessibilityDeclaration representation
     * @param {module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessibilityDeclarationResponse}
     */
    accessibilityDeclarationsCreateInstance(accessibilityDeclarationCreateRequest, callback) {
      let postBody = accessibilityDeclarationCreateRequest;
      // verify the required parameter 'accessibilityDeclarationCreateRequest' is set
      if (accessibilityDeclarationCreateRequest === undefined || accessibilityDeclarationCreateRequest === null) {
        throw new Error("Missing the required parameter 'accessibilityDeclarationCreateRequest' when calling accessibilityDeclarationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessibilityDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/accessibilityDeclarations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessibilityDeclarationsDeleteInstance operation.
     * @callback module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accessibilityDeclarationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accessibilityDeclarationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/accessibilityDeclarations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessibilityDeclarationsGetInstance operation.
     * @callback module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessibilityDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAccessibilityDeclarations] the fields to include for returned resources of type accessibilityDeclarations
     * @param {module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessibilityDeclarationResponse}
     */
    accessibilityDeclarationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accessibilityDeclarationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[accessibilityDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAccessibilityDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessibilityDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/accessibilityDeclarations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessibilityDeclarationsUpdateInstance operation.
     * @callback module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessibilityDeclarationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AccessibilityDeclarationUpdateRequest} accessibilityDeclarationUpdateRequest AccessibilityDeclaration representation
     * @param {module:api/AccessibilityDeclarationsApi~accessibilityDeclarationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessibilityDeclarationResponse}
     */
    accessibilityDeclarationsUpdateInstance(id, accessibilityDeclarationUpdateRequest, callback) {
      let postBody = accessibilityDeclarationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accessibilityDeclarationsUpdateInstance");
      }
      // verify the required parameter 'accessibilityDeclarationUpdateRequest' is set
      if (accessibilityDeclarationUpdateRequest === undefined || accessibilityDeclarationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'accessibilityDeclarationUpdateRequest' when calling accessibilityDeclarationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessibilityDeclarationResponse;
      return this.apiClient.callApi(
        '/v1/accessibilityDeclarations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
