/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterMatchmakingQueueCreateRequest from '../model/GameCenterMatchmakingQueueCreateRequest';
import GameCenterMatchmakingQueueRequestsV1MetricResponse from '../model/GameCenterMatchmakingQueueRequestsV1MetricResponse';
import GameCenterMatchmakingQueueResponse from '../model/GameCenterMatchmakingQueueResponse';
import GameCenterMatchmakingQueueSizesV1MetricResponse from '../model/GameCenterMatchmakingQueueSizesV1MetricResponse';
import GameCenterMatchmakingQueueUpdateRequest from '../model/GameCenterMatchmakingQueueUpdateRequest';
import GameCenterMatchmakingQueuesResponse from '../model/GameCenterMatchmakingQueuesResponse';
import GameCenterMatchmakingSessionsV1MetricResponse from '../model/GameCenterMatchmakingSessionsV1MetricResponse';

/**
* GameCenterMatchmakingQueues service.
* @module api/GameCenterMatchmakingQueuesApi
* @version 4.1
*/
export default class GameCenterMatchmakingQueuesApi {

    /**
    * Constructs a new GameCenterMatchmakingQueuesApi. 
    * @alias module:api/GameCenterMatchmakingQueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesCreateInstance operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterMatchmakingQueueCreateRequest} gameCenterMatchmakingQueueCreateRequest GameCenterMatchmakingQueue representation
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueResponse}
     */
    gameCenterMatchmakingQueuesCreateInstance(gameCenterMatchmakingQueueCreateRequest, callback) {
      let postBody = gameCenterMatchmakingQueueCreateRequest;
      // verify the required parameter 'gameCenterMatchmakingQueueCreateRequest' is set
      if (gameCenterMatchmakingQueueCreateRequest === undefined || gameCenterMatchmakingQueueCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterMatchmakingQueueCreateRequest' when calling gameCenterMatchmakingQueuesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesDeleteInstance operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterMatchmakingQueuesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueSizesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueSizesV1MetricResponse}
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueSizesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterDetail] filter by 'gameCenterDetail' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterDetail]': opts['filterGameCenterDetail'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesGetCollection operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterMatchmakingQueues] the fields to include for returned resources of type gameCenterMatchmakingQueues
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueuesResponse}
     */
    gameCenterMatchmakingQueuesGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields[gameCenterMatchmakingQueues]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterMatchmakingQueues'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueuesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesGetInstance operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterMatchmakingQueues] the fields to include for returned resources of type gameCenterMatchmakingQueues
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueResponse}
     */
    gameCenterMatchmakingQueuesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterMatchmakingQueues]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterMatchmakingQueues'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueSizesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueSizesV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueSizesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterDetail] filter by 'gameCenterDetail' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterDetail]': opts['filterGameCenterDetail'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingSessionsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingSessionsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingSessionsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesUpdateInstance operation.
     * @callback module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterMatchmakingQueueUpdateRequest} gameCenterMatchmakingQueueUpdateRequest GameCenterMatchmakingQueue representation
     * @param {module:api/GameCenterMatchmakingQueuesApi~gameCenterMatchmakingQueuesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueResponse}
     */
    gameCenterMatchmakingQueuesUpdateInstance(id, gameCenterMatchmakingQueueUpdateRequest, callback) {
      let postBody = gameCenterMatchmakingQueueUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesUpdateInstance");
      }
      // verify the required parameter 'gameCenterMatchmakingQueueUpdateRequest' is set
      if (gameCenterMatchmakingQueueUpdateRequest === undefined || gameCenterMatchmakingQueueUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterMatchmakingQueueUpdateRequest' when calling gameCenterMatchmakingQueuesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
