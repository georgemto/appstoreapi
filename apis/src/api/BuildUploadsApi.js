/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuildUploadBuildUploadFilesLinkagesResponse from '../model/BuildUploadBuildUploadFilesLinkagesResponse';
import BuildUploadCreateRequest from '../model/BuildUploadCreateRequest';
import BuildUploadFilesResponse from '../model/BuildUploadFilesResponse';
import BuildUploadResponse from '../model/BuildUploadResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BuildUploads service.
* @module api/BuildUploadsApi
* @version 4.1
*/
export default class BuildUploadsApi {

    /**
    * Constructs a new BuildUploadsApi. 
    * @alias module:api/BuildUploadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildUploadsBuildUploadFilesGetToManyRelated operation.
     * @callback module:api/BuildUploadsApi~buildUploadsBuildUploadFilesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildUploadFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildUploadFiles] the fields to include for returned resources of type buildUploadFiles
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildUploadsApi~buildUploadsBuildUploadFilesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildUploadFilesResponse}
     */
    buildUploadsBuildUploadFilesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildUploadsBuildUploadFilesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildUploadFiles]': this.apiClient.buildCollectionParam(opts['fieldsBuildUploadFiles'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildUploadFilesResponse;
      return this.apiClient.callApi(
        '/v1/buildUploads/{id}/buildUploadFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildUploadsBuildUploadFilesGetToManyRelationship operation.
     * @callback module:api/BuildUploadsApi~buildUploadsBuildUploadFilesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildUploadBuildUploadFilesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildUploadsApi~buildUploadsBuildUploadFilesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildUploadBuildUploadFilesLinkagesResponse}
     */
    buildUploadsBuildUploadFilesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildUploadsBuildUploadFilesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildUploadBuildUploadFilesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/buildUploads/{id}/relationships/buildUploadFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildUploadsCreateInstance operation.
     * @callback module:api/BuildUploadsApi~buildUploadsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BuildUploadCreateRequest} buildUploadCreateRequest BuildUpload representation
     * @param {module:api/BuildUploadsApi~buildUploadsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildUploadResponse}
     */
    buildUploadsCreateInstance(buildUploadCreateRequest, callback) {
      let postBody = buildUploadCreateRequest;
      // verify the required parameter 'buildUploadCreateRequest' is set
      if (buildUploadCreateRequest === undefined || buildUploadCreateRequest === null) {
        throw new Error("Missing the required parameter 'buildUploadCreateRequest' when calling buildUploadsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildUploadResponse;
      return this.apiClient.callApi(
        '/v1/buildUploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildUploadsDeleteInstance operation.
     * @callback module:api/BuildUploadsApi~buildUploadsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildUploadsApi~buildUploadsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildUploadsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildUploadsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/buildUploads/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildUploadsGetInstance operation.
     * @callback module:api/BuildUploadsApi~buildUploadsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildUploads] the fields to include for returned resources of type buildUploads
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/BuildUploadsApi~buildUploadsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildUploadResponse}
     */
    buildUploadsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildUploadsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildUploads]': this.apiClient.buildCollectionParam(opts['fieldsBuildUploads'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildUploadResponse;
      return this.apiClient.callApi(
        '/v1/buildUploads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
