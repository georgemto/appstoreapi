/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlternativeDistributionKeyCreateRequest from '../model/AlternativeDistributionKeyCreateRequest';
import AlternativeDistributionKeyResponse from '../model/AlternativeDistributionKeyResponse';
import AlternativeDistributionKeysResponse from '../model/AlternativeDistributionKeysResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AlternativeDistributionKeys service.
* @module api/AlternativeDistributionKeysApi
* @version 4.1
*/
export default class AlternativeDistributionKeysApi {

    /**
    * Constructs a new AlternativeDistributionKeysApi. 
    * @alias module:api/AlternativeDistributionKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alternativeDistributionKeysCreateInstance operation.
     * @callback module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlternativeDistributionKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AlternativeDistributionKeyCreateRequest} alternativeDistributionKeyCreateRequest AlternativeDistributionKey representation
     * @param {module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlternativeDistributionKeyResponse}
     */
    alternativeDistributionKeysCreateInstance(alternativeDistributionKeyCreateRequest, callback) {
      let postBody = alternativeDistributionKeyCreateRequest;
      // verify the required parameter 'alternativeDistributionKeyCreateRequest' is set
      if (alternativeDistributionKeyCreateRequest === undefined || alternativeDistributionKeyCreateRequest === null) {
        throw new Error("Missing the required parameter 'alternativeDistributionKeyCreateRequest' when calling alternativeDistributionKeysCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlternativeDistributionKeyResponse;
      return this.apiClient.callApi(
        '/v1/alternativeDistributionKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alternativeDistributionKeysDeleteInstance operation.
     * @callback module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alternativeDistributionKeysDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling alternativeDistributionKeysDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/alternativeDistributionKeys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alternativeDistributionKeysGetCollection operation.
     * @callback module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlternativeDistributionKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} [existsApp] filter by existence or non-existence of related 'app'
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionKeys] the fields to include for returned resources of type alternativeDistributionKeys
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlternativeDistributionKeysResponse}
     */
    alternativeDistributionKeysGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exists[app]': opts['existsApp'],
        'fields[alternativeDistributionKeys]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionKeys'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlternativeDistributionKeysResponse;
      return this.apiClient.callApi(
        '/v1/alternativeDistributionKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alternativeDistributionKeysGetInstance operation.
     * @callback module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlternativeDistributionKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionKeys] the fields to include for returned resources of type alternativeDistributionKeys
     * @param {module:api/AlternativeDistributionKeysApi~alternativeDistributionKeysGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlternativeDistributionKeyResponse}
     */
    alternativeDistributionKeysGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling alternativeDistributionKeysGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[alternativeDistributionKeys]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionKeys'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlternativeDistributionKeyResponse;
      return this.apiClient.callApi(
        '/v1/alternativeDistributionKeys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
