/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ScmGitReferencesResponse from '../model/ScmGitReferencesResponse';
import ScmPullRequestsResponse from '../model/ScmPullRequestsResponse';
import ScmRepositoriesResponse from '../model/ScmRepositoriesResponse';
import ScmRepositoryGitReferencesLinkagesResponse from '../model/ScmRepositoryGitReferencesLinkagesResponse';
import ScmRepositoryPullRequestsLinkagesResponse from '../model/ScmRepositoryPullRequestsLinkagesResponse';
import ScmRepositoryResponse from '../model/ScmRepositoryResponse';

/**
* ScmRepositories service.
* @module api/ScmRepositoriesApi
* @version 4.1
*/
export default class ScmRepositoriesApi {

    /**
    * Constructs a new ScmRepositoriesApi. 
    * @alias module:api/ScmRepositoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scmRepositoriesGetCollection operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoriesResponse}
     */
    scmRepositoriesGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoriesResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmRepositoriesGetInstance operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoryResponse}
     */
    scmRepositoriesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmRepositoriesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoryResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmRepositoriesGitReferencesGetToManyRelated operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesGitReferencesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmGitReferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesGitReferencesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmGitReferencesResponse}
     */
    scmRepositoriesGitReferencesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmRepositoriesGitReferencesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmGitReferencesResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories/{id}/gitReferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmRepositoriesGitReferencesGetToManyRelationship operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesGitReferencesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoryGitReferencesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesGitReferencesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoryGitReferencesLinkagesResponse}
     */
    scmRepositoriesGitReferencesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmRepositoriesGitReferencesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoryGitReferencesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories/{id}/relationships/gitReferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmRepositoriesPullRequestsGetToManyRelated operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesPullRequestsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmPullRequestsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmPullRequests] the fields to include for returned resources of type scmPullRequests
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesPullRequestsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmPullRequestsResponse}
     */
    scmRepositoriesPullRequestsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmRepositoriesPullRequestsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[scmPullRequests]': this.apiClient.buildCollectionParam(opts['fieldsScmPullRequests'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmPullRequestsResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories/{id}/pullRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmRepositoriesPullRequestsGetToManyRelationship operation.
     * @callback module:api/ScmRepositoriesApi~scmRepositoriesPullRequestsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoryPullRequestsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ScmRepositoriesApi~scmRepositoriesPullRequestsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoryPullRequestsLinkagesResponse}
     */
    scmRepositoriesPullRequestsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmRepositoriesPullRequestsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoryPullRequestsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/scmRepositories/{id}/relationships/pullRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
