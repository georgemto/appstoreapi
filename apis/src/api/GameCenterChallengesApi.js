/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterChallengeCreateRequest from '../model/GameCenterChallengeCreateRequest';
import GameCenterChallengeLeaderboardLinkageRequest from '../model/GameCenterChallengeLeaderboardLinkageRequest';
import GameCenterChallengeResponse from '../model/GameCenterChallengeResponse';
import GameCenterChallengeUpdateRequest from '../model/GameCenterChallengeUpdateRequest';
import GameCenterChallengeVersionsLinkagesResponse from '../model/GameCenterChallengeVersionsLinkagesResponse';
import GameCenterChallengeVersionsResponse from '../model/GameCenterChallengeVersionsResponse';

/**
* GameCenterChallenges service.
* @module api/GameCenterChallengesApi
* @version 4.1
*/
export default class GameCenterChallengesApi {

    /**
    * Constructs a new GameCenterChallengesApi. 
    * @alias module:api/GameCenterChallengesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterChallengesCreateInstance operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterChallengeCreateRequest} gameCenterChallengeCreateRequest GameCenterChallenge representation
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeResponse}
     */
    gameCenterChallengesCreateInstance(gameCenterChallengeCreateRequest, callback) {
      let postBody = gameCenterChallengeCreateRequest;
      // verify the required parameter 'gameCenterChallengeCreateRequest' is set
      if (gameCenterChallengeCreateRequest === undefined || gameCenterChallengeCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterChallengeCreateRequest' when calling gameCenterChallengesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesDeleteInstance operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterChallengesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesGetInstance operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersions] the fields to include for returned resources of type gameCenterChallengeVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeResponse}
     */
    gameCenterChallengesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterChallengeVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesLeaderboardUpdateToOneRelationship operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesLeaderboardUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterChallengeLeaderboardLinkageRequest} gameCenterChallengeLeaderboardLinkageRequest Related linkage
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesLeaderboardUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterChallengesLeaderboardUpdateToOneRelationship(id, gameCenterChallengeLeaderboardLinkageRequest, callback) {
      let postBody = gameCenterChallengeLeaderboardLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesLeaderboardUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterChallengeLeaderboardLinkageRequest' is set
      if (gameCenterChallengeLeaderboardLinkageRequest === undefined || gameCenterChallengeLeaderboardLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterChallengeLeaderboardLinkageRequest' when calling gameCenterChallengesLeaderboardUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}/relationships/leaderboard', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesUpdateInstance operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterChallengeUpdateRequest} gameCenterChallengeUpdateRequest GameCenterChallenge representation
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeResponse}
     */
    gameCenterChallengesUpdateInstance(id, gameCenterChallengeUpdateRequest, callback) {
      let postBody = gameCenterChallengeUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesUpdateInstance");
      }
      // verify the required parameter 'gameCenterChallengeUpdateRequest' is set
      if (gameCenterChallengeUpdateRequest === undefined || gameCenterChallengeUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterChallengeUpdateRequest' when calling gameCenterChallengesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesVersionsGetToManyRelated operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersions] the fields to include for returned resources of type gameCenterChallengeVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeLocalizations] the fields to include for returned resources of type gameCenterChallengeLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersionReleases] the fields to include for returned resources of type gameCenterChallengeVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeImages] the fields to include for returned resources of type gameCenterChallengeImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeVersionsResponse}
     */
    gameCenterChallengesVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterChallengeVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersions'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterChallengeLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeLocalizations'], 'csv'),
        'fields[gameCenterChallengeVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersionReleases'], 'csv'),
        'fields[gameCenterChallengeImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeVersionsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengesVersionsGetToManyRelationship operation.
     * @callback module:api/GameCenterChallengesApi~gameCenterChallengesVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterChallengesApi~gameCenterChallengesVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeVersionsLinkagesResponse}
     */
    gameCenterChallengesVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengesVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallenges/{id}/relationships/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
