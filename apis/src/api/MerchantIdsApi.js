/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificatesResponse from '../model/CertificatesResponse';
import ErrorResponse from '../model/ErrorResponse';
import MerchantIdCertificatesLinkagesResponse from '../model/MerchantIdCertificatesLinkagesResponse';
import MerchantIdCreateRequest from '../model/MerchantIdCreateRequest';
import MerchantIdResponse from '../model/MerchantIdResponse';
import MerchantIdUpdateRequest from '../model/MerchantIdUpdateRequest';
import MerchantIdsResponse from '../model/MerchantIdsResponse';

/**
* MerchantIds service.
* @module api/MerchantIdsApi
* @version 4.1
*/
export default class MerchantIdsApi {

    /**
    * Constructs a new MerchantIdsApi. 
    * @alias module:api/MerchantIdsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the merchantIdsCertificatesGetToManyRelated operation.
     * @callback module:api/MerchantIdsApi~merchantIdsCertificatesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterDisplayName] filter by attribute 'displayName'
     * @param {Array.<module:model/String>} [filterCertificateType] filter by attribute 'certificateType'
     * @param {Array.<String>} [filterSerialNumber] filter by attribute 'serialNumber'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Array.<module:model/String>} [fieldsPassTypeIds] the fields to include for returned resources of type passTypeIds
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/MerchantIdsApi~merchantIdsCertificatesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificatesResponse}
     */
    merchantIdsCertificatesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merchantIdsCertificatesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[displayName]': this.apiClient.buildCollectionParam(opts['filterDisplayName'], 'csv'),
        'filter[certificateType]': this.apiClient.buildCollectionParam(opts['filterCertificateType'], 'csv'),
        'filter[serialNumber]': this.apiClient.buildCollectionParam(opts['filterSerialNumber'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'fields[passTypeIds]': this.apiClient.buildCollectionParam(opts['fieldsPassTypeIds'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificatesResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds/{id}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsCertificatesGetToManyRelationship operation.
     * @callback module:api/MerchantIdsApi~merchantIdsCertificatesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantIdCertificatesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/MerchantIdsApi~merchantIdsCertificatesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantIdCertificatesLinkagesResponse}
     */
    merchantIdsCertificatesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merchantIdsCertificatesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantIdCertificatesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds/{id}/relationships/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsCreateInstance operation.
     * @callback module:api/MerchantIdsApi~merchantIdsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MerchantIdCreateRequest} merchantIdCreateRequest MerchantId representation
     * @param {module:api/MerchantIdsApi~merchantIdsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantIdResponse}
     */
    merchantIdsCreateInstance(merchantIdCreateRequest, callback) {
      let postBody = merchantIdCreateRequest;
      // verify the required parameter 'merchantIdCreateRequest' is set
      if (merchantIdCreateRequest === undefined || merchantIdCreateRequest === null) {
        throw new Error("Missing the required parameter 'merchantIdCreateRequest' when calling merchantIdsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantIdResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsDeleteInstance operation.
     * @callback module:api/MerchantIdsApi~merchantIdsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/MerchantIdsApi~merchantIdsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    merchantIdsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merchantIdsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/merchantIds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsGetCollection operation.
     * @callback module:api/MerchantIdsApi~merchantIdsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantIdsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<String>} [filterIdentifier] filter by attribute 'identifier'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsMerchantIds] the fields to include for returned resources of type merchantIds
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCertificates] maximum number of related certificates returned (when they are included)
     * @param {module:api/MerchantIdsApi~merchantIdsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantIdsResponse}
     */
    merchantIdsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[identifier]': this.apiClient.buildCollectionParam(opts['filterIdentifier'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[merchantIds]': this.apiClient.buildCollectionParam(opts['fieldsMerchantIds'], 'csv'),
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[certificates]': opts['limitCertificates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantIdsResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsGetInstance operation.
     * @callback module:api/MerchantIdsApi~merchantIdsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsMerchantIds] the fields to include for returned resources of type merchantIds
     * @param {Array.<module:model/String>} [fieldsCertificates] the fields to include for returned resources of type certificates
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCertificates] maximum number of related certificates returned (when they are included)
     * @param {module:api/MerchantIdsApi~merchantIdsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantIdResponse}
     */
    merchantIdsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merchantIdsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[merchantIds]': this.apiClient.buildCollectionParam(opts['fieldsMerchantIds'], 'csv'),
        'fields[certificates]': this.apiClient.buildCollectionParam(opts['fieldsCertificates'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[certificates]': opts['limitCertificates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantIdResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merchantIdsUpdateInstance operation.
     * @callback module:api/MerchantIdsApi~merchantIdsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/MerchantIdUpdateRequest} merchantIdUpdateRequest MerchantId representation
     * @param {module:api/MerchantIdsApi~merchantIdsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantIdResponse}
     */
    merchantIdsUpdateInstance(id, merchantIdUpdateRequest, callback) {
      let postBody = merchantIdUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merchantIdsUpdateInstance");
      }
      // verify the required parameter 'merchantIdUpdateRequest' is set
      if (merchantIdUpdateRequest === undefined || merchantIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'merchantIdUpdateRequest' when calling merchantIdsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantIdResponse;
      return this.apiClient.callApi(
        '/v1/merchantIds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
