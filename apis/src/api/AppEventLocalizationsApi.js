/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEventLocalizationAppEventScreenshotsLinkagesResponse from '../model/AppEventLocalizationAppEventScreenshotsLinkagesResponse';
import AppEventLocalizationAppEventVideoClipsLinkagesResponse from '../model/AppEventLocalizationAppEventVideoClipsLinkagesResponse';
import AppEventLocalizationCreateRequest from '../model/AppEventLocalizationCreateRequest';
import AppEventLocalizationResponse from '../model/AppEventLocalizationResponse';
import AppEventLocalizationUpdateRequest from '../model/AppEventLocalizationUpdateRequest';
import AppEventScreenshotsResponse from '../model/AppEventScreenshotsResponse';
import AppEventVideoClipsResponse from '../model/AppEventVideoClipsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppEventLocalizations service.
* @module api/AppEventLocalizationsApi
* @version 4.1
*/
export default class AppEventLocalizationsApi {

    /**
    * Constructs a new AppEventLocalizationsApi. 
    * @alias module:api/AppEventLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appEventLocalizationsAppEventScreenshotsGetToManyRelated operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventScreenshotsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEventScreenshots] the fields to include for returned resources of type appEventScreenshots
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventScreenshotsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventScreenshotsResponse}
     */
    appEventLocalizationsAppEventScreenshotsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsAppEventScreenshotsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEventScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppEventScreenshots'], 'csv'),
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventScreenshotsResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}/appEventScreenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsAppEventScreenshotsGetToManyRelationship operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventScreenshotsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationAppEventScreenshotsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventScreenshotsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationAppEventScreenshotsLinkagesResponse}
     */
    appEventLocalizationsAppEventScreenshotsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsAppEventScreenshotsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationAppEventScreenshotsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}/relationships/appEventScreenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsAppEventVideoClipsGetToManyRelated operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventVideoClipsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventVideoClipsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEventVideoClips] the fields to include for returned resources of type appEventVideoClips
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventVideoClipsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventVideoClipsResponse}
     */
    appEventLocalizationsAppEventVideoClipsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsAppEventVideoClipsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEventVideoClips]': this.apiClient.buildCollectionParam(opts['fieldsAppEventVideoClips'], 'csv'),
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventVideoClipsResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}/appEventVideoClips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsAppEventVideoClipsGetToManyRelationship operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventVideoClipsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationAppEventVideoClipsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsAppEventVideoClipsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationAppEventVideoClipsLinkagesResponse}
     */
    appEventLocalizationsAppEventVideoClipsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsAppEventVideoClipsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationAppEventVideoClipsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}/relationships/appEventVideoClips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsCreateInstance operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppEventLocalizationCreateRequest} appEventLocalizationCreateRequest AppEventLocalization representation
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationResponse}
     */
    appEventLocalizationsCreateInstance(appEventLocalizationCreateRequest, callback) {
      let postBody = appEventLocalizationCreateRequest;
      // verify the required parameter 'appEventLocalizationCreateRequest' is set
      if (appEventLocalizationCreateRequest === undefined || appEventLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'appEventLocalizationCreateRequest' when calling appEventLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsDeleteInstance operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appEventLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsGetInstance operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Array.<module:model/String>} [fieldsAppEventScreenshots] the fields to include for returned resources of type appEventScreenshots
     * @param {Array.<module:model/String>} [fieldsAppEventVideoClips] the fields to include for returned resources of type appEventVideoClips
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppEventScreenshots] maximum number of related appEventScreenshots returned (when they are included)
     * @param {Number} [limitAppEventVideoClips] maximum number of related appEventVideoClips returned (when they are included)
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationResponse}
     */
    appEventLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'fields[appEventScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppEventScreenshots'], 'csv'),
        'fields[appEventVideoClips]': this.apiClient.buildCollectionParam(opts['fieldsAppEventVideoClips'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appEventScreenshots]': opts['limitAppEventScreenshots'],
        'limit[appEventVideoClips]': opts['limitAppEventVideoClips']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventLocalizationsUpdateInstance operation.
     * @callback module:api/AppEventLocalizationsApi~appEventLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppEventLocalizationUpdateRequest} appEventLocalizationUpdateRequest AppEventLocalization representation
     * @param {module:api/AppEventLocalizationsApi~appEventLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationResponse}
     */
    appEventLocalizationsUpdateInstance(id, appEventLocalizationUpdateRequest, callback) {
      let postBody = appEventLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventLocalizationsUpdateInstance");
      }
      // verify the required parameter 'appEventLocalizationUpdateRequest' is set
      if (appEventLocalizationUpdateRequest === undefined || appEventLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appEventLocalizationUpdateRequest' when calling appEventLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appEventLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
