/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ReviewSubmissionCreateRequest from '../model/ReviewSubmissionCreateRequest';
import ReviewSubmissionItemsLinkagesResponse from '../model/ReviewSubmissionItemsLinkagesResponse';
import ReviewSubmissionItemsResponse from '../model/ReviewSubmissionItemsResponse';
import ReviewSubmissionResponse from '../model/ReviewSubmissionResponse';
import ReviewSubmissionUpdateRequest from '../model/ReviewSubmissionUpdateRequest';
import ReviewSubmissionsResponse from '../model/ReviewSubmissionsResponse';

/**
* ReviewSubmissions service.
* @module api/ReviewSubmissionsApi
* @version 4.1
*/
export default class ReviewSubmissionsApi {

    /**
    * Constructs a new ReviewSubmissionsApi. 
    * @alias module:api/ReviewSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reviewSubmissionsCreateInstance operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ReviewSubmissionCreateRequest} reviewSubmissionCreateRequest ReviewSubmission representation
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionResponse}
     */
    reviewSubmissionsCreateInstance(reviewSubmissionCreateRequest, callback) {
      let postBody = reviewSubmissionCreateRequest;
      // verify the required parameter 'reviewSubmissionCreateRequest' is set
      if (reviewSubmissionCreateRequest === undefined || reviewSubmissionCreateRequest === null) {
        throw new Error("Missing the required parameter 'reviewSubmissionCreateRequest' when calling reviewSubmissionsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewSubmissionsGetCollection operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} filterApp filter by id(s) of related 'app'
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsReviewSubmissionItems] the fields to include for returned resources of type reviewSubmissionItems
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitItems] maximum number of related items returned (when they are included)
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionsResponse}
     */
    reviewSubmissionsGetCollection(filterApp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterApp' is set
      if (filterApp === undefined || filterApp === null) {
        throw new Error("Missing the required parameter 'filterApp' when calling reviewSubmissionsGetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(filterApp, 'csv'),
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[reviewSubmissionItems]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissionItems'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[items]': opts['limitItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionsResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewSubmissionsGetInstance operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsReviewSubmissionItems] the fields to include for returned resources of type reviewSubmissionItems
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitItems] maximum number of related items returned (when they are included)
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionResponse}
     */
    reviewSubmissionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewSubmissionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[reviewSubmissionItems]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissionItems'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[items]': opts['limitItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewSubmissionsItemsGetToManyRelated operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsItemsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsReviewSubmissionItems] the fields to include for returned resources of type reviewSubmissionItems
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPageVersions] the fields to include for returned resources of type appCustomProductPageVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersions] the fields to include for returned resources of type backgroundAssetVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsItemsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionItemsResponse}
     */
    reviewSubmissionsItemsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewSubmissionsItemsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[reviewSubmissionItems]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissionItems'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appCustomProductPageVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPageVersions'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[backgroundAssetVersions]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionItemsResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewSubmissionsItemsGetToManyRelationship operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsItemsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionItemsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsItemsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionItemsLinkagesResponse}
     */
    reviewSubmissionsItemsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewSubmissionsItemsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionItemsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions/{id}/relationships/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewSubmissionsUpdateInstance operation.
     * @callback module:api/ReviewSubmissionsApi~reviewSubmissionsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/ReviewSubmissionUpdateRequest} reviewSubmissionUpdateRequest ReviewSubmission representation
     * @param {module:api/ReviewSubmissionsApi~reviewSubmissionsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionResponse}
     */
    reviewSubmissionsUpdateInstance(id, reviewSubmissionUpdateRequest, callback) {
      let postBody = reviewSubmissionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewSubmissionsUpdateInstance");
      }
      // verify the required parameter 'reviewSubmissionUpdateRequest' is set
      if (reviewSubmissionUpdateRequest === undefined || reviewSubmissionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'reviewSubmissionUpdateRequest' when calling reviewSubmissionsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/reviewSubmissions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
