/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppStoreVersionExperimentAppStoreVersionExperimentTreatmentsLinkagesResponse from '../model/AppStoreVersionExperimentAppStoreVersionExperimentTreatmentsLinkagesResponse';
import AppStoreVersionExperimentCreateRequest from '../model/AppStoreVersionExperimentCreateRequest';
import AppStoreVersionExperimentResponse from '../model/AppStoreVersionExperimentResponse';
import AppStoreVersionExperimentTreatmentsResponse from '../model/AppStoreVersionExperimentTreatmentsResponse';
import AppStoreVersionExperimentUpdateRequest from '../model/AppStoreVersionExperimentUpdateRequest';
import AppStoreVersionExperimentV2AppStoreVersionExperimentTreatmentsLinkagesResponse from '../model/AppStoreVersionExperimentV2AppStoreVersionExperimentTreatmentsLinkagesResponse';
import AppStoreVersionExperimentV2CreateRequest from '../model/AppStoreVersionExperimentV2CreateRequest';
import AppStoreVersionExperimentV2Response from '../model/AppStoreVersionExperimentV2Response';
import AppStoreVersionExperimentV2UpdateRequest from '../model/AppStoreVersionExperimentV2UpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppStoreVersionExperiments service.
* @module api/AppStoreVersionExperimentsApi
* @version 4.1
*/
export default class AppStoreVersionExperimentsApi {

    /**
    * Constructs a new AppStoreVersionExperimentsApi. 
    * @alias module:api/AppStoreVersionExperimentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatmentLocalizations] the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatmentLocalizations] maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentsResponse}
     */
    appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appStoreVersionExperimentTreatmentLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatmentLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatmentLocalizations]': opts['limitAppStoreVersionExperimentTreatmentLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentAppStoreVersionExperimentTreatmentsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentAppStoreVersionExperimentTreatmentsLinkagesResponse}
     */
    appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentAppStoreVersionExperimentTreatmentsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments/{id}/relationships/appStoreVersionExperimentTreatments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsCreateInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppStoreVersionExperimentCreateRequest} appStoreVersionExperimentCreateRequest AppStoreVersionExperiment representation
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentResponse}
     */
    appStoreVersionExperimentsCreateInstance(appStoreVersionExperimentCreateRequest, callback) {
      let postBody = appStoreVersionExperimentCreateRequest;
      // verify the required parameter 'appStoreVersionExperimentCreateRequest' is set
      if (appStoreVersionExperimentCreateRequest === undefined || appStoreVersionExperimentCreateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentCreateRequest' when calling appStoreVersionExperimentsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsDeleteInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionExperimentsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsGetInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatments] maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentResponse}
     */
    appStoreVersionExperimentsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatments]': opts['limitAppStoreVersionExperimentTreatments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsUpdateInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionExperimentUpdateRequest} appStoreVersionExperimentUpdateRequest AppStoreVersionExperiment representation
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentResponse}
     */
    appStoreVersionExperimentsUpdateInstance(id, appStoreVersionExperimentUpdateRequest, callback) {
      let postBody = appStoreVersionExperimentUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsUpdateInstance");
      }
      // verify the required parameter 'appStoreVersionExperimentUpdateRequest' is set
      if (appStoreVersionExperimentUpdateRequest === undefined || appStoreVersionExperimentUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentUpdateRequest' when calling appStoreVersionExperimentsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperiments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatmentLocalizations] the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatmentLocalizations] maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentsResponse}
     */
    appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appStoreVersionExperimentTreatmentLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatmentLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatmentLocalizations]': opts['limitAppStoreVersionExperimentTreatmentLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentsResponse;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentV2AppStoreVersionExperimentTreatmentsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentV2AppStoreVersionExperimentTreatmentsLinkagesResponse}
     */
    appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentV2AppStoreVersionExperimentTreatmentsLinkagesResponse;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments/{id}/relationships/appStoreVersionExperimentTreatments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2CreateInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2CreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppStoreVersionExperimentV2CreateRequest} appStoreVersionExperimentV2CreateRequest AppStoreVersionExperiment representation
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2CreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentV2Response}
     */
    appStoreVersionExperimentsV2CreateInstance(appStoreVersionExperimentV2CreateRequest, callback) {
      let postBody = appStoreVersionExperimentV2CreateRequest;
      // verify the required parameter 'appStoreVersionExperimentV2CreateRequest' is set
      if (appStoreVersionExperimentV2CreateRequest === undefined || appStoreVersionExperimentV2CreateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentV2CreateRequest' when calling appStoreVersionExperimentsV2CreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentV2Response;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2DeleteInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2DeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2DeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionExperimentsV2DeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsV2DeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2GetInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2GetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatments] maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
     * @param {Number} [limitControlVersions] maximum number of related controlVersions returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2GetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentV2Response}
     */
    appStoreVersionExperimentsV2GetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsV2GetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatments]': opts['limitAppStoreVersionExperimentTreatments'],
        'limit[controlVersions]': opts['limitControlVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentV2Response;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentsV2UpdateInstance operation.
     * @callback module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2UpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionExperimentV2UpdateRequest} appStoreVersionExperimentV2UpdateRequest AppStoreVersionExperiment representation
     * @param {module:api/AppStoreVersionExperimentsApi~appStoreVersionExperimentsV2UpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentV2Response}
     */
    appStoreVersionExperimentsV2UpdateInstance(id, appStoreVersionExperimentV2UpdateRequest, callback) {
      let postBody = appStoreVersionExperimentV2UpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentsV2UpdateInstance");
      }
      // verify the required parameter 'appStoreVersionExperimentV2UpdateRequest' is set
      if (appStoreVersionExperimentV2UpdateRequest === undefined || appStoreVersionExperimentV2UpdateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentV2UpdateRequest' when calling appStoreVersionExperimentsV2UpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentV2Response;
      return this.apiClient.callApi(
        '/v2/appStoreVersionExperiments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
