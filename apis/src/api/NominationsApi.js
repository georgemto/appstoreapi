/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import NominationCreateRequest from '../model/NominationCreateRequest';
import NominationResponse from '../model/NominationResponse';
import NominationUpdateRequest from '../model/NominationUpdateRequest';
import NominationsResponse from '../model/NominationsResponse';

/**
* Nominations service.
* @module api/NominationsApi
* @version 4.1
*/
export default class NominationsApi {

    /**
    * Constructs a new NominationsApi. 
    * @alias module:api/NominationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the nominationsCreateInstance operation.
     * @callback module:api/NominationsApi~nominationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NominationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/NominationCreateRequest} nominationCreateRequest Nomination representation
     * @param {module:api/NominationsApi~nominationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NominationResponse}
     */
    nominationsCreateInstance(nominationCreateRequest, callback) {
      let postBody = nominationCreateRequest;
      // verify the required parameter 'nominationCreateRequest' is set
      if (nominationCreateRequest === undefined || nominationCreateRequest === null) {
        throw new Error("Missing the required parameter 'nominationCreateRequest' when calling nominationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NominationResponse;
      return this.apiClient.callApi(
        '/v1/nominations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nominationsDeleteInstance operation.
     * @callback module:api/NominationsApi~nominationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/NominationsApi~nominationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nominationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling nominationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/nominations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nominationsGetCollection operation.
     * @callback module:api/NominationsApi~nominationsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NominationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<module:model/String>} filterState filter by attribute 'state'
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterType] filter by attribute 'type'
     * @param {Array.<String>} [filterRelatedApps] filter by id(s) of related 'relatedApps'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsNominations] the fields to include for returned resources of type nominations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitInAppEvents] maximum number of related inAppEvents returned (when they are included)
     * @param {Number} [limitRelatedApps] maximum number of related relatedApps returned (when they are included)
     * @param {Number} [limitSupportedTerritories] maximum number of related supportedTerritories returned (when they are included)
     * @param {module:api/NominationsApi~nominationsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NominationsResponse}
     */
    nominationsGetCollection(filterState, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterState' is set
      if (filterState === undefined || filterState === null) {
        throw new Error("Missing the required parameter 'filterState' when calling nominationsGetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter[type]': this.apiClient.buildCollectionParam(opts['filterType'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(filterState, 'csv'),
        'filter[relatedApps]': this.apiClient.buildCollectionParam(opts['filterRelatedApps'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[nominations]': this.apiClient.buildCollectionParam(opts['fieldsNominations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[inAppEvents]': opts['limitInAppEvents'],
        'limit[relatedApps]': opts['limitRelatedApps'],
        'limit[supportedTerritories]': opts['limitSupportedTerritories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = NominationsResponse;
      return this.apiClient.callApi(
        '/v1/nominations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nominationsGetInstance operation.
     * @callback module:api/NominationsApi~nominationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NominationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsNominations] the fields to include for returned resources of type nominations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitInAppEvents] maximum number of related inAppEvents returned (when they are included)
     * @param {Number} [limitRelatedApps] maximum number of related relatedApps returned (when they are included)
     * @param {Number} [limitSupportedTerritories] maximum number of related supportedTerritories returned (when they are included)
     * @param {module:api/NominationsApi~nominationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NominationResponse}
     */
    nominationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling nominationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[nominations]': this.apiClient.buildCollectionParam(opts['fieldsNominations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[inAppEvents]': opts['limitInAppEvents'],
        'limit[relatedApps]': opts['limitRelatedApps'],
        'limit[supportedTerritories]': opts['limitSupportedTerritories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NominationResponse;
      return this.apiClient.callApi(
        '/v1/nominations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nominationsUpdateInstance operation.
     * @callback module:api/NominationsApi~nominationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NominationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/NominationUpdateRequest} nominationUpdateRequest Nomination representation
     * @param {module:api/NominationsApi~nominationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NominationResponse}
     */
    nominationsUpdateInstance(id, nominationUpdateRequest, callback) {
      let postBody = nominationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling nominationsUpdateInstance");
      }
      // verify the required parameter 'nominationUpdateRequest' is set
      if (nominationUpdateRequest === undefined || nominationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'nominationUpdateRequest' when calling nominationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NominationResponse;
      return this.apiClient.callApi(
        '/v1/nominations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
