/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterLeaderboardSetCreateRequest from '../model/GameCenterLeaderboardSetCreateRequest';
import GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest from '../model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest';
import GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse from '../model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse';
import GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest from '../model/GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest';
import GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse from '../model/GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse';
import GameCenterLeaderboardSetLocalizationsLinkagesResponse from '../model/GameCenterLeaderboardSetLocalizationsLinkagesResponse';
import GameCenterLeaderboardSetLocalizationsResponse from '../model/GameCenterLeaderboardSetLocalizationsResponse';
import GameCenterLeaderboardSetReleasesLinkagesResponse from '../model/GameCenterLeaderboardSetReleasesLinkagesResponse';
import GameCenterLeaderboardSetReleasesResponse from '../model/GameCenterLeaderboardSetReleasesResponse';
import GameCenterLeaderboardSetResponse from '../model/GameCenterLeaderboardSetResponse';
import GameCenterLeaderboardSetUpdateRequest from '../model/GameCenterLeaderboardSetUpdateRequest';
import GameCenterLeaderboardsResponse from '../model/GameCenterLeaderboardsResponse';

/**
* GameCenterLeaderboardSets service.
* @module api/GameCenterLeaderboardSetsApi
* @version 4.1
*/
export default class GameCenterLeaderboardSetsApi {

    /**
    * Constructs a new GameCenterLeaderboardSetsApi. 
    * @alias module:api/GameCenterLeaderboardSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsCreateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterLeaderboardSetCreateRequest} gameCenterLeaderboardSetCreateRequest GameCenterLeaderboardSet representation
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetResponse}
     */
    gameCenterLeaderboardSetsCreateInstance(gameCenterLeaderboardSetCreateRequest, callback) {
      let postBody = gameCenterLeaderboardSetCreateRequest;
      // verify the required parameter 'gameCenterLeaderboardSetCreateRequest' is set
      if (gameCenterLeaderboardSetCreateRequest === undefined || gameCenterLeaderboardSetCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetCreateRequest' when calling gameCenterLeaderboardSetsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsDeleteInstance operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest} gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
      if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined || gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest} gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
      if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined || gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardsResponse}
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse}
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest} gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
      if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined || gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGetInstance operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetResponse}
     */
    gameCenterLeaderboardSetsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetResponse}
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse}
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest} gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest Related linkage
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(id, gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, callback) {
      let postBody = gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' is set
      if (gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === undefined || gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsLocalizationsGetToManyRelated operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetImages] the fields to include for returned resources of type gameCenterLeaderboardSetImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationsResponse}
     */
    gameCenterLeaderboardSetsLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardSetImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsLocalizationsGetToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationsLinkagesResponse}
     */
    gameCenterLeaderboardSetsLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterDetail] filter by id(s) of related 'gameCenterDetail'
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetReleasesResponse}
     */
    gameCenterLeaderboardSetsReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterDetail]': this.apiClient.buildCollectionParam(opts['filterGameCenterDetail'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetReleasesLinkagesResponse}
     */
    gameCenterLeaderboardSetsReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}/relationships/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetsUpdateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetUpdateRequest} gameCenterLeaderboardSetUpdateRequest GameCenterLeaderboardSet representation
     * @param {module:api/GameCenterLeaderboardSetsApi~gameCenterLeaderboardSetsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetResponse}
     */
    gameCenterLeaderboardSetsUpdateInstance(id, gameCenterLeaderboardSetUpdateRequest, callback) {
      let postBody = gameCenterLeaderboardSetUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetsUpdateInstance");
      }
      // verify the required parameter 'gameCenterLeaderboardSetUpdateRequest' is set
      if (gameCenterLeaderboardSetUpdateRequest === undefined || gameCenterLeaderboardSetUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetUpdateRequest' when calling gameCenterLeaderboardSetsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSets/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
