/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppStoreVersionExperimentTreatmentAppStoreVersionExperimentTreatmentLocalizationsLinkagesResponse from '../model/AppStoreVersionExperimentTreatmentAppStoreVersionExperimentTreatmentLocalizationsLinkagesResponse';
import AppStoreVersionExperimentTreatmentCreateRequest from '../model/AppStoreVersionExperimentTreatmentCreateRequest';
import AppStoreVersionExperimentTreatmentLocalizationsResponse from '../model/AppStoreVersionExperimentTreatmentLocalizationsResponse';
import AppStoreVersionExperimentTreatmentResponse from '../model/AppStoreVersionExperimentTreatmentResponse';
import AppStoreVersionExperimentTreatmentUpdateRequest from '../model/AppStoreVersionExperimentTreatmentUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppStoreVersionExperimentTreatments service.
* @module api/AppStoreVersionExperimentTreatmentsApi
* @version 4.1
*/
export default class AppStoreVersionExperimentTreatmentsApi {

    /**
    * Constructs a new AppStoreVersionExperimentTreatmentsApi. 
    * @alias module:api/AppStoreVersionExperimentTreatmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLocale] filter by attribute 'locale'
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatmentLocalizations] the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [fieldsAppScreenshotSets] the fields to include for returned resources of type appScreenshotSets
     * @param {Array.<module:model/String>} [fieldsAppPreviewSets] the fields to include for returned resources of type appPreviewSets
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppScreenshotSets] maximum number of related appScreenshotSets returned (when they are included)
     * @param {Number} [limitAppPreviewSets] maximum number of related appPreviewSets returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentLocalizationsResponse}
     */
    appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'fields[appStoreVersionExperimentTreatmentLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatmentLocalizations'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'fields[appScreenshotSets]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshotSets'], 'csv'),
        'fields[appPreviewSets]': this.apiClient.buildCollectionParam(opts['fieldsAppPreviewSets'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appScreenshotSets]': opts['limitAppScreenshotSets'],
        'limit[appPreviewSets]': opts['limitAppPreviewSets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentAppStoreVersionExperimentTreatmentLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentAppStoreVersionExperimentTreatmentLocalizationsLinkagesResponse}
     */
    appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentAppStoreVersionExperimentTreatmentLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments/{id}/relationships/appStoreVersionExperimentTreatmentLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsCreateInstance operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppStoreVersionExperimentTreatmentCreateRequest} appStoreVersionExperimentTreatmentCreateRequest AppStoreVersionExperimentTreatment representation
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentResponse}
     */
    appStoreVersionExperimentTreatmentsCreateInstance(appStoreVersionExperimentTreatmentCreateRequest, callback) {
      let postBody = appStoreVersionExperimentTreatmentCreateRequest;
      // verify the required parameter 'appStoreVersionExperimentTreatmentCreateRequest' is set
      if (appStoreVersionExperimentTreatmentCreateRequest === undefined || appStoreVersionExperimentTreatmentCreateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentTreatmentCreateRequest' when calling appStoreVersionExperimentTreatmentsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsDeleteInstance operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionExperimentTreatmentsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentTreatmentsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsGetInstance operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatmentLocalizations] the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatmentLocalizations] maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentResponse}
     */
    appStoreVersionExperimentTreatmentsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentTreatmentsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'fields[appStoreVersionExperimentTreatmentLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatmentLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatmentLocalizations]': opts['limitAppStoreVersionExperimentTreatmentLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionExperimentTreatmentsUpdateInstance operation.
     * @callback module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentTreatmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionExperimentTreatmentUpdateRequest} appStoreVersionExperimentTreatmentUpdateRequest AppStoreVersionExperimentTreatment representation
     * @param {module:api/AppStoreVersionExperimentTreatmentsApi~appStoreVersionExperimentTreatmentsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentTreatmentResponse}
     */
    appStoreVersionExperimentTreatmentsUpdateInstance(id, appStoreVersionExperimentTreatmentUpdateRequest, callback) {
      let postBody = appStoreVersionExperimentTreatmentUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionExperimentTreatmentsUpdateInstance");
      }
      // verify the required parameter 'appStoreVersionExperimentTreatmentUpdateRequest' is set
      if (appStoreVersionExperimentTreatmentUpdateRequest === undefined || appStoreVersionExperimentTreatmentUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionExperimentTreatmentUpdateRequest' when calling appStoreVersionExperimentTreatmentsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentTreatmentResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersionExperimentTreatments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
