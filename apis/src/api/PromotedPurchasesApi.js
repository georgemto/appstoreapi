/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PromotedPurchaseCreateRequest from '../model/PromotedPurchaseCreateRequest';
import PromotedPurchaseResponse from '../model/PromotedPurchaseResponse';
import PromotedPurchaseUpdateRequest from '../model/PromotedPurchaseUpdateRequest';

/**
* PromotedPurchases service.
* @module api/PromotedPurchasesApi
* @version 4.1
*/
export default class PromotedPurchasesApi {

    /**
    * Constructs a new PromotedPurchasesApi. 
    * @alias module:api/PromotedPurchasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the promotedPurchasesCreateInstance operation.
     * @callback module:api/PromotedPurchasesApi~promotedPurchasesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedPurchaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PromotedPurchaseCreateRequest} promotedPurchaseCreateRequest PromotedPurchase representation
     * @param {module:api/PromotedPurchasesApi~promotedPurchasesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedPurchaseResponse}
     */
    promotedPurchasesCreateInstance(promotedPurchaseCreateRequest, callback) {
      let postBody = promotedPurchaseCreateRequest;
      // verify the required parameter 'promotedPurchaseCreateRequest' is set
      if (promotedPurchaseCreateRequest === undefined || promotedPurchaseCreateRequest === null) {
        throw new Error("Missing the required parameter 'promotedPurchaseCreateRequest' when calling promotedPurchasesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PromotedPurchaseResponse;
      return this.apiClient.callApi(
        '/v1/promotedPurchases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promotedPurchasesDeleteInstance operation.
     * @callback module:api/PromotedPurchasesApi~promotedPurchasesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/PromotedPurchasesApi~promotedPurchasesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    promotedPurchasesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling promotedPurchasesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/promotedPurchases/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promotedPurchasesGetInstance operation.
     * @callback module:api/PromotedPurchasesApi~promotedPurchasesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedPurchaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/PromotedPurchasesApi~promotedPurchasesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedPurchaseResponse}
     */
    promotedPurchasesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling promotedPurchasesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromotedPurchaseResponse;
      return this.apiClient.callApi(
        '/v1/promotedPurchases/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promotedPurchasesUpdateInstance operation.
     * @callback module:api/PromotedPurchasesApi~promotedPurchasesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedPurchaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/PromotedPurchaseUpdateRequest} promotedPurchaseUpdateRequest PromotedPurchase representation
     * @param {module:api/PromotedPurchasesApi~promotedPurchasesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedPurchaseResponse}
     */
    promotedPurchasesUpdateInstance(id, promotedPurchaseUpdateRequest, callback) {
      let postBody = promotedPurchaseUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling promotedPurchasesUpdateInstance");
      }
      // verify the required parameter 'promotedPurchaseUpdateRequest' is set
      if (promotedPurchaseUpdateRequest === undefined || promotedPurchaseUpdateRequest === null) {
        throw new Error("Missing the required parameter 'promotedPurchaseUpdateRequest' when calling promotedPurchasesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PromotedPurchaseResponse;
      return this.apiClient.callApi(
        '/v1/promotedPurchases/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
