/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ScmProviderRepositoriesLinkagesResponse from '../model/ScmProviderRepositoriesLinkagesResponse';
import ScmProviderResponse from '../model/ScmProviderResponse';
import ScmProvidersResponse from '../model/ScmProvidersResponse';
import ScmRepositoriesResponse from '../model/ScmRepositoriesResponse';

/**
* ScmProviders service.
* @module api/ScmProvidersApi
* @version 4.1
*/
export default class ScmProvidersApi {

    /**
    * Constructs a new ScmProvidersApi. 
    * @alias module:api/ScmProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scmProvidersGetCollection operation.
     * @callback module:api/ScmProvidersApi~scmProvidersGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ScmProvidersApi~scmProvidersGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmProvidersResponse}
     */
    scmProvidersGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmProvidersResponse;
      return this.apiClient.callApi(
        '/v1/scmProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmProvidersGetInstance operation.
     * @callback module:api/ScmProvidersApi~scmProvidersGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {module:api/ScmProvidersApi~scmProvidersGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmProviderResponse}
     */
    scmProvidersGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmProvidersGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmProviderResponse;
      return this.apiClient.callApi(
        '/v1/scmProviders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmProvidersRepositoriesGetToManyRelated operation.
     * @callback module:api/ScmProvidersApi~scmProvidersRepositoriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/ScmProvidersApi~scmProvidersRepositoriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoriesResponse}
     */
    scmProvidersRepositoriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmProvidersRepositoriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoriesResponse;
      return this.apiClient.callApi(
        '/v1/scmProviders/{id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scmProvidersRepositoriesGetToManyRelationship operation.
     * @callback module:api/ScmProvidersApi~scmProvidersRepositoriesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmProviderRepositoriesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/ScmProvidersApi~scmProvidersRepositoriesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmProviderRepositoriesLinkagesResponse}
     */
    scmProvidersRepositoriesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scmProvidersRepositoriesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmProviderRepositoriesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/scmProviders/{id}/relationships/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
