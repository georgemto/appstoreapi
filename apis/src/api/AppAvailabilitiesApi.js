/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppAvailabilityV2CreateRequest from '../model/AppAvailabilityV2CreateRequest';
import AppAvailabilityV2Response from '../model/AppAvailabilityV2Response';
import AppAvailabilityV2TerritoryAvailabilitiesLinkagesResponse from '../model/AppAvailabilityV2TerritoryAvailabilitiesLinkagesResponse';
import ErrorResponse from '../model/ErrorResponse';
import TerritoryAvailabilitiesResponse from '../model/TerritoryAvailabilitiesResponse';

/**
* AppAvailabilities service.
* @module api/AppAvailabilitiesApi
* @version 4.1
*/
export default class AppAvailabilitiesApi {

    /**
    * Constructs a new AppAvailabilitiesApi. 
    * @alias module:api/AppAvailabilitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appAvailabilitiesV2CreateInstance operation.
     * @callback module:api/AppAvailabilitiesApi~appAvailabilitiesV2CreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAvailabilityV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppAvailabilityV2CreateRequest} appAvailabilityV2CreateRequest AppAvailability representation
     * @param {module:api/AppAvailabilitiesApi~appAvailabilitiesV2CreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAvailabilityV2Response}
     */
    appAvailabilitiesV2CreateInstance(appAvailabilityV2CreateRequest, callback) {
      let postBody = appAvailabilityV2CreateRequest;
      // verify the required parameter 'appAvailabilityV2CreateRequest' is set
      if (appAvailabilityV2CreateRequest === undefined || appAvailabilityV2CreateRequest === null) {
        throw new Error("Missing the required parameter 'appAvailabilityV2CreateRequest' when calling appAvailabilitiesV2CreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppAvailabilityV2Response;
      return this.apiClient.callApi(
        '/v2/appAvailabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appAvailabilitiesV2GetInstance operation.
     * @callback module:api/AppAvailabilitiesApi~appAvailabilitiesV2GetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAvailabilityV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppAvailabilities] the fields to include for returned resources of type appAvailabilities
     * @param {Array.<module:model/String>} [fieldsTerritoryAvailabilities] the fields to include for returned resources of type territoryAvailabilities
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitTerritoryAvailabilities] maximum number of related territoryAvailabilities returned (when they are included)
     * @param {module:api/AppAvailabilitiesApi~appAvailabilitiesV2GetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAvailabilityV2Response}
     */
    appAvailabilitiesV2GetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appAvailabilitiesV2GetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsAppAvailabilities'], 'csv'),
        'fields[territoryAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsTerritoryAvailabilities'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[territoryAvailabilities]': opts['limitTerritoryAvailabilities']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAvailabilityV2Response;
      return this.apiClient.callApi(
        '/v2/appAvailabilities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelated operation.
     * @callback module:api/AppAvailabilitiesApi~appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerritoryAvailabilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsTerritoryAvailabilities] the fields to include for returned resources of type territoryAvailabilities
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppAvailabilitiesApi~appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerritoryAvailabilitiesResponse}
     */
    appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[territoryAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsTerritoryAvailabilities'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TerritoryAvailabilitiesResponse;
      return this.apiClient.callApi(
        '/v2/appAvailabilities/{id}/territoryAvailabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationship operation.
     * @callback module:api/AppAvailabilitiesApi~appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAvailabilityV2TerritoryAvailabilitiesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppAvailabilitiesApi~appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAvailabilityV2TerritoryAvailabilitiesLinkagesResponse}
     */
    appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAvailabilityV2TerritoryAvailabilitiesLinkagesResponse;
      return this.apiClient.callApi(
        '/v2/appAvailabilities/{id}/relationships/territoryAvailabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
