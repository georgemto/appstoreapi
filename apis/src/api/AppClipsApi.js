/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppClipAdvancedExperiencesResponse from '../model/AppClipAdvancedExperiencesResponse';
import AppClipAppClipAdvancedExperiencesLinkagesResponse from '../model/AppClipAppClipAdvancedExperiencesLinkagesResponse';
import AppClipAppClipDefaultExperiencesLinkagesResponse from '../model/AppClipAppClipDefaultExperiencesLinkagesResponse';
import AppClipDefaultExperiencesResponse from '../model/AppClipDefaultExperiencesResponse';
import AppClipResponse from '../model/AppClipResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppClips service.
* @module api/AppClipsApi
* @version 4.1
*/
export default class AppClipsApi {

    /**
    * Constructs a new AppClipsApi. 
    * @alias module:api/AppClipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appClipsAppClipAdvancedExperiencesGetToManyRelated operation.
     * @callback module:api/AppClipsApi~appClipsAppClipAdvancedExperiencesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipAdvancedExperiencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterStatus] filter by attribute 'status'
     * @param {Array.<module:model/String>} [filterPlaceStatus] filter by attribute 'placeStatus'
     * @param {Array.<module:model/String>} [filterAction] filter by attribute 'action'
     * @param {Array.<module:model/String>} [fieldsAppClipAdvancedExperiences] the fields to include for returned resources of type appClipAdvancedExperiences
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsAppClipAdvancedExperienceImages] the fields to include for returned resources of type appClipAdvancedExperienceImages
     * @param {Array.<module:model/String>} [fieldsAppClipAdvancedExperienceLocalizations] the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {module:api/AppClipsApi~appClipsAppClipAdvancedExperiencesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipAdvancedExperiencesResponse}
     */
    appClipsAppClipAdvancedExperiencesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipsAppClipAdvancedExperiencesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[status]': this.apiClient.buildCollectionParam(opts['filterStatus'], 'csv'),
        'filter[placeStatus]': this.apiClient.buildCollectionParam(opts['filterPlaceStatus'], 'csv'),
        'filter[action]': this.apiClient.buildCollectionParam(opts['filterAction'], 'csv'),
        'fields[appClipAdvancedExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAdvancedExperiences'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[appClipAdvancedExperienceImages]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAdvancedExperienceImages'], 'csv'),
        'fields[appClipAdvancedExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAdvancedExperienceLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipAdvancedExperiencesResponse;
      return this.apiClient.callApi(
        '/v1/appClips/{id}/appClipAdvancedExperiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipsAppClipAdvancedExperiencesGetToManyRelationship operation.
     * @callback module:api/AppClipsApi~appClipsAppClipAdvancedExperiencesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipAppClipAdvancedExperiencesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppClipsApi~appClipsAppClipAdvancedExperiencesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipAppClipAdvancedExperiencesLinkagesResponse}
     */
    appClipsAppClipAdvancedExperiencesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipsAppClipAdvancedExperiencesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipAppClipAdvancedExperiencesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appClips/{id}/relationships/appClipAdvancedExperiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipsAppClipDefaultExperiencesGetToManyRelated operation.
     * @callback module:api/AppClipsApi~appClipsAppClipDefaultExperiencesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperiencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} [existsReleaseWithAppStoreVersion] filter by existence or non-existence of related 'releaseWithAppStoreVersion'
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [fieldsAppClipAppStoreReviewDetails] the fields to include for returned resources of type appClipAppStoreReviewDetails
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClipDefaultExperienceLocalizations] maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
     * @param {module:api/AppClipsApi~appClipsAppClipDefaultExperiencesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperiencesResponse}
     */
    appClipsAppClipDefaultExperiencesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipsAppClipDefaultExperiencesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'exists[releaseWithAppStoreVersion]': opts['existsReleaseWithAppStoreVersion'],
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'fields[appClipAppStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAppStoreReviewDetails'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClipDefaultExperienceLocalizations]': opts['limitAppClipDefaultExperienceLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperiencesResponse;
      return this.apiClient.callApi(
        '/v1/appClips/{id}/appClipDefaultExperiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipsAppClipDefaultExperiencesGetToManyRelationship operation.
     * @callback module:api/AppClipsApi~appClipsAppClipDefaultExperiencesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipAppClipDefaultExperiencesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppClipsApi~appClipsAppClipDefaultExperiencesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipAppClipDefaultExperiencesLinkagesResponse}
     */
    appClipsAppClipDefaultExperiencesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipsAppClipDefaultExperiencesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipAppClipDefaultExperiencesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appClips/{id}/relationships/appClipDefaultExperiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipsGetInstance operation.
     * @callback module:api/AppClipsApi~appClipsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClipDefaultExperiences] maximum number of related appClipDefaultExperiences returned (when they are included)
     * @param {module:api/AppClipsApi~appClipsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipResponse}
     */
    appClipsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClipDefaultExperiences]': opts['limitAppClipDefaultExperiences']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipResponse;
      return this.apiClient.callApi(
        '/v1/appClips/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
