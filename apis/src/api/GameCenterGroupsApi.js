/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterAchievementsResponse from '../model/GameCenterAchievementsResponse';
import GameCenterActivitiesResponse from '../model/GameCenterActivitiesResponse';
import GameCenterChallengesResponse from '../model/GameCenterChallengesResponse';
import GameCenterDetailsResponse from '../model/GameCenterDetailsResponse';
import GameCenterGroupCreateRequest from '../model/GameCenterGroupCreateRequest';
import GameCenterGroupGameCenterAchievementsLinkagesRequest from '../model/GameCenterGroupGameCenterAchievementsLinkagesRequest';
import GameCenterGroupGameCenterAchievementsLinkagesResponse from '../model/GameCenterGroupGameCenterAchievementsLinkagesResponse';
import GameCenterGroupGameCenterActivitiesLinkagesResponse from '../model/GameCenterGroupGameCenterActivitiesLinkagesResponse';
import GameCenterGroupGameCenterChallengesLinkagesResponse from '../model/GameCenterGroupGameCenterChallengesLinkagesResponse';
import GameCenterGroupGameCenterDetailsLinkagesResponse from '../model/GameCenterGroupGameCenterDetailsLinkagesResponse';
import GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest from '../model/GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest';
import GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse from '../model/GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse';
import GameCenterGroupGameCenterLeaderboardsLinkagesRequest from '../model/GameCenterGroupGameCenterLeaderboardsLinkagesRequest';
import GameCenterGroupGameCenterLeaderboardsLinkagesResponse from '../model/GameCenterGroupGameCenterLeaderboardsLinkagesResponse';
import GameCenterGroupResponse from '../model/GameCenterGroupResponse';
import GameCenterGroupUpdateRequest from '../model/GameCenterGroupUpdateRequest';
import GameCenterGroupsResponse from '../model/GameCenterGroupsResponse';
import GameCenterLeaderboardSetsResponse from '../model/GameCenterLeaderboardSetsResponse';
import GameCenterLeaderboardsResponse from '../model/GameCenterLeaderboardsResponse';

/**
* GameCenterGroups service.
* @module api/GameCenterGroupsApi
* @version 4.1
*/
export default class GameCenterGroupsApi {

    /**
    * Constructs a new GameCenterGroupsApi. 
    * @alias module:api/GameCenterGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterGroupsCreateInstance operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterGroupCreateRequest} gameCenterGroupCreateRequest GameCenterGroup representation
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupResponse}
     */
    gameCenterGroupsCreateInstance(gameCenterGroupCreateRequest, callback) {
      let postBody = gameCenterGroupCreateRequest;
      // verify the required parameter 'gameCenterGroupCreateRequest' is set
      if (gameCenterGroupCreateRequest === undefined || gameCenterGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterGroupCreateRequest' when calling gameCenterGroupsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsDeleteInstance operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterGroupsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterAchievementsGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementsResponse}
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterAchievementsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterAchievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterAchievementsGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterAchievementsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterAchievementsLinkagesResponse}
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterAchievementsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterAchievementsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterGroupGameCenterAchievementsLinkagesRequest} gameCenterGroupGameCenterAchievementsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(id, gameCenterGroupGameCenterAchievementsLinkagesRequest, callback) {
      let postBody = gameCenterGroupGameCenterAchievementsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' is set
      if (gameCenterGroupGameCenterAchievementsLinkagesRequest === undefined || gameCenterGroupGameCenterAchievementsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterActivitiesGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterActivitiesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersions] the fields to include for returned resources of type gameCenterActivityVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAchievements] maximum number of related achievements returned (when they are included)
     * @param {Number} [limitLeaderboards] maximum number of related leaderboards returned (when they are included)
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterActivitiesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivitiesResponse}
     */
    gameCenterGroupsGameCenterActivitiesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterActivitiesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterActivityVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[achievements]': opts['limitAchievements'],
        'limit[leaderboards]': opts['limitLeaderboards'],
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivitiesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterActivities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterActivitiesGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterActivitiesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterActivitiesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterActivitiesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterActivitiesLinkagesResponse}
     */
    gameCenterGroupsGameCenterActivitiesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterActivitiesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterActivitiesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterActivities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterChallengesGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterChallengesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersions] the fields to include for returned resources of type gameCenterChallengeVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterChallengesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengesResponse}
     */
    gameCenterGroupsGameCenterChallengesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterChallengesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterChallengeVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersions'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterChallenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterChallengesGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterChallengesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterChallengesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterChallengesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterChallengesLinkagesResponse}
     */
    gameCenterGroupsGameCenterChallengesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterChallengesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterChallengesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterChallenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterDetailsGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterDetailsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterGameCenterAppVersionsEnabled] filter by attribute 'gameCenterAppVersions.enabled'
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersionReleases] the fields to include for returned resources of type gameCenterActivityVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersionReleases] the fields to include for returned resources of type gameCenterChallengeVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterAppVersions] maximum number of related gameCenterAppVersions returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {Number} [limitAchievementReleases] maximum number of related achievementReleases returned (when they are included)
     * @param {Number} [limitActivityReleases] maximum number of related activityReleases returned (when they are included)
     * @param {Number} [limitChallengeReleases] maximum number of related challengeReleases returned (when they are included)
     * @param {Number} [limitLeaderboardReleases] maximum number of related leaderboardReleases returned (when they are included)
     * @param {Number} [limitLeaderboardSetReleases] maximum number of related leaderboardSetReleases returned (when they are included)
     * @param {Number} [limitChallengesMinimumPlatformVersions] maximum number of related challengesMinimumPlatformVersions returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterDetailsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailsResponse}
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterDetailsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[gameCenterAppVersions.enabled]': this.apiClient.buildCollectionParam(opts['filterGameCenterAppVersionsEnabled'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivityVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersionReleases'], 'csv'),
        'fields[gameCenterChallengeVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersionReleases'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterAppVersions]': opts['limitGameCenterAppVersions'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges'],
        'limit[achievementReleases]': opts['limitAchievementReleases'],
        'limit[activityReleases]': opts['limitActivityReleases'],
        'limit[challengeReleases]': opts['limitChallengeReleases'],
        'limit[leaderboardReleases]': opts['limitLeaderboardReleases'],
        'limit[leaderboardSetReleases]': opts['limitLeaderboardSetReleases'],
        'limit[challengesMinimumPlatformVersions]': opts['limitChallengesMinimumPlatformVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterDetailsGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterDetailsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterDetailsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterDetailsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterDetailsLinkagesResponse}
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterDetailsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterDetailsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetsResponse}
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse}
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest} gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(id, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, callback) {
      let postBody = gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' is set
      if (gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === undefined || gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardsGetToManyRelated operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardsResponse}
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupGameCenterLeaderboardsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupGameCenterLeaderboardsLinkagesResponse}
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupGameCenterLeaderboardsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterGroupGameCenterLeaderboardsLinkagesRequest} gameCenterGroupGameCenterLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(id, gameCenterGroupGameCenterLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterGroupGameCenterLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' is set
      if (gameCenterGroupGameCenterLeaderboardsLinkagesRequest === undefined || gameCenterGroupGameCenterLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGetCollection operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterGameCenterDetails] filter by id(s) of related 'gameCenterDetails'
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {Number} [limitGameCenterDetails] maximum number of related gameCenterDetails returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupsResponse}
     */
    gameCenterGroupsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['filterGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges'],
        'limit[gameCenterDetails]': opts['limitGameCenterDetails'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsGetInstance operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {Number} [limitGameCenterDetails] maximum number of related gameCenterDetails returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupResponse}
     */
    gameCenterGroupsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges'],
        'limit[gameCenterDetails]': opts['limitGameCenterDetails'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterGroupsUpdateInstance operation.
     * @callback module:api/GameCenterGroupsApi~gameCenterGroupsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterGroupUpdateRequest} gameCenterGroupUpdateRequest GameCenterGroup representation
     * @param {module:api/GameCenterGroupsApi~gameCenterGroupsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupResponse}
     */
    gameCenterGroupsUpdateInstance(id, gameCenterGroupUpdateRequest, callback) {
      let postBody = gameCenterGroupUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterGroupsUpdateInstance");
      }
      // verify the required parameter 'gameCenterGroupUpdateRequest' is set
      if (gameCenterGroupUpdateRequest === undefined || gameCenterGroupUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterGroupUpdateRequest' when calling gameCenterGroupsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
