/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsBetaTesterUsagesV1MetricResponse from '../model/AppsBetaTesterUsagesV1MetricResponse';
import BetaBuildUsagesV1MetricResponse from '../model/BetaBuildUsagesV1MetricResponse';
import BetaPublicLinkUsagesV1MetricResponse from '../model/BetaPublicLinkUsagesV1MetricResponse';
import BetaTesterUsagesV1MetricResponse from '../model/BetaTesterUsagesV1MetricResponse';
import ErrorResponse from '../model/ErrorResponse';
import GameCenterMatchmakingAppRequestsV1MetricResponse from '../model/GameCenterMatchmakingAppRequestsV1MetricResponse';
import GameCenterMatchmakingBooleanRuleResultsV1MetricResponse from '../model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse';
import GameCenterMatchmakingNumberRuleResultsV1MetricResponse from '../model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse';
import GameCenterMatchmakingQueueRequestsV1MetricResponse from '../model/GameCenterMatchmakingQueueRequestsV1MetricResponse';
import GameCenterMatchmakingQueueSizesV1MetricResponse from '../model/GameCenterMatchmakingQueueSizesV1MetricResponse';
import GameCenterMatchmakingRuleErrorsV1MetricResponse from '../model/GameCenterMatchmakingRuleErrorsV1MetricResponse';
import GameCenterMatchmakingSessionsV1MetricResponse from '../model/GameCenterMatchmakingSessionsV1MetricResponse';

/**
* Metrics service.
* @module api/MetricsApi
* @version 4.1
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsBetaTesterUsagesGetMetrics operation.
     * @callback module:api/MetricsApi~appsBetaTesterUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsBetaTesterUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period] the duration of the reporting period
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterBetaTesters] filter by 'betaTesters' relationship dimension
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~appsBetaTesterUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsBetaTesterUsagesV1MetricResponse}
     */
    appsBetaTesterUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaTesterUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'period': opts['period'],
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[betaTesters]': opts['filterBetaTesters'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsBetaTesterUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/metrics/betaTesterUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsBetaTesterUsagesGetMetrics operation.
     * @callback module:api/MetricsApi~betaGroupsBetaTesterUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsBetaTesterUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period] the duration of the reporting period
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterBetaTesters] filter by 'betaTesters' relationship dimension
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~betaGroupsBetaTesterUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsBetaTesterUsagesV1MetricResponse}
     */
    betaGroupsBetaTesterUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsBetaTesterUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'period': opts['period'],
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[betaTesters]': opts['filterBetaTesters'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsBetaTesterUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/metrics/betaTesterUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaGroupsPublicLinkUsagesGetMetrics operation.
     * @callback module:api/MetricsApi~betaGroupsPublicLinkUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaPublicLinkUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~betaGroupsPublicLinkUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaPublicLinkUsagesV1MetricResponse}
     */
    betaGroupsPublicLinkUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaGroupsPublicLinkUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaPublicLinkUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/betaGroups/{id}/metrics/publicLinkUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaTestersBetaTesterUsagesGetMetrics operation.
     * @callback module:api/MetricsApi~betaTestersBetaTesterUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTesterUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {String} filterApps filter by 'apps' relationship dimension
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period] the duration of the reporting period
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~betaTestersBetaTesterUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTesterUsagesV1MetricResponse}
     */
    betaTestersBetaTesterUsagesGetMetrics(id, filterApps, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaTestersBetaTesterUsagesGetMetrics");
      }
      // verify the required parameter 'filterApps' is set
      if (filterApps === undefined || filterApps === null) {
        throw new Error("Missing the required parameter 'filterApps' when calling betaTestersBetaTesterUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'period': opts['period'],
        'filter[apps]': filterApps,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTesterUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/betaTesters/{id}/metrics/betaTesterUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaBuildUsagesGetMetrics operation.
     * @callback module:api/MetricsApi~buildsBetaBuildUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~buildsBetaBuildUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildUsagesV1MetricResponse}
     */
    buildsBetaBuildUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaBuildUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/metrics/betaBuildUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsClassicMatchmakingRequestsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterDetailsClassicMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingAppRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterDetailsClassicMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingAppRequestsV1MetricResponse}
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingAppRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingAppRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingAppRequestsV1MetricResponse}
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingAppRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueSizesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueSizesV1MetricResponse}
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueSizesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterDetail] filter by 'gameCenterDetail' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterDetail]': opts['filterGameCenterDetail'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueSizesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueSizesV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueSizesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterDetail] filter by 'gameCenterDetail' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingQueueRequestsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterDetail]': opts['filterGameCenterDetail'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingQueueRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingSessionsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingSessionsV1MetricResponse}
     */
    gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingSessionsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingBooleanRuleResultsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingNumberRuleResultsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics operation.
     * @callback module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingRuleErrorsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/MetricsApi~gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingRuleErrorsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingRuleErrorsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
