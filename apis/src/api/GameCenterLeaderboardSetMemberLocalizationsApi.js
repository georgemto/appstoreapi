/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterLeaderboardResponse from '../model/GameCenterLeaderboardResponse';
import GameCenterLeaderboardSetMemberLocalizationCreateRequest from '../model/GameCenterLeaderboardSetMemberLocalizationCreateRequest';
import GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardLinkageResponse from '../model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardLinkageResponse';
import GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardSetLinkageResponse from '../model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardSetLinkageResponse';
import GameCenterLeaderboardSetMemberLocalizationResponse from '../model/GameCenterLeaderboardSetMemberLocalizationResponse';
import GameCenterLeaderboardSetMemberLocalizationUpdateRequest from '../model/GameCenterLeaderboardSetMemberLocalizationUpdateRequest';
import GameCenterLeaderboardSetMemberLocalizationsResponse from '../model/GameCenterLeaderboardSetMemberLocalizationsResponse';
import GameCenterLeaderboardSetResponse from '../model/GameCenterLeaderboardSetResponse';

/**
* GameCenterLeaderboardSetMemberLocalizations service.
* @module api/GameCenterLeaderboardSetMemberLocalizationsApi
* @version 4.1
*/
export default class GameCenterLeaderboardSetMemberLocalizationsApi {

    /**
    * Constructs a new GameCenterLeaderboardSetMemberLocalizationsApi. 
    * @alias module:api/GameCenterLeaderboardSetMemberLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsCreateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationCreateRequest} gameCenterLeaderboardSetMemberLocalizationCreateRequest GameCenterLeaderboardSetMemberLocalization representation
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetMemberLocalizationResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsCreateInstance(gameCenterLeaderboardSetMemberLocalizationCreateRequest, callback) {
      let postBody = gameCenterLeaderboardSetMemberLocalizationCreateRequest;
      // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' is set
      if (gameCenterLeaderboardSetMemberLocalizationCreateRequest === undefined || gameCenterLeaderboardSetMemberLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' when calling gameCenterLeaderboardSetMemberLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetMemberLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsDeleteInstance operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetMemberLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardLinkageResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/relationships/gameCenterLeaderboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardSetLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardSetLinkageResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetMemberLocalizationGameCenterLeaderboardSetLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/relationships/gameCenterLeaderboardSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsGetCollection operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} filterGameCenterLeaderboardSet filter by id(s) of related 'gameCenterLeaderboardSet'
     * @param {Array.<String>} filterGameCenterLeaderboard filter by id(s) of related 'gameCenterLeaderboard'
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetMemberLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetMemberLocalizationsResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsGetCollection(filterGameCenterLeaderboardSet, filterGameCenterLeaderboard, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterGameCenterLeaderboardSet' is set
      if (filterGameCenterLeaderboardSet === undefined || filterGameCenterLeaderboardSet === null) {
        throw new Error("Missing the required parameter 'filterGameCenterLeaderboardSet' when calling gameCenterLeaderboardSetMemberLocalizationsGetCollection");
      }
      // verify the required parameter 'filterGameCenterLeaderboard' is set
      if (filterGameCenterLeaderboard === undefined || filterGameCenterLeaderboard === null) {
        throw new Error("Missing the required parameter 'filterGameCenterLeaderboard' when calling gameCenterLeaderboardSetMemberLocalizationsGetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter[gameCenterLeaderboardSet]': this.apiClient.buildCollectionParam(filterGameCenterLeaderboardSet, 'csv'),
        'filter[gameCenterLeaderboard]': this.apiClient.buildCollectionParam(filterGameCenterLeaderboard, 'csv'),
        'fields[gameCenterLeaderboardSetMemberLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetMemberLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetMemberLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetMemberLocalizationsUpdateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetMemberLocalizationUpdateRequest} gameCenterLeaderboardSetMemberLocalizationUpdateRequest GameCenterLeaderboardSetMemberLocalization representation
     * @param {module:api/GameCenterLeaderboardSetMemberLocalizationsApi~gameCenterLeaderboardSetMemberLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetMemberLocalizationResponse}
     */
    gameCenterLeaderboardSetMemberLocalizationsUpdateInstance(id, gameCenterLeaderboardSetMemberLocalizationUpdateRequest, callback) {
      let postBody = gameCenterLeaderboardSetMemberLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetMemberLocalizationsUpdateInstance");
      }
      // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' is set
      if (gameCenterLeaderboardSetMemberLocalizationUpdateRequest === undefined || gameCenterLeaderboardSetMemberLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' when calling gameCenterLeaderboardSetMemberLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetMemberLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
