/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackgroundAssetCreateRequest from '../model/BackgroundAssetCreateRequest';
import BackgroundAssetResponse from '../model/BackgroundAssetResponse';
import BackgroundAssetVersionsLinkagesResponse from '../model/BackgroundAssetVersionsLinkagesResponse';
import BackgroundAssetVersionsResponse from '../model/BackgroundAssetVersionsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BackgroundAssets service.
* @module api/BackgroundAssetsApi
* @version 4.1
*/
export default class BackgroundAssetsApi {

    /**
    * Constructs a new BackgroundAssetsApi. 
    * @alias module:api/BackgroundAssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backgroundAssetsCreateInstance operation.
     * @callback module:api/BackgroundAssetsApi~backgroundAssetsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BackgroundAssetCreateRequest} backgroundAssetCreateRequest BackgroundAsset representation
     * @param {module:api/BackgroundAssetsApi~backgroundAssetsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackgroundAssetResponse}
     */
    backgroundAssetsCreateInstance(backgroundAssetCreateRequest, callback) {
      let postBody = backgroundAssetCreateRequest;
      // verify the required parameter 'backgroundAssetCreateRequest' is set
      if (backgroundAssetCreateRequest === undefined || backgroundAssetCreateRequest === null) {
        throw new Error("Missing the required parameter 'backgroundAssetCreateRequest' when calling backgroundAssetsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackgroundAssetResponse;
      return this.apiClient.callApi(
        '/v1/backgroundAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backgroundAssetsGetInstance operation.
     * @callback module:api/BackgroundAssetsApi~backgroundAssetsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBackgroundAssets] the fields to include for returned resources of type backgroundAssets
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/BackgroundAssetsApi~backgroundAssetsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackgroundAssetResponse}
     */
    backgroundAssetsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backgroundAssetsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[backgroundAssets]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssets'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackgroundAssetResponse;
      return this.apiClient.callApi(
        '/v1/backgroundAssets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backgroundAssetsVersionsGetToManyRelated operation.
     * @callback module:api/BackgroundAssetsApi~backgroundAssetsVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundAssetVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<String>} [filterVersion] filter by attribute 'version'
     * @param {Array.<module:model/String>} [filterInternalBetaReleaseState] filter by attribute 'internalBetaRelease.state'
     * @param {Array.<module:model/String>} [filterExternalBetaReleaseState] filter by attribute 'externalBetaRelease.state'
     * @param {Array.<module:model/String>} [filterAppStoreReleaseState] filter by attribute 'appStoreRelease.state'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersions] the fields to include for returned resources of type backgroundAssetVersions
     * @param {Array.<module:model/String>} [fieldsBackgroundAssets] the fields to include for returned resources of type backgroundAssets
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersionInternalBetaReleases] the fields to include for returned resources of type backgroundAssetVersionInternalBetaReleases
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersionExternalBetaReleases] the fields to include for returned resources of type backgroundAssetVersionExternalBetaReleases
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersionAppStoreReleases] the fields to include for returned resources of type backgroundAssetVersionAppStoreReleases
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetUploadFiles] the fields to include for returned resources of type backgroundAssetUploadFiles
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/BackgroundAssetsApi~backgroundAssetsVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackgroundAssetVersionsResponse}
     */
    backgroundAssetsVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backgroundAssetsVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'filter[version]': this.apiClient.buildCollectionParam(opts['filterVersion'], 'csv'),
        'filter[internalBetaRelease.state]': this.apiClient.buildCollectionParam(opts['filterInternalBetaReleaseState'], 'csv'),
        'filter[externalBetaRelease.state]': this.apiClient.buildCollectionParam(opts['filterExternalBetaReleaseState'], 'csv'),
        'filter[appStoreRelease.state]': this.apiClient.buildCollectionParam(opts['filterAppStoreReleaseState'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[backgroundAssetVersions]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersions'], 'csv'),
        'fields[backgroundAssets]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssets'], 'csv'),
        'fields[backgroundAssetVersionInternalBetaReleases]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersionInternalBetaReleases'], 'csv'),
        'fields[backgroundAssetVersionExternalBetaReleases]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersionExternalBetaReleases'], 'csv'),
        'fields[backgroundAssetVersionAppStoreReleases]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersionAppStoreReleases'], 'csv'),
        'fields[backgroundAssetUploadFiles]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetUploadFiles'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackgroundAssetVersionsResponse;
      return this.apiClient.callApi(
        '/v1/backgroundAssets/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backgroundAssetsVersionsGetToManyRelationship operation.
     * @callback module:api/BackgroundAssetsApi~backgroundAssetsVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundAssetVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BackgroundAssetsApi~backgroundAssetsVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackgroundAssetVersionsLinkagesResponse}
     */
    backgroundAssetsVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backgroundAssetsVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackgroundAssetVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/backgroundAssets/{id}/relationships/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
