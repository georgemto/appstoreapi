/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessibilityDeclarationsResponse from '../model/AccessibilityDeclarationsResponse';
import AlternativeDistributionKeyResponse from '../model/AlternativeDistributionKeyResponse';
import AnalyticsReportRequestsResponse from '../model/AnalyticsReportRequestsResponse';
import AppAccessibilityDeclarationsLinkagesResponse from '../model/AppAccessibilityDeclarationsLinkagesResponse';
import AppAlternativeDistributionKeyLinkageResponse from '../model/AppAlternativeDistributionKeyLinkageResponse';
import AppAnalyticsReportRequestsLinkagesResponse from '../model/AppAnalyticsReportRequestsLinkagesResponse';
import AppAppAvailabilityV2LinkageResponse from '../model/AppAppAvailabilityV2LinkageResponse';
import AppAppClipsLinkagesResponse from '../model/AppAppClipsLinkagesResponse';
import AppAppCustomProductPagesLinkagesResponse from '../model/AppAppCustomProductPagesLinkagesResponse';
import AppAppEncryptionDeclarationsLinkagesResponse from '../model/AppAppEncryptionDeclarationsLinkagesResponse';
import AppAppEventsLinkagesResponse from '../model/AppAppEventsLinkagesResponse';
import AppAppInfosLinkagesResponse from '../model/AppAppInfosLinkagesResponse';
import AppAppPricePointsLinkagesResponse from '../model/AppAppPricePointsLinkagesResponse';
import AppAppPriceScheduleLinkageResponse from '../model/AppAppPriceScheduleLinkageResponse';
import AppAppStoreVersionExperimentsV2LinkagesResponse from '../model/AppAppStoreVersionExperimentsV2LinkagesResponse';
import AppAppStoreVersionsLinkagesResponse from '../model/AppAppStoreVersionsLinkagesResponse';
import AppAppTagsLinkagesResponse from '../model/AppAppTagsLinkagesResponse';
import AppAvailabilityV2Response from '../model/AppAvailabilityV2Response';
import AppBackgroundAssetsLinkagesResponse from '../model/AppBackgroundAssetsLinkagesResponse';
import AppBetaAppLocalizationsLinkagesResponse from '../model/AppBetaAppLocalizationsLinkagesResponse';
import AppBetaAppReviewDetailLinkageResponse from '../model/AppBetaAppReviewDetailLinkageResponse';
import AppBetaFeedbackCrashSubmissionsLinkagesResponse from '../model/AppBetaFeedbackCrashSubmissionsLinkagesResponse';
import AppBetaFeedbackScreenshotSubmissionsLinkagesResponse from '../model/AppBetaFeedbackScreenshotSubmissionsLinkagesResponse';
import AppBetaGroupsLinkagesResponse from '../model/AppBetaGroupsLinkagesResponse';
import AppBetaLicenseAgreementLinkageResponse from '../model/AppBetaLicenseAgreementLinkageResponse';
import AppBetaTestersLinkagesRequest from '../model/AppBetaTestersLinkagesRequest';
import AppBuildUploadsLinkagesResponse from '../model/AppBuildUploadsLinkagesResponse';
import AppBuildsLinkagesResponse from '../model/AppBuildsLinkagesResponse';
import AppCiProductLinkageResponse from '../model/AppCiProductLinkageResponse';
import AppClipsResponse from '../model/AppClipsResponse';
import AppCustomProductPagesResponse from '../model/AppCustomProductPagesResponse';
import AppCustomerReviewsLinkagesResponse from '../model/AppCustomerReviewsLinkagesResponse';
import AppEncryptionDeclarationsResponse from '../model/AppEncryptionDeclarationsResponse';
import AppEndUserLicenseAgreementLinkageResponse from '../model/AppEndUserLicenseAgreementLinkageResponse';
import AppEventsResponse from '../model/AppEventsResponse';
import AppGameCenterDetailLinkageResponse from '../model/AppGameCenterDetailLinkageResponse';
import AppGameCenterEnabledVersionsLinkagesResponse from '../model/AppGameCenterEnabledVersionsLinkagesResponse';
import AppInAppPurchasesLinkagesResponse from '../model/AppInAppPurchasesLinkagesResponse';
import AppInAppPurchasesV2LinkagesResponse from '../model/AppInAppPurchasesV2LinkagesResponse';
import AppInfosResponse from '../model/AppInfosResponse';
import AppKeywordsResponse from '../model/AppKeywordsResponse';
import AppMarketplaceSearchDetailLinkageResponse from '../model/AppMarketplaceSearchDetailLinkageResponse';
import AppPreReleaseVersionsLinkagesResponse from '../model/AppPreReleaseVersionsLinkagesResponse';
import AppPricePointsV3Response from '../model/AppPricePointsV3Response';
import AppPriceScheduleResponse from '../model/AppPriceScheduleResponse';
import AppPromotedPurchasesLinkagesRequest from '../model/AppPromotedPurchasesLinkagesRequest';
import AppPromotedPurchasesLinkagesResponse from '../model/AppPromotedPurchasesLinkagesResponse';
import AppResponse from '../model/AppResponse';
import AppReviewSubmissionsLinkagesResponse from '../model/AppReviewSubmissionsLinkagesResponse';
import AppSearchKeywordsLinkagesResponse from '../model/AppSearchKeywordsLinkagesResponse';
import AppStoreVersionExperimentsV2Response from '../model/AppStoreVersionExperimentsV2Response';
import AppStoreVersionsResponse from '../model/AppStoreVersionsResponse';
import AppSubscriptionGracePeriodLinkageResponse from '../model/AppSubscriptionGracePeriodLinkageResponse';
import AppSubscriptionGroupsLinkagesResponse from '../model/AppSubscriptionGroupsLinkagesResponse';
import AppTagsResponse from '../model/AppTagsResponse';
import AppUpdateRequest from '../model/AppUpdateRequest';
import AppWebhooksLinkagesResponse from '../model/AppWebhooksLinkagesResponse';
import AppsBetaTesterUsagesV1MetricResponse from '../model/AppsBetaTesterUsagesV1MetricResponse';
import AppsResponse from '../model/AppsResponse';
import BackgroundAssetsResponse from '../model/BackgroundAssetsResponse';
import BetaAppLocalizationsWithoutIncludesResponse from '../model/BetaAppLocalizationsWithoutIncludesResponse';
import BetaAppReviewDetailWithoutIncludesResponse from '../model/BetaAppReviewDetailWithoutIncludesResponse';
import BetaFeedbackCrashSubmissionsResponse from '../model/BetaFeedbackCrashSubmissionsResponse';
import BetaFeedbackScreenshotSubmissionsResponse from '../model/BetaFeedbackScreenshotSubmissionsResponse';
import BetaGroupsWithoutIncludesResponse from '../model/BetaGroupsWithoutIncludesResponse';
import BetaLicenseAgreementWithoutIncludesResponse from '../model/BetaLicenseAgreementWithoutIncludesResponse';
import BuildUploadsResponse from '../model/BuildUploadsResponse';
import BuildsWithoutIncludesResponse from '../model/BuildsWithoutIncludesResponse';
import CiProductResponse from '../model/CiProductResponse';
import CustomerReviewSummarizationsResponse from '../model/CustomerReviewSummarizationsResponse';
import CustomerReviewsResponse from '../model/CustomerReviewsResponse';
import EndUserLicenseAgreementWithoutIncludesResponse from '../model/EndUserLicenseAgreementWithoutIncludesResponse';
import ErrorResponse from '../model/ErrorResponse';
import GameCenterDetailResponse from '../model/GameCenterDetailResponse';
import GameCenterEnabledVersionsResponse from '../model/GameCenterEnabledVersionsResponse';
import InAppPurchasesResponse from '../model/InAppPurchasesResponse';
import InAppPurchasesV2Response from '../model/InAppPurchasesV2Response';
import MarketplaceSearchDetailResponse from '../model/MarketplaceSearchDetailResponse';
import PreReleaseVersionsWithoutIncludesResponse from '../model/PreReleaseVersionsWithoutIncludesResponse';
import PromotedPurchasesResponse from '../model/PromotedPurchasesResponse';
import ReviewSubmissionsResponse from '../model/ReviewSubmissionsResponse';
import SubscriptionGracePeriodResponse from '../model/SubscriptionGracePeriodResponse';
import SubscriptionGroupsResponse from '../model/SubscriptionGroupsResponse';
import WebhooksResponse from '../model/WebhooksResponse';
import XcodeMetrics from '../model/XcodeMetrics';

/**
* Apps service.
* @module api/AppsApi
* @version 4.1
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAccessibilityDeclarationsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAccessibilityDeclarationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessibilityDeclarationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterDeviceFamily] filter by attribute 'deviceFamily'
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsAccessibilityDeclarations] the fields to include for returned resources of type accessibilityDeclarations
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAccessibilityDeclarationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessibilityDeclarationsResponse}
     */
    appsAccessibilityDeclarationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAccessibilityDeclarationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[deviceFamily]': this.apiClient.buildCollectionParam(opts['filterDeviceFamily'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'fields[accessibilityDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAccessibilityDeclarations'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessibilityDeclarationsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/accessibilityDeclarations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAccessibilityDeclarationsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAccessibilityDeclarationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAccessibilityDeclarationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAccessibilityDeclarationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAccessibilityDeclarationsLinkagesResponse}
     */
    appsAccessibilityDeclarationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAccessibilityDeclarationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAccessibilityDeclarationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/accessibilityDeclarations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAlternativeDistributionKeyGetToOneRelated operation.
     * @callback module:api/AppsApi~appsAlternativeDistributionKeyGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlternativeDistributionKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionKeys] the fields to include for returned resources of type alternativeDistributionKeys
     * @param {module:api/AppsApi~appsAlternativeDistributionKeyGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlternativeDistributionKeyResponse}
     */
    appsAlternativeDistributionKeyGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAlternativeDistributionKeyGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[alternativeDistributionKeys]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionKeys'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlternativeDistributionKeyResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/alternativeDistributionKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAlternativeDistributionKeyGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsAlternativeDistributionKeyGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAlternativeDistributionKeyLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsAlternativeDistributionKeyGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAlternativeDistributionKeyLinkageResponse}
     */
    appsAlternativeDistributionKeyGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAlternativeDistributionKeyGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAlternativeDistributionKeyLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/alternativeDistributionKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAnalyticsReportRequestsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAnalyticsReportRequestsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsReportRequestsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterAccessType] filter by attribute 'accessType'
     * @param {Array.<module:model/String>} [fieldsAnalyticsReportRequests] the fields to include for returned resources of type analyticsReportRequests
     * @param {Array.<module:model/String>} [fieldsAnalyticsReports] the fields to include for returned resources of type analyticsReports
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitReports] maximum number of related reports returned (when they are included)
     * @param {module:api/AppsApi~appsAnalyticsReportRequestsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsReportRequestsResponse}
     */
    appsAnalyticsReportRequestsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAnalyticsReportRequestsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[accessType]': this.apiClient.buildCollectionParam(opts['filterAccessType'], 'csv'),
        'fields[analyticsReportRequests]': this.apiClient.buildCollectionParam(opts['fieldsAnalyticsReportRequests'], 'csv'),
        'fields[analyticsReports]': this.apiClient.buildCollectionParam(opts['fieldsAnalyticsReports'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[reports]': opts['limitReports']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsReportRequestsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/analyticsReportRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAnalyticsReportRequestsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAnalyticsReportRequestsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAnalyticsReportRequestsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAnalyticsReportRequestsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAnalyticsReportRequestsLinkagesResponse}
     */
    appsAnalyticsReportRequestsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAnalyticsReportRequestsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAnalyticsReportRequestsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/analyticsReportRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppAvailabilityV2GetToOneRelated operation.
     * @callback module:api/AppsApi~appsAppAvailabilityV2GetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAvailabilityV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppAvailabilities] the fields to include for returned resources of type appAvailabilities
     * @param {Array.<module:model/String>} [fieldsTerritoryAvailabilities] the fields to include for returned resources of type territoryAvailabilities
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitTerritoryAvailabilities] maximum number of related territoryAvailabilities returned (when they are included)
     * @param {module:api/AppsApi~appsAppAvailabilityV2GetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAvailabilityV2Response}
     */
    appsAppAvailabilityV2GetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppAvailabilityV2GetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsAppAvailabilities'], 'csv'),
        'fields[territoryAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsTerritoryAvailabilities'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[territoryAvailabilities]': opts['limitTerritoryAvailabilities']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAvailabilityV2Response;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appAvailabilityV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppAvailabilityV2GetToOneRelationship operation.
     * @callback module:api/AppsApi~appsAppAvailabilityV2GetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppAvailabilityV2LinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsAppAvailabilityV2GetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppAvailabilityV2LinkageResponse}
     */
    appsAppAvailabilityV2GetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppAvailabilityV2GetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppAvailabilityV2LinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appAvailabilityV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppClipsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppClipsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterBundleId] filter by attribute 'bundleId'
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClipDefaultExperiences] maximum number of related appClipDefaultExperiences returned (when they are included)
     * @param {module:api/AppsApi~appsAppClipsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipsResponse}
     */
    appsAppClipsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppClipsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[bundleId]': this.apiClient.buildCollectionParam(opts['filterBundleId'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClipDefaultExperiences]': opts['limitAppClipDefaultExperiences']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appClips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppClipsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppClipsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppClipsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppClipsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppClipsLinkagesResponse}
     */
    appsAppClipsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppClipsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppClipsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appClips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppCustomProductPagesGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppCustomProductPagesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCustomProductPagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterVisible] filter by attribute 'visible'
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPages] the fields to include for returned resources of type appCustomProductPages
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPageVersions] the fields to include for returned resources of type appCustomProductPageVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppCustomProductPageVersions] maximum number of related appCustomProductPageVersions returned (when they are included)
     * @param {module:api/AppsApi~appsAppCustomProductPagesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCustomProductPagesResponse}
     */
    appsAppCustomProductPagesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppCustomProductPagesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[visible]': this.apiClient.buildCollectionParam(opts['filterVisible'], 'csv'),
        'fields[appCustomProductPages]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPages'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appCustomProductPageVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPageVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appCustomProductPageVersions]': opts['limitAppCustomProductPageVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCustomProductPagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appCustomProductPages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppCustomProductPagesGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppCustomProductPagesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppCustomProductPagesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppCustomProductPagesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppCustomProductPagesLinkagesResponse}
     */
    appsAppCustomProductPagesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppCustomProductPagesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppCustomProductPagesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appCustomProductPages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppEncryptionDeclarationsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppEncryptionDeclarationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEncryptionDeclarationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarationDocuments] the fields to include for returned resources of type appEncryptionDeclarationDocuments
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/AppsApi~appsAppEncryptionDeclarationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEncryptionDeclarationsResponse}
     */
    appsAppEncryptionDeclarationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppEncryptionDeclarationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appEncryptionDeclarationDocuments]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarationDocuments'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEncryptionDeclarationsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appEncryptionDeclarations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppEncryptionDeclarationsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppEncryptionDeclarationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppEncryptionDeclarationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppEncryptionDeclarationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppEncryptionDeclarationsLinkagesResponse}
     */
    appsAppEncryptionDeclarationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppEncryptionDeclarationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppEncryptionDeclarationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appEncryptionDeclarations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppEventsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppEventsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterEventState] filter by attribute 'eventState'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {module:api/AppsApi~appsAppEventsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventsResponse}
     */
    appsAppEventsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppEventsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[eventState]': this.apiClient.buildCollectionParam(opts['filterEventState'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppEventsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppEventsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppEventsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppEventsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppEventsLinkagesResponse}
     */
    appsAppEventsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppEventsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppEventsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppInfosGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppInfosGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInfosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppInfoLocalizations] the fields to include for returned resources of type appInfoLocalizations
     * @param {Array.<module:model/String>} [fieldsAppCategories] the fields to include for returned resources of type appCategories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppInfoLocalizations] maximum number of related appInfoLocalizations returned (when they are included)
     * @param {module:api/AppsApi~appsAppInfosGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInfosResponse}
     */
    appsAppInfosGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppInfosGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appInfoLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppInfoLocalizations'], 'csv'),
        'fields[appCategories]': this.apiClient.buildCollectionParam(opts['fieldsAppCategories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appInfoLocalizations]': opts['limitAppInfoLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInfosResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appInfos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppInfosGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppInfosGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppInfosLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppInfosGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppInfosLinkagesResponse}
     */
    appsAppInfosGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppInfosGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppInfosLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appInfos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppPricePointsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppPricePointsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPricePointsV3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsAppPricePoints] the fields to include for returned resources of type appPricePoints
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsAppPricePointsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPricePointsV3Response}
     */
    appsAppPricePointsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppPricePointsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[appPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsAppPricePoints'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = AppPricePointsV3Response;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appPricePoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppPricePointsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppPricePointsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppPricePointsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppPricePointsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppPricePointsLinkagesResponse}
     */
    appsAppPricePointsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppPricePointsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppPricePointsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appPricePoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppPriceScheduleGetToOneRelated operation.
     * @callback module:api/AppsApi~appsAppPriceScheduleGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPriceScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppPriceSchedules] the fields to include for returned resources of type appPriceSchedules
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [fieldsAppPrices] the fields to include for returned resources of type appPrices
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitManualPrices] maximum number of related manualPrices returned (when they are included)
     * @param {Number} [limitAutomaticPrices] maximum number of related automaticPrices returned (when they are included)
     * @param {module:api/AppsApi~appsAppPriceScheduleGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPriceScheduleResponse}
     */
    appsAppPriceScheduleGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppPriceScheduleGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appPriceSchedules]': this.apiClient.buildCollectionParam(opts['fieldsAppPriceSchedules'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'fields[appPrices]': this.apiClient.buildCollectionParam(opts['fieldsAppPrices'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[manualPrices]': opts['limitManualPrices'],
        'limit[automaticPrices]': opts['limitAutomaticPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPriceScheduleResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appPriceSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppPriceScheduleGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsAppPriceScheduleGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppPriceScheduleLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsAppPriceScheduleGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppPriceScheduleLinkageResponse}
     */
    appsAppPriceScheduleGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppPriceScheduleGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppPriceScheduleLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appPriceSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppStoreVersionExperimentsV2GetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppStoreVersionExperimentsV2GetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitControlVersions] maximum number of related controlVersions returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentTreatments] maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
     * @param {module:api/AppsApi~appsAppStoreVersionExperimentsV2GetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentsV2Response}
     */
    appsAppStoreVersionExperimentsV2GetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppStoreVersionExperimentsV2GetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[controlVersions]': opts['limitControlVersions'],
        'limit[appStoreVersionExperimentTreatments]': opts['limitAppStoreVersionExperimentTreatments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentsV2Response;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appStoreVersionExperimentsV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppStoreVersionExperimentsV2GetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppStoreVersionExperimentsV2GetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppStoreVersionExperimentsV2LinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppStoreVersionExperimentsV2GetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppStoreVersionExperimentsV2LinkagesResponse}
     */
    appsAppStoreVersionExperimentsV2GetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppStoreVersionExperimentsV2GetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppStoreVersionExperimentsV2LinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appStoreVersionExperimentsV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppStoreVersionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppStoreVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterVersionString] filter by attribute 'versionString'
     * @param {Array.<module:model/String>} [filterAppStoreState] filter by attribute 'appStoreState'
     * @param {Array.<module:model/String>} [filterAppVersionState] filter by attribute 'appVersionState'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackages] the fields to include for returned resources of type alternativeDistributionPackages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionLocalizations] maximum number of related appStoreVersionLocalizations returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperiments] maximum number of related appStoreVersionExperiments returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {module:api/AppsApi~appsAppStoreVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionsResponse}
     */
    appsAppStoreVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppStoreVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[versionString]': this.apiClient.buildCollectionParam(opts['filterVersionString'], 'csv'),
        'filter[appStoreState]': this.apiClient.buildCollectionParam(opts['filterAppStoreState'], 'csv'),
        'filter[appVersionState]': this.apiClient.buildCollectionParam(opts['filterAppVersionState'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[alternativeDistributionPackages]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionLocalizations]': opts['limitAppStoreVersionLocalizations'],
        'limit[appStoreVersionExperiments]': opts['limitAppStoreVersionExperiments'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appStoreVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppStoreVersionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppStoreVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppStoreVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppStoreVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppStoreVersionsLinkagesResponse}
     */
    appsAppStoreVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppStoreVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppStoreVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appStoreVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppTagsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsAppTagsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterVisibleInAppStore] filter by attribute 'visibleInAppStore'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsAppTags] the fields to include for returned resources of type appTags
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitTerritories] maximum number of related territories returned (when they are included)
     * @param {module:api/AppsApi~appsAppTagsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppTagsResponse}
     */
    appsAppTagsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppTagsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[visibleInAppStore]': this.apiClient.buildCollectionParam(opts['filterVisibleInAppStore'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[appTags]': this.apiClient.buildCollectionParam(opts['fieldsAppTags'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[territories]': opts['limitTerritories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppTagsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/appTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppTagsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsAppTagsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppAppTagsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsAppTagsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppAppTagsLinkagesResponse}
     */
    appsAppTagsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsAppTagsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppAppTagsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/appTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBackgroundAssetsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBackgroundAssetsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundAssetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterAssetPackIdentifier] filter by attribute 'assetPackIdentifier'
     * @param {Array.<module:model/String>} [fieldsBackgroundAssets] the fields to include for returned resources of type backgroundAssets
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBackgroundAssetVersions] the fields to include for returned resources of type backgroundAssetVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsBackgroundAssetsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackgroundAssetsResponse}
     */
    appsBackgroundAssetsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBackgroundAssetsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[assetPackIdentifier]': this.apiClient.buildCollectionParam(opts['filterAssetPackIdentifier'], 'csv'),
        'fields[backgroundAssets]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssets'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[backgroundAssetVersions]': this.apiClient.buildCollectionParam(opts['fieldsBackgroundAssetVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackgroundAssetsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/backgroundAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBackgroundAssetsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBackgroundAssetsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBackgroundAssetsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBackgroundAssetsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBackgroundAssetsLinkagesResponse}
     */
    appsBackgroundAssetsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBackgroundAssetsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBackgroundAssetsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/backgroundAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaAppLocalizationsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBetaAppLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppLocalizationsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaAppLocalizations] the fields to include for returned resources of type betaAppLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaAppLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppLocalizationsWithoutIncludesResponse}
     */
    appsBetaAppLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaAppLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaAppLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppLocalizations'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppLocalizationsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaAppLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaAppLocalizationsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBetaAppLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaAppLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaAppLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaAppLocalizationsLinkagesResponse}
     */
    appsBetaAppLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaAppLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaAppLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaAppLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaAppReviewDetailGetToOneRelated operation.
     * @callback module:api/AppsApi~appsBetaAppReviewDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewDetailWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewDetails] the fields to include for returned resources of type betaAppReviewDetails
     * @param {module:api/AppsApi~appsBetaAppReviewDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewDetailWithoutIncludesResponse}
     */
    appsBetaAppReviewDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaAppReviewDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaAppReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewDetails'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewDetailWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaAppReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaAppReviewDetailGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsBetaAppReviewDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaAppReviewDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsBetaAppReviewDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaAppReviewDetailLinkageResponse}
     */
    appsBetaAppReviewDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaAppReviewDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaAppReviewDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaAppReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaFeedbackCrashSubmissionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBetaFeedbackCrashSubmissionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaFeedbackCrashSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterDeviceModel] filter by attribute 'deviceModel'
     * @param {Array.<String>} [filterOsVersion] filter by attribute 'osVersion'
     * @param {Array.<module:model/String>} [filterAppPlatform] filter by attribute 'appPlatform'
     * @param {Array.<module:model/String>} [filterDevicePlatform] filter by attribute 'devicePlatform'
     * @param {Array.<String>} [filterBuild] filter by id(s) of related 'build'
     * @param {Array.<String>} [filterBuildPreReleaseVersion] filter by id(s) of related 'build.preReleaseVersion'
     * @param {Array.<String>} [filterTester] filter by id(s) of related 'tester'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBetaFeedbackCrashSubmissions] the fields to include for returned resources of type betaFeedbackCrashSubmissions
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsBetaFeedbackCrashSubmissionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaFeedbackCrashSubmissionsResponse}
     */
    appsBetaFeedbackCrashSubmissionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaFeedbackCrashSubmissionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[deviceModel]': this.apiClient.buildCollectionParam(opts['filterDeviceModel'], 'csv'),
        'filter[osVersion]': this.apiClient.buildCollectionParam(opts['filterOsVersion'], 'csv'),
        'filter[appPlatform]': this.apiClient.buildCollectionParam(opts['filterAppPlatform'], 'csv'),
        'filter[devicePlatform]': this.apiClient.buildCollectionParam(opts['filterDevicePlatform'], 'csv'),
        'filter[build]': this.apiClient.buildCollectionParam(opts['filterBuild'], 'csv'),
        'filter[build.preReleaseVersion]': this.apiClient.buildCollectionParam(opts['filterBuildPreReleaseVersion'], 'csv'),
        'filter[tester]': this.apiClient.buildCollectionParam(opts['filterTester'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[betaFeedbackCrashSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaFeedbackCrashSubmissions'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaFeedbackCrashSubmissionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaFeedbackCrashSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaFeedbackCrashSubmissionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBetaFeedbackCrashSubmissionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaFeedbackCrashSubmissionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaFeedbackCrashSubmissionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaFeedbackCrashSubmissionsLinkagesResponse}
     */
    appsBetaFeedbackCrashSubmissionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaFeedbackCrashSubmissionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaFeedbackCrashSubmissionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaFeedbackCrashSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaFeedbackScreenshotSubmissionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBetaFeedbackScreenshotSubmissionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaFeedbackScreenshotSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterDeviceModel] filter by attribute 'deviceModel'
     * @param {Array.<String>} [filterOsVersion] filter by attribute 'osVersion'
     * @param {Array.<module:model/String>} [filterAppPlatform] filter by attribute 'appPlatform'
     * @param {Array.<module:model/String>} [filterDevicePlatform] filter by attribute 'devicePlatform'
     * @param {Array.<String>} [filterBuild] filter by id(s) of related 'build'
     * @param {Array.<String>} [filterBuildPreReleaseVersion] filter by id(s) of related 'build.preReleaseVersion'
     * @param {Array.<String>} [filterTester] filter by id(s) of related 'tester'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBetaFeedbackScreenshotSubmissions] the fields to include for returned resources of type betaFeedbackScreenshotSubmissions
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsBetaFeedbackScreenshotSubmissionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaFeedbackScreenshotSubmissionsResponse}
     */
    appsBetaFeedbackScreenshotSubmissionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaFeedbackScreenshotSubmissionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[deviceModel]': this.apiClient.buildCollectionParam(opts['filterDeviceModel'], 'csv'),
        'filter[osVersion]': this.apiClient.buildCollectionParam(opts['filterOsVersion'], 'csv'),
        'filter[appPlatform]': this.apiClient.buildCollectionParam(opts['filterAppPlatform'], 'csv'),
        'filter[devicePlatform]': this.apiClient.buildCollectionParam(opts['filterDevicePlatform'], 'csv'),
        'filter[build]': this.apiClient.buildCollectionParam(opts['filterBuild'], 'csv'),
        'filter[build.preReleaseVersion]': this.apiClient.buildCollectionParam(opts['filterBuildPreReleaseVersion'], 'csv'),
        'filter[tester]': this.apiClient.buildCollectionParam(opts['filterTester'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[betaFeedbackScreenshotSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaFeedbackScreenshotSubmissions'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaFeedbackScreenshotSubmissionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaFeedbackScreenshotSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaFeedbackScreenshotSubmissionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaFeedbackScreenshotSubmissionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaFeedbackScreenshotSubmissionsLinkagesResponse}
     */
    appsBetaFeedbackScreenshotSubmissionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaFeedbackScreenshotSubmissionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaFeedbackScreenshotSubmissionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaFeedbackScreenshotSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaGroupsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBetaGroupsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaGroupsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaGroupsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaGroupsWithoutIncludesResponse}
     */
    appsBetaGroupsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaGroupsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaGroupsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaGroupsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBetaGroupsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaGroupsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBetaGroupsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaGroupsLinkagesResponse}
     */
    appsBetaGroupsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaGroupsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaGroupsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaLicenseAgreementGetToOneRelated operation.
     * @callback module:api/AppsApi~appsBetaLicenseAgreementGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaLicenseAgreementWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaLicenseAgreements] the fields to include for returned resources of type betaLicenseAgreements
     * @param {module:api/AppsApi~appsBetaLicenseAgreementGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaLicenseAgreementWithoutIncludesResponse}
     */
    appsBetaLicenseAgreementGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaLicenseAgreementGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsBetaLicenseAgreements'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaLicenseAgreementWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/betaLicenseAgreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaLicenseAgreementGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsBetaLicenseAgreementGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBetaLicenseAgreementLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsBetaLicenseAgreementGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBetaLicenseAgreementLinkageResponse}
     */
    appsBetaLicenseAgreementGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaLicenseAgreementGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBetaLicenseAgreementLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaLicenseAgreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaTesterUsagesGetMetrics operation.
     * @callback module:api/AppsApi~appsBetaTesterUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsBetaTesterUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period] the duration of the reporting period
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterBetaTesters] filter by 'betaTesters' relationship dimension
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/AppsApi~appsBetaTesterUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsBetaTesterUsagesV1MetricResponse}
     */
    appsBetaTesterUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaTesterUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'period': opts['period'],
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[betaTesters]': opts['filterBetaTesters'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsBetaTesterUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/metrics/betaTesterUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBetaTestersDeleteToManyRelationship operation.
     * @callback module:api/AppsApi~appsBetaTestersDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppBetaTestersLinkagesRequest} appBetaTestersLinkagesRequest List of related linkages
     * @param {module:api/AppsApi~appsBetaTestersDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsBetaTestersDeleteToManyRelationship(id, appBetaTestersLinkagesRequest, callback) {
      let postBody = appBetaTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBetaTestersDeleteToManyRelationship");
      }
      // verify the required parameter 'appBetaTestersLinkagesRequest' is set
      if (appBetaTestersLinkagesRequest === undefined || appBetaTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'appBetaTestersLinkagesRequest' when calling appsBetaTestersDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/betaTesters', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBuildUploadsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBuildUploadsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildUploadsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterCfBundleShortVersionString] filter by attribute 'cfBundleShortVersionString'
     * @param {Array.<String>} [filterCfBundleVersion] filter by attribute 'cfBundleVersion'
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterState] filter by state
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBuildUploads] the fields to include for returned resources of type buildUploads
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBuildUploadFiles] the fields to include for returned resources of type buildUploadFiles
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsBuildUploadsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildUploadsResponse}
     */
    appsBuildUploadsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBuildUploadsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[cfBundleShortVersionString]': this.apiClient.buildCollectionParam(opts['filterCfBundleShortVersionString'], 'csv'),
        'filter[cfBundleVersion]': this.apiClient.buildCollectionParam(opts['filterCfBundleVersion'], 'csv'),
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[buildUploads]': this.apiClient.buildCollectionParam(opts['fieldsBuildUploads'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[buildUploadFiles]': this.apiClient.buildCollectionParam(opts['fieldsBuildUploadFiles'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildUploadsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/buildUploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBuildUploadsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBuildUploadsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBuildUploadsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBuildUploadsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBuildUploadsLinkagesResponse}
     */
    appsBuildUploadsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBuildUploadsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBuildUploadsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/buildUploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBuildsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsBuildsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBuildsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsWithoutIncludesResponse}
     */
    appsBuildsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBuildsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBuildsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsBuildsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppBuildsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsBuildsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppBuildsLinkagesResponse}
     */
    appsBuildsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsBuildsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppBuildsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCiProductGetToOneRelated operation.
     * @callback module:api/AppsApi~appsCiProductGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBundleIds] the fields to include for returned resources of type bundleIds
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrimaryRepositories] maximum number of related primaryRepositories returned (when they are included)
     * @param {module:api/AppsApi~appsCiProductGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductResponse}
     */
    appsCiProductGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsCiProductGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[bundleIds]': this.apiClient.buildCollectionParam(opts['fieldsBundleIds'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[primaryRepositories]': opts['limitPrimaryRepositories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/ciProduct', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCiProductGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsCiProductGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCiProductLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsCiProductGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCiProductLinkageResponse}
     */
    appsCiProductGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsCiProductGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCiProductLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/ciProduct', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCustomerReviewSummarizationsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsCustomerReviewSummarizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerReviewSummarizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Array.<module:model/String>} filterPlatform filter by attribute 'platform'
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsCustomerReviewSummarizations] the fields to include for returned resources of type customerReviewSummarizations
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsCustomerReviewSummarizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerReviewSummarizationsResponse}
     */
    appsCustomerReviewSummarizationsGetToManyRelated(id, filterPlatform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsCustomerReviewSummarizationsGetToManyRelated");
      }
      // verify the required parameter 'filterPlatform' is set
      if (filterPlatform === undefined || filterPlatform === null) {
        throw new Error("Missing the required parameter 'filterPlatform' when calling appsCustomerReviewSummarizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(filterPlatform, 'csv'),
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[customerReviewSummarizations]': this.apiClient.buildCollectionParam(opts['fieldsCustomerReviewSummarizations'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerReviewSummarizationsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/customerReviewSummarizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCustomerReviewsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsCustomerReviewsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerReviewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterTerritory] filter by attribute 'territory'
     * @param {Array.<String>} [filterRating] filter by attribute 'rating'
     * @param {Boolean} [existsPublishedResponse] filter by publishedResponse
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsCustomerReviews] the fields to include for returned resources of type customerReviews
     * @param {Array.<module:model/String>} [fieldsCustomerReviewResponses] the fields to include for returned resources of type customerReviewResponses
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsCustomerReviewsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerReviewsResponse}
     */
    appsCustomerReviewsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsCustomerReviewsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'filter[rating]': this.apiClient.buildCollectionParam(opts['filterRating'], 'csv'),
        'exists[publishedResponse]': opts['existsPublishedResponse'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[customerReviews]': this.apiClient.buildCollectionParam(opts['fieldsCustomerReviews'], 'csv'),
        'fields[customerReviewResponses]': this.apiClient.buildCollectionParam(opts['fieldsCustomerReviewResponses'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerReviewsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/customerReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCustomerReviewsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsCustomerReviewsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCustomerReviewsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsCustomerReviewsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCustomerReviewsLinkagesResponse}
     */
    appsCustomerReviewsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsCustomerReviewsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppCustomerReviewsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/customerReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsEndUserLicenseAgreementGetToOneRelated operation.
     * @callback module:api/AppsApi~appsEndUserLicenseAgreementGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndUserLicenseAgreementWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsEndUserLicenseAgreements] the fields to include for returned resources of type endUserLicenseAgreements
     * @param {module:api/AppsApi~appsEndUserLicenseAgreementGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndUserLicenseAgreementWithoutIncludesResponse}
     */
    appsEndUserLicenseAgreementGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsEndUserLicenseAgreementGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[endUserLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsEndUserLicenseAgreements'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndUserLicenseAgreementWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/endUserLicenseAgreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsEndUserLicenseAgreementGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsEndUserLicenseAgreementGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEndUserLicenseAgreementLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsEndUserLicenseAgreementGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEndUserLicenseAgreementLinkageResponse}
     */
    appsEndUserLicenseAgreementGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsEndUserLicenseAgreementGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEndUserLicenseAgreementLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/endUserLicenseAgreement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGameCenterDetailGetToOneRelated operation.
     * @callback module:api/AppsApi~appsGameCenterDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersionReleases] the fields to include for returned resources of type gameCenterActivityVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersionReleases] the fields to include for returned resources of type gameCenterChallengeVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterAppVersions] maximum number of related gameCenterAppVersions returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {Number} [limitAchievementReleases] maximum number of related achievementReleases returned (when they are included)
     * @param {Number} [limitActivityReleases] maximum number of related activityReleases returned (when they are included)
     * @param {Number} [limitChallengeReleases] maximum number of related challengeReleases returned (when they are included)
     * @param {Number} [limitLeaderboardReleases] maximum number of related leaderboardReleases returned (when they are included)
     * @param {Number} [limitLeaderboardSetReleases] maximum number of related leaderboardSetReleases returned (when they are included)
     * @param {Number} [limitChallengesMinimumPlatformVersions] maximum number of related challengesMinimumPlatformVersions returned (when they are included)
     * @param {module:api/AppsApi~appsGameCenterDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailResponse}
     */
    appsGameCenterDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsGameCenterDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivityVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersionReleases'], 'csv'),
        'fields[gameCenterChallengeVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersionReleases'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterAppVersions]': opts['limitGameCenterAppVersions'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges'],
        'limit[achievementReleases]': opts['limitAchievementReleases'],
        'limit[activityReleases]': opts['limitActivityReleases'],
        'limit[challengeReleases]': opts['limitChallengeReleases'],
        'limit[leaderboardReleases]': opts['limitLeaderboardReleases'],
        'limit[leaderboardSetReleases]': opts['limitLeaderboardSetReleases'],
        'limit[challengesMinimumPlatformVersions]': opts['limitChallengesMinimumPlatformVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/gameCenterDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGameCenterDetailGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsGameCenterDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppGameCenterDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsGameCenterDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppGameCenterDetailLinkageResponse}
     */
    appsGameCenterDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsGameCenterDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppGameCenterDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/gameCenterDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGameCenterEnabledVersionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsGameCenterEnabledVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterEnabledVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<String>} [filterVersionString] filter by attribute 'versionString'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsGameCenterEnabledVersions] the fields to include for returned resources of type gameCenterEnabledVersions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCompatibleVersions] maximum number of related compatibleVersions returned (when they are included)
     * @param {module:api/AppsApi~appsGameCenterEnabledVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterEnabledVersionsResponse}
     */
    appsGameCenterEnabledVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsGameCenterEnabledVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[versionString]': this.apiClient.buildCollectionParam(opts['filterVersionString'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[gameCenterEnabledVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterEnabledVersions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[compatibleVersions]': opts['limitCompatibleVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterEnabledVersionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/gameCenterEnabledVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGameCenterEnabledVersionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsGameCenterEnabledVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppGameCenterEnabledVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsGameCenterEnabledVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppGameCenterEnabledVersionsLinkagesResponse}
     */
    appsGameCenterEnabledVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsGameCenterEnabledVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppGameCenterEnabledVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/gameCenterEnabledVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetCollection operation.
     * @callback module:api/AppsApi~appsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<String>} [filterBundleId] filter by attribute 'bundleId'
     * @param {Array.<String>} [filterSku] filter by attribute 'sku'
     * @param {Array.<module:model/String>} [filterAppStoreVersionsAppStoreState] filter by attribute 'appStoreVersions.appStoreState'
     * @param {Array.<module:model/String>} [filterAppStoreVersionsPlatform] filter by attribute 'appStoreVersions.platform'
     * @param {Array.<module:model/String>} [filterAppStoreVersionsAppVersionState] filter by attribute 'appStoreVersions.appVersionState'
     * @param {Array.<module:model/String>} [filterReviewSubmissionsState] filter by attribute 'reviewSubmissions.state'
     * @param {Array.<module:model/String>} [filterReviewSubmissionsPlatform] filter by attribute 'reviewSubmissions.platform'
     * @param {Array.<String>} [filterAppStoreVersions] filter by id(s) of related 'appStoreVersions'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Boolean} [existsGameCenterEnabledVersions] filter by existence or non-existence of related 'gameCenterEnabledVersions'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaAppLocalizations] the fields to include for returned resources of type betaAppLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaLicenseAgreements] the fields to include for returned resources of type betaLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewDetails] the fields to include for returned resources of type betaAppReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsEndUserLicenseAgreements] the fields to include for returned resources of type endUserLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterEnabledVersions] the fields to include for returned resources of type gameCenterEnabledVersions
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPages] the fields to include for returned resources of type appCustomProductPages
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsSubscriptionGracePeriods] the fields to include for returned resources of type subscriptionGracePeriods
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClips] maximum number of related appClips returned (when they are included)
     * @param {Number} [limitAppCustomProductPages] maximum number of related appCustomProductPages returned (when they are included)
     * @param {Number} [limitAppEncryptionDeclarations] maximum number of related appEncryptionDeclarations returned (when they are included)
     * @param {Number} [limitAppEvents] maximum number of related appEvents returned (when they are included)
     * @param {Number} [limitAppInfos] maximum number of related appInfos returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {Number} [limitAppStoreVersions] maximum number of related appStoreVersions returned (when they are included)
     * @param {Number} [limitBetaAppLocalizations] maximum number of related betaAppLocalizations returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {Number} [limitGameCenterEnabledVersions] maximum number of related gameCenterEnabledVersions returned (when they are included)
     * @param {Number} [limitInAppPurchases] maximum number of related inAppPurchases returned (when they are included)
     * @param {Number} [limitInAppPurchasesV2] maximum number of related inAppPurchasesV2 returned (when they are included)
     * @param {Number} [limitPreReleaseVersions] maximum number of related preReleaseVersions returned (when they are included)
     * @param {Number} [limitPromotedPurchases] maximum number of related promotedPurchases returned (when they are included)
     * @param {Number} [limitReviewSubmissions] maximum number of related reviewSubmissions returned (when they are included)
     * @param {Number} [limitSubscriptionGroups] maximum number of related subscriptionGroups returned (when they are included)
     * @param {module:api/AppsApi~appsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsResponse}
     */
    appsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[bundleId]': this.apiClient.buildCollectionParam(opts['filterBundleId'], 'csv'),
        'filter[sku]': this.apiClient.buildCollectionParam(opts['filterSku'], 'csv'),
        'filter[appStoreVersions.appStoreState]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersionsAppStoreState'], 'csv'),
        'filter[appStoreVersions.platform]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersionsPlatform'], 'csv'),
        'filter[appStoreVersions.appVersionState]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersionsAppVersionState'], 'csv'),
        'filter[reviewSubmissions.state]': this.apiClient.buildCollectionParam(opts['filterReviewSubmissionsState'], 'csv'),
        'filter[reviewSubmissions.platform]': this.apiClient.buildCollectionParam(opts['filterReviewSubmissionsPlatform'], 'csv'),
        'filter[appStoreVersions]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersions'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'exists[gameCenterEnabledVersions]': opts['existsGameCenterEnabledVersions'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaAppLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsBetaLicenseAgreements'], 'csv'),
        'fields[betaAppReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewDetails'], 'csv'),
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[endUserLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsEndUserLicenseAgreements'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[gameCenterEnabledVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterEnabledVersions'], 'csv'),
        'fields[appCustomProductPages]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPages'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[subscriptionGracePeriods]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGracePeriods'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClips]': opts['limitAppClips'],
        'limit[appCustomProductPages]': opts['limitAppCustomProductPages'],
        'limit[appEncryptionDeclarations]': opts['limitAppEncryptionDeclarations'],
        'limit[appEvents]': opts['limitAppEvents'],
        'limit[appInfos]': opts['limitAppInfos'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2'],
        'limit[appStoreVersions]': opts['limitAppStoreVersions'],
        'limit[betaAppLocalizations]': opts['limitBetaAppLocalizations'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[builds]': opts['limitBuilds'],
        'limit[gameCenterEnabledVersions]': opts['limitGameCenterEnabledVersions'],
        'limit[inAppPurchases]': opts['limitInAppPurchases'],
        'limit[inAppPurchasesV2]': opts['limitInAppPurchasesV2'],
        'limit[preReleaseVersions]': opts['limitPreReleaseVersions'],
        'limit[promotedPurchases]': opts['limitPromotedPurchases'],
        'limit[reviewSubmissions]': opts['limitReviewSubmissions'],
        'limit[subscriptionGroups]': opts['limitSubscriptionGroups']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsResponse;
      return this.apiClient.callApi(
        '/v1/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetInstance operation.
     * @callback module:api/AppsApi~appsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaAppLocalizations] the fields to include for returned resources of type betaAppLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaLicenseAgreements] the fields to include for returned resources of type betaLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewDetails] the fields to include for returned resources of type betaAppReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsEndUserLicenseAgreements] the fields to include for returned resources of type endUserLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterEnabledVersions] the fields to include for returned resources of type gameCenterEnabledVersions
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPages] the fields to include for returned resources of type appCustomProductPages
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsSubscriptionGracePeriods] the fields to include for returned resources of type subscriptionGracePeriods
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClips] maximum number of related appClips returned (when they are included)
     * @param {Number} [limitAppCustomProductPages] maximum number of related appCustomProductPages returned (when they are included)
     * @param {Number} [limitAppEncryptionDeclarations] maximum number of related appEncryptionDeclarations returned (when they are included)
     * @param {Number} [limitAppEvents] maximum number of related appEvents returned (when they are included)
     * @param {Number} [limitAppInfos] maximum number of related appInfos returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {Number} [limitAppStoreVersions] maximum number of related appStoreVersions returned (when they are included)
     * @param {Number} [limitBetaAppLocalizations] maximum number of related betaAppLocalizations returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {Number} [limitGameCenterEnabledVersions] maximum number of related gameCenterEnabledVersions returned (when they are included)
     * @param {Number} [limitInAppPurchases] maximum number of related inAppPurchases returned (when they are included)
     * @param {Number} [limitInAppPurchasesV2] maximum number of related inAppPurchasesV2 returned (when they are included)
     * @param {Number} [limitPreReleaseVersions] maximum number of related preReleaseVersions returned (when they are included)
     * @param {Number} [limitPromotedPurchases] maximum number of related promotedPurchases returned (when they are included)
     * @param {Number} [limitReviewSubmissions] maximum number of related reviewSubmissions returned (when they are included)
     * @param {Number} [limitSubscriptionGroups] maximum number of related subscriptionGroups returned (when they are included)
     * @param {module:api/AppsApi~appsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    appsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaAppLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsBetaLicenseAgreements'], 'csv'),
        'fields[betaAppReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewDetails'], 'csv'),
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[endUserLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsEndUserLicenseAgreements'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[gameCenterEnabledVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterEnabledVersions'], 'csv'),
        'fields[appCustomProductPages]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPages'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[subscriptionGracePeriods]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGracePeriods'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClips]': opts['limitAppClips'],
        'limit[appCustomProductPages]': opts['limitAppCustomProductPages'],
        'limit[appEncryptionDeclarations]': opts['limitAppEncryptionDeclarations'],
        'limit[appEvents]': opts['limitAppEvents'],
        'limit[appInfos]': opts['limitAppInfos'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2'],
        'limit[appStoreVersions]': opts['limitAppStoreVersions'],
        'limit[betaAppLocalizations]': opts['limitBetaAppLocalizations'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[builds]': opts['limitBuilds'],
        'limit[gameCenterEnabledVersions]': opts['limitGameCenterEnabledVersions'],
        'limit[inAppPurchases]': opts['limitInAppPurchases'],
        'limit[inAppPurchasesV2]': opts['limitInAppPurchasesV2'],
        'limit[preReleaseVersions]': opts['limitPreReleaseVersions'],
        'limit[promotedPurchases]': opts['limitPromotedPurchases'],
        'limit[reviewSubmissions]': opts['limitReviewSubmissions'],
        'limit[subscriptionGroups]': opts['limitSubscriptionGroups']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsInAppPurchasesGetToManyRelated operation.
     * @callback module:api/AppsApi~appsInAppPurchasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InAppPurchasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterInAppPurchaseType] filter by attribute 'inAppPurchaseType'
     * @param {Array.<String>} [filterCanBeSubmitted] filter by canBeSubmitted
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitApps] maximum number of related apps returned (when they are included)
     * @param {module:api/AppsApi~appsInAppPurchasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InAppPurchasesResponse}
     */
    appsInAppPurchasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsInAppPurchasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[inAppPurchaseType]': this.apiClient.buildCollectionParam(opts['filterInAppPurchaseType'], 'csv'),
        'filter[canBeSubmitted]': this.apiClient.buildCollectionParam(opts['filterCanBeSubmitted'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[apps]': opts['limitApps']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InAppPurchasesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/inAppPurchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsInAppPurchasesGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsInAppPurchasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInAppPurchasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsInAppPurchasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInAppPurchasesLinkagesResponse}
     */
    appsInAppPurchasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsInAppPurchasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInAppPurchasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/inAppPurchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsInAppPurchasesV2GetToManyRelated operation.
     * @callback module:api/AppsApi~appsInAppPurchasesV2GetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InAppPurchasesV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterProductId] filter by attribute 'productId'
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [filterInAppPurchaseType] filter by attribute 'inAppPurchaseType'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsInAppPurchaseLocalizations] the fields to include for returned resources of type inAppPurchaseLocalizations
     * @param {Array.<module:model/String>} [fieldsInAppPurchaseContents] the fields to include for returned resources of type inAppPurchaseContents
     * @param {Array.<module:model/String>} [fieldsInAppPurchaseAppStoreReviewScreenshots] the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsInAppPurchasePriceSchedules] the fields to include for returned resources of type inAppPurchasePriceSchedules
     * @param {Array.<module:model/String>} [fieldsInAppPurchaseAvailabilities] the fields to include for returned resources of type inAppPurchaseAvailabilities
     * @param {Array.<module:model/String>} [fieldsInAppPurchaseImages] the fields to include for returned resources of type inAppPurchaseImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitInAppPurchaseLocalizations] maximum number of related inAppPurchaseLocalizations returned (when they are included)
     * @param {Number} [limitImages] maximum number of related images returned (when they are included)
     * @param {module:api/AppsApi~appsInAppPurchasesV2GetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InAppPurchasesV2Response}
     */
    appsInAppPurchasesV2GetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsInAppPurchasesV2GetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[productId]': this.apiClient.buildCollectionParam(opts['filterProductId'], 'csv'),
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'filter[inAppPurchaseType]': this.apiClient.buildCollectionParam(opts['filterInAppPurchaseType'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[inAppPurchaseLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchaseLocalizations'], 'csv'),
        'fields[inAppPurchaseContents]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchaseContents'], 'csv'),
        'fields[inAppPurchaseAppStoreReviewScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchaseAppStoreReviewScreenshots'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[inAppPurchasePriceSchedules]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchasePriceSchedules'], 'csv'),
        'fields[inAppPurchaseAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchaseAvailabilities'], 'csv'),
        'fields[inAppPurchaseImages]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchaseImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[inAppPurchaseLocalizations]': opts['limitInAppPurchaseLocalizations'],
        'limit[images]': opts['limitImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InAppPurchasesV2Response;
      return this.apiClient.callApi(
        '/v1/apps/{id}/inAppPurchasesV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsInAppPurchasesV2GetToManyRelationship operation.
     * @callback module:api/AppsApi~appsInAppPurchasesV2GetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInAppPurchasesV2LinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsInAppPurchasesV2GetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInAppPurchasesV2LinkagesResponse}
     */
    appsInAppPurchasesV2GetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsInAppPurchasesV2GetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInAppPurchasesV2LinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/inAppPurchasesV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsMarketplaceSearchDetailGetToOneRelated operation.
     * @callback module:api/AppsApi~appsMarketplaceSearchDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplaceSearchDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsMarketplaceSearchDetails] the fields to include for returned resources of type marketplaceSearchDetails
     * @param {module:api/AppsApi~appsMarketplaceSearchDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplaceSearchDetailResponse}
     */
    appsMarketplaceSearchDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsMarketplaceSearchDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[marketplaceSearchDetails]': this.apiClient.buildCollectionParam(opts['fieldsMarketplaceSearchDetails'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketplaceSearchDetailResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/marketplaceSearchDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsMarketplaceSearchDetailGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsMarketplaceSearchDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppMarketplaceSearchDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsMarketplaceSearchDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppMarketplaceSearchDetailLinkageResponse}
     */
    appsMarketplaceSearchDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsMarketplaceSearchDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppMarketplaceSearchDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/marketplaceSearchDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPerfPowerMetricsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsPerfPowerMetricsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XcodeMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<module:model/String>} [filterMetricType] filter by attribute 'metricType'
     * @param {Array.<String>} [filterDeviceType] filter by attribute 'deviceType'
     * @param {module:api/AppsApi~appsPerfPowerMetricsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XcodeMetrics}
     */
    appsPerfPowerMetricsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPerfPowerMetricsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[metricType]': this.apiClient.buildCollectionParam(opts['filterMetricType'], 'csv'),
        'filter[deviceType]': this.apiClient.buildCollectionParam(opts['filterDeviceType'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.apple.xcode-metrics+json'];
      let returnType = XcodeMetrics;
      return this.apiClient.callApi(
        '/v1/apps/{id}/perfPowerMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPreReleaseVersionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsPreReleaseVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReleaseVersionsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsPreReleaseVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReleaseVersionsWithoutIncludesResponse}
     */
    appsPreReleaseVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPreReleaseVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreReleaseVersionsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/preReleaseVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPreReleaseVersionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsPreReleaseVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPreReleaseVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsPreReleaseVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPreReleaseVersionsLinkagesResponse}
     */
    appsPreReleaseVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPreReleaseVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPreReleaseVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/preReleaseVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPromotedPurchasesGetToManyRelated operation.
     * @callback module:api/AppsApi~appsPromotedPurchasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedPurchasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsPromotedPurchasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedPurchasesResponse}
     */
    appsPromotedPurchasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPromotedPurchasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromotedPurchasesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/promotedPurchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPromotedPurchasesGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsPromotedPurchasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPromotedPurchasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsPromotedPurchasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPromotedPurchasesLinkagesResponse}
     */
    appsPromotedPurchasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPromotedPurchasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPromotedPurchasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/promotedPurchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPromotedPurchasesReplaceToManyRelationship operation.
     * @callback module:api/AppsApi~appsPromotedPurchasesReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppPromotedPurchasesLinkagesRequest} appPromotedPurchasesLinkagesRequest List of related linkages
     * @param {module:api/AppsApi~appsPromotedPurchasesReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsPromotedPurchasesReplaceToManyRelationship(id, appPromotedPurchasesLinkagesRequest, callback) {
      let postBody = appPromotedPurchasesLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsPromotedPurchasesReplaceToManyRelationship");
      }
      // verify the required parameter 'appPromotedPurchasesLinkagesRequest' is set
      if (appPromotedPurchasesLinkagesRequest === undefined || appPromotedPurchasesLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'appPromotedPurchasesLinkagesRequest' when calling appsPromotedPurchasesReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/promotedPurchases', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsReviewSubmissionsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsReviewSubmissionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewSubmissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsReviewSubmissionItems] the fields to include for returned resources of type reviewSubmissionItems
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsActors] the fields to include for returned resources of type actors
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitItems] maximum number of related items returned (when they are included)
     * @param {module:api/AppsApi~appsReviewSubmissionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewSubmissionsResponse}
     */
    appsReviewSubmissionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsReviewSubmissionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[reviewSubmissionItems]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissionItems'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[actors]': this.apiClient.buildCollectionParam(opts['fieldsActors'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[items]': opts['limitItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewSubmissionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/reviewSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsReviewSubmissionsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsReviewSubmissionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppReviewSubmissionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsReviewSubmissionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppReviewSubmissionsLinkagesResponse}
     */
    appsReviewSubmissionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsReviewSubmissionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppReviewSubmissionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/reviewSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSearchKeywordsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsSearchKeywordsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppKeywordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterPlatform] filter by platform
     * @param {Array.<String>} [filterLocale] filter by locale
     * @param {Array.<String>} [fieldsAppKeywords] the fields to include for returned resources of type appKeywords
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsSearchKeywordsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppKeywordsResponse}
     */
    appsSearchKeywordsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSearchKeywordsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'fields[appKeywords]': this.apiClient.buildCollectionParam(opts['fieldsAppKeywords'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppKeywordsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/searchKeywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSearchKeywordsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsSearchKeywordsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppSearchKeywordsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsSearchKeywordsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppSearchKeywordsLinkagesResponse}
     */
    appsSearchKeywordsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSearchKeywordsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppSearchKeywordsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/searchKeywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSubscriptionGracePeriodGetToOneRelated operation.
     * @callback module:api/AppsApi~appsSubscriptionGracePeriodGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGracePeriodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionGracePeriods] the fields to include for returned resources of type subscriptionGracePeriods
     * @param {module:api/AppsApi~appsSubscriptionGracePeriodGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGracePeriodResponse}
     */
    appsSubscriptionGracePeriodGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSubscriptionGracePeriodGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionGracePeriods]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGracePeriods'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGracePeriodResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/subscriptionGracePeriod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSubscriptionGracePeriodGetToOneRelationship operation.
     * @callback module:api/AppsApi~appsSubscriptionGracePeriodGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppSubscriptionGracePeriodLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppsApi~appsSubscriptionGracePeriodGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppSubscriptionGracePeriodLinkageResponse}
     */
    appsSubscriptionGracePeriodGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSubscriptionGracePeriodGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppSubscriptionGracePeriodLinkageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/subscriptionGracePeriod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSubscriptionGroupsGetToManyRelated operation.
     * @callback module:api/AppsApi~appsSubscriptionGroupsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<module:model/String>} [filterSubscriptionsState] filter by attribute 'subscriptions.state'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroupLocalizations] the fields to include for returned resources of type subscriptionGroupLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitSubscriptions] maximum number of related subscriptions returned (when they are included)
     * @param {Number} [limitSubscriptionGroupLocalizations] maximum number of related subscriptionGroupLocalizations returned (when they are included)
     * @param {module:api/AppsApi~appsSubscriptionGroupsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupsResponse}
     */
    appsSubscriptionGroupsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSubscriptionGroupsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[subscriptions.state]': this.apiClient.buildCollectionParam(opts['filterSubscriptionsState'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionGroupLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroupLocalizations'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[subscriptions]': opts['limitSubscriptions'],
        'limit[subscriptionGroupLocalizations]': opts['limitSubscriptionGroupLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/subscriptionGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSubscriptionGroupsGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsSubscriptionGroupsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppSubscriptionGroupsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsSubscriptionGroupsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppSubscriptionGroupsLinkagesResponse}
     */
    appsSubscriptionGroupsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsSubscriptionGroupsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppSubscriptionGroupsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/subscriptionGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdateInstance operation.
     * @callback module:api/AppsApi~appsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppUpdateRequest} appUpdateRequest App representation
     * @param {module:api/AppsApi~appsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    appsUpdateInstance(id, appUpdateRequest, callback) {
      let postBody = appUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsUpdateInstance");
      }
      // verify the required parameter 'appUpdateRequest' is set
      if (appUpdateRequest === undefined || appUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appUpdateRequest' when calling appsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsWebhooksGetToManyRelated operation.
     * @callback module:api/AppsApi~appsWebhooksGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhooksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsWebhooks] the fields to include for returned resources of type webhooks
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppsApi~appsWebhooksGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhooksResponse}
     */
    appsWebhooksGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsWebhooksGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[webhooks]': this.apiClient.buildCollectionParam(opts['fieldsWebhooks'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhooksResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsWebhooksGetToManyRelationship operation.
     * @callback module:api/AppsApi~appsWebhooksGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppWebhooksLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppsApi~appsWebhooksGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppWebhooksLinkagesResponse}
     */
    appsWebhooksGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsWebhooksGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppWebhooksLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{id}/relationships/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
