/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import SubscriptionPromotionalOfferCreateRequest from '../model/SubscriptionPromotionalOfferCreateRequest';
import SubscriptionPromotionalOfferPricesLinkagesResponse from '../model/SubscriptionPromotionalOfferPricesLinkagesResponse';
import SubscriptionPromotionalOfferPricesResponse from '../model/SubscriptionPromotionalOfferPricesResponse';
import SubscriptionPromotionalOfferResponse from '../model/SubscriptionPromotionalOfferResponse';
import SubscriptionPromotionalOfferUpdateRequest from '../model/SubscriptionPromotionalOfferUpdateRequest';

/**
* SubscriptionPromotionalOffers service.
* @module api/SubscriptionPromotionalOffersApi
* @version 4.1
*/
export default class SubscriptionPromotionalOffersApi {

    /**
    * Constructs a new SubscriptionPromotionalOffersApi. 
    * @alias module:api/SubscriptionPromotionalOffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersCreateInstance operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionPromotionalOfferCreateRequest} subscriptionPromotionalOfferCreateRequest SubscriptionPromotionalOffer representation
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOfferResponse}
     */
    subscriptionPromotionalOffersCreateInstance(subscriptionPromotionalOfferCreateRequest, callback) {
      let postBody = subscriptionPromotionalOfferCreateRequest;
      // verify the required parameter 'subscriptionPromotionalOfferCreateRequest' is set
      if (subscriptionPromotionalOfferCreateRequest === undefined || subscriptionPromotionalOfferCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionPromotionalOfferCreateRequest' when calling subscriptionPromotionalOffersCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOfferResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersDeleteInstance operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionPromotionalOffersDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionPromotionalOffersDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersGetInstance operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOffers] the fields to include for returned resources of type subscriptionPromotionalOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOfferPrices] the fields to include for returned resources of type subscriptionPromotionalOfferPrices
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOfferResponse}
     */
    subscriptionPromotionalOffersGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionPromotionalOffersGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionPromotionalOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOffers'], 'csv'),
        'fields[subscriptionPromotionalOfferPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOfferPrices'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[prices]': opts['limitPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOfferResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersPricesGetToManyRelated operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersPricesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOfferPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOfferPrices] the fields to include for returned resources of type subscriptionPromotionalOfferPrices
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [fieldsSubscriptionPricePoints] the fields to include for returned resources of type subscriptionPricePoints
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersPricesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOfferPricesResponse}
     */
    subscriptionPromotionalOffersPricesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionPromotionalOffersPricesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionPromotionalOfferPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOfferPrices'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'fields[subscriptionPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPricePoints'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOfferPricesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers/{id}/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersPricesGetToManyRelationship operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersPricesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOfferPricesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersPricesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOfferPricesLinkagesResponse}
     */
    subscriptionPromotionalOffersPricesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionPromotionalOffersPricesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOfferPricesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers/{id}/relationships/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionPromotionalOffersUpdateInstance operation.
     * @callback module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionPromotionalOfferUpdateRequest} subscriptionPromotionalOfferUpdateRequest SubscriptionPromotionalOffer representation
     * @param {module:api/SubscriptionPromotionalOffersApi~subscriptionPromotionalOffersUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOfferResponse}
     */
    subscriptionPromotionalOffersUpdateInstance(id, subscriptionPromotionalOfferUpdateRequest, callback) {
      let postBody = subscriptionPromotionalOfferUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionPromotionalOffersUpdateInstance");
      }
      // verify the required parameter 'subscriptionPromotionalOfferUpdateRequest' is set
      if (subscriptionPromotionalOfferUpdateRequest === undefined || subscriptionPromotionalOfferUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionPromotionalOfferUpdateRequest' when calling subscriptionPromotionalOffersUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOfferResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionPromotionalOffers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
