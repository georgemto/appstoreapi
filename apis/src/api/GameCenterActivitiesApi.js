/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterActivityAchievementsLinkagesRequest from '../model/GameCenterActivityAchievementsLinkagesRequest';
import GameCenterActivityCreateRequest from '../model/GameCenterActivityCreateRequest';
import GameCenterActivityLeaderboardsLinkagesRequest from '../model/GameCenterActivityLeaderboardsLinkagesRequest';
import GameCenterActivityResponse from '../model/GameCenterActivityResponse';
import GameCenterActivityUpdateRequest from '../model/GameCenterActivityUpdateRequest';
import GameCenterActivityVersionsLinkagesResponse from '../model/GameCenterActivityVersionsLinkagesResponse';
import GameCenterActivityVersionsResponse from '../model/GameCenterActivityVersionsResponse';

/**
* GameCenterActivities service.
* @module api/GameCenterActivitiesApi
* @version 4.1
*/
export default class GameCenterActivitiesApi {

    /**
    * Constructs a new GameCenterActivitiesApi. 
    * @alias module:api/GameCenterActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterActivitiesAchievementsCreateToManyRelationship operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesAchievementsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterActivityAchievementsLinkagesRequest} gameCenterActivityAchievementsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesAchievementsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterActivitiesAchievementsCreateToManyRelationship(id, gameCenterActivityAchievementsLinkagesRequest, callback) {
      let postBody = gameCenterActivityAchievementsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesAchievementsCreateToManyRelationship");
      }
      // verify the required parameter 'gameCenterActivityAchievementsLinkagesRequest' is set
      if (gameCenterActivityAchievementsLinkagesRequest === undefined || gameCenterActivityAchievementsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityAchievementsLinkagesRequest' when calling gameCenterActivitiesAchievementsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/relationships/achievements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesAchievementsDeleteToManyRelationship operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesAchievementsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterActivityAchievementsLinkagesRequest} gameCenterActivityAchievementsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesAchievementsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterActivitiesAchievementsDeleteToManyRelationship(id, gameCenterActivityAchievementsLinkagesRequest, callback) {
      let postBody = gameCenterActivityAchievementsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesAchievementsDeleteToManyRelationship");
      }
      // verify the required parameter 'gameCenterActivityAchievementsLinkagesRequest' is set
      if (gameCenterActivityAchievementsLinkagesRequest === undefined || gameCenterActivityAchievementsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityAchievementsLinkagesRequest' when calling gameCenterActivitiesAchievementsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/relationships/achievements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesCreateInstance operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterActivityCreateRequest} gameCenterActivityCreateRequest GameCenterActivity representation
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityResponse}
     */
    gameCenterActivitiesCreateInstance(gameCenterActivityCreateRequest, callback) {
      let postBody = gameCenterActivityCreateRequest;
      // verify the required parameter 'gameCenterActivityCreateRequest' is set
      if (gameCenterActivityCreateRequest === undefined || gameCenterActivityCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityCreateRequest' when calling gameCenterActivitiesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesDeleteInstance operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterActivitiesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesGetInstance operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersions] the fields to include for returned resources of type gameCenterActivityVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAchievements] maximum number of related achievements returned (when they are included)
     * @param {Number} [limitLeaderboards] maximum number of related leaderboards returned (when they are included)
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityResponse}
     */
    gameCenterActivitiesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterActivityVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[achievements]': opts['limitAchievements'],
        'limit[leaderboards]': opts['limitLeaderboards'],
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesLeaderboardsCreateToManyRelationship operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesLeaderboardsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterActivityLeaderboardsLinkagesRequest} gameCenterActivityLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesLeaderboardsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterActivitiesLeaderboardsCreateToManyRelationship(id, gameCenterActivityLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterActivityLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesLeaderboardsCreateToManyRelationship");
      }
      // verify the required parameter 'gameCenterActivityLeaderboardsLinkagesRequest' is set
      if (gameCenterActivityLeaderboardsLinkagesRequest === undefined || gameCenterActivityLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityLeaderboardsLinkagesRequest' when calling gameCenterActivitiesLeaderboardsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/relationships/leaderboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesLeaderboardsDeleteToManyRelationship operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesLeaderboardsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterActivityLeaderboardsLinkagesRequest} gameCenterActivityLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesLeaderboardsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterActivitiesLeaderboardsDeleteToManyRelationship(id, gameCenterActivityLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterActivityLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesLeaderboardsDeleteToManyRelationship");
      }
      // verify the required parameter 'gameCenterActivityLeaderboardsLinkagesRequest' is set
      if (gameCenterActivityLeaderboardsLinkagesRequest === undefined || gameCenterActivityLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityLeaderboardsLinkagesRequest' when calling gameCenterActivitiesLeaderboardsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/relationships/leaderboards', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesUpdateInstance operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterActivityUpdateRequest} gameCenterActivityUpdateRequest GameCenterActivity representation
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityResponse}
     */
    gameCenterActivitiesUpdateInstance(id, gameCenterActivityUpdateRequest, callback) {
      let postBody = gameCenterActivityUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesUpdateInstance");
      }
      // verify the required parameter 'gameCenterActivityUpdateRequest' is set
      if (gameCenterActivityUpdateRequest === undefined || gameCenterActivityUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterActivityUpdateRequest' when calling gameCenterActivitiesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesVersionsGetToManyRelated operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersions] the fields to include for returned resources of type gameCenterActivityVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityLocalizations] the fields to include for returned resources of type gameCenterActivityLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityImages] the fields to include for returned resources of type gameCenterActivityImages
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersionReleases] the fields to include for returned resources of type gameCenterActivityVersionReleases
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityVersionsResponse}
     */
    gameCenterActivitiesVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterActivityVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersions'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterActivityLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityLocalizations'], 'csv'),
        'fields[gameCenterActivityImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityImages'], 'csv'),
        'fields[gameCenterActivityVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersionReleases'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityVersionsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterActivitiesVersionsGetToManyRelationship operation.
     * @callback module:api/GameCenterActivitiesApi~gameCenterActivitiesVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterActivitiesApi~gameCenterActivitiesVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityVersionsLinkagesResponse}
     */
    gameCenterActivitiesVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterActivitiesVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterActivities/{id}/relationships/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
