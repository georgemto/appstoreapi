/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetaCrashLogResponse from '../model/BetaCrashLogResponse';
import BetaFeedbackCrashSubmissionCrashLogLinkageResponse from '../model/BetaFeedbackCrashSubmissionCrashLogLinkageResponse';
import BetaFeedbackCrashSubmissionResponse from '../model/BetaFeedbackCrashSubmissionResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BetaFeedbackCrashSubmissions service.
* @module api/BetaFeedbackCrashSubmissionsApi
* @version 4.1
*/
export default class BetaFeedbackCrashSubmissionsApi {

    /**
    * Constructs a new BetaFeedbackCrashSubmissionsApi. 
    * @alias module:api/BetaFeedbackCrashSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the betaFeedbackCrashSubmissionsCrashLogGetToOneRelated operation.
     * @callback module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsCrashLogGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaCrashLogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaCrashLogs] the fields to include for returned resources of type betaCrashLogs
     * @param {module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsCrashLogGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaCrashLogResponse}
     */
    betaFeedbackCrashSubmissionsCrashLogGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaFeedbackCrashSubmissionsCrashLogGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaCrashLogs]': this.apiClient.buildCollectionParam(opts['fieldsBetaCrashLogs'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaCrashLogResponse;
      return this.apiClient.callApi(
        '/v1/betaFeedbackCrashSubmissions/{id}/crashLog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaFeedbackCrashSubmissionsCrashLogGetToOneRelationship operation.
     * @callback module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaFeedbackCrashSubmissionCrashLogLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaFeedbackCrashSubmissionCrashLogLinkageResponse}
     */
    betaFeedbackCrashSubmissionsCrashLogGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaFeedbackCrashSubmissionsCrashLogGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaFeedbackCrashSubmissionCrashLogLinkageResponse;
      return this.apiClient.callApi(
        '/v1/betaFeedbackCrashSubmissions/{id}/relationships/crashLog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaFeedbackCrashSubmissionsDeleteInstance operation.
     * @callback module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    betaFeedbackCrashSubmissionsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaFeedbackCrashSubmissionsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/betaFeedbackCrashSubmissions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the betaFeedbackCrashSubmissionsGetInstance operation.
     * @callback module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaFeedbackCrashSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaFeedbackCrashSubmissions] the fields to include for returned resources of type betaFeedbackCrashSubmissions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/BetaFeedbackCrashSubmissionsApi~betaFeedbackCrashSubmissionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaFeedbackCrashSubmissionResponse}
     */
    betaFeedbackCrashSubmissionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling betaFeedbackCrashSubmissionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaFeedbackCrashSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaFeedbackCrashSubmissions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaFeedbackCrashSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/betaFeedbackCrashSubmissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
