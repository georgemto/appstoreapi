/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import SubscriptionOfferCodeCreateRequest from '../model/SubscriptionOfferCodeCreateRequest';
import SubscriptionOfferCodeCustomCodesLinkagesResponse from '../model/SubscriptionOfferCodeCustomCodesLinkagesResponse';
import SubscriptionOfferCodeCustomCodesResponse from '../model/SubscriptionOfferCodeCustomCodesResponse';
import SubscriptionOfferCodeOneTimeUseCodesLinkagesResponse from '../model/SubscriptionOfferCodeOneTimeUseCodesLinkagesResponse';
import SubscriptionOfferCodeOneTimeUseCodesResponse from '../model/SubscriptionOfferCodeOneTimeUseCodesResponse';
import SubscriptionOfferCodePricesLinkagesResponse from '../model/SubscriptionOfferCodePricesLinkagesResponse';
import SubscriptionOfferCodePricesResponse from '../model/SubscriptionOfferCodePricesResponse';
import SubscriptionOfferCodeResponse from '../model/SubscriptionOfferCodeResponse';
import SubscriptionOfferCodeUpdateRequest from '../model/SubscriptionOfferCodeUpdateRequest';

/**
* SubscriptionOfferCodes service.
* @module api/SubscriptionOfferCodesApi
* @version 4.1
*/
export default class SubscriptionOfferCodesApi {

    /**
    * Constructs a new SubscriptionOfferCodesApi. 
    * @alias module:api/SubscriptionOfferCodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionOfferCodesCreateInstance operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionOfferCodeCreateRequest} subscriptionOfferCodeCreateRequest SubscriptionOfferCode representation
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeResponse}
     */
    subscriptionOfferCodesCreateInstance(subscriptionOfferCodeCreateRequest, callback) {
      let postBody = subscriptionOfferCodeCreateRequest;
      // verify the required parameter 'subscriptionOfferCodeCreateRequest' is set
      if (subscriptionOfferCodeCreateRequest === undefined || subscriptionOfferCodeCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionOfferCodeCreateRequest' when calling subscriptionOfferCodesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesCustomCodesGetToManyRelated operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCustomCodesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeCustomCodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeCustomCodes] the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCustomCodesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeCustomCodesResponse}
     */
    subscriptionOfferCodesCustomCodesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesCustomCodesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionOfferCodeCustomCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeCustomCodes'], 'csv'),
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeCustomCodesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/customCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesCustomCodesGetToManyRelationship operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCustomCodesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeCustomCodesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesCustomCodesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeCustomCodesLinkagesResponse}
     */
    subscriptionOfferCodesCustomCodesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesCustomCodesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeCustomCodesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/relationships/customCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesGetInstance operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeOneTimeUseCodes] the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeCustomCodes] the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodePrices] the fields to include for returned resources of type subscriptionOfferCodePrices
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCustomCodes] maximum number of related customCodes returned (when they are included)
     * @param {Number} [limitOneTimeUseCodes] maximum number of related oneTimeUseCodes returned (when they are included)
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeResponse}
     */
    subscriptionOfferCodesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'fields[subscriptionOfferCodeOneTimeUseCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeOneTimeUseCodes'], 'csv'),
        'fields[subscriptionOfferCodeCustomCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeCustomCodes'], 'csv'),
        'fields[subscriptionOfferCodePrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodePrices'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[customCodes]': opts['limitCustomCodes'],
        'limit[oneTimeUseCodes]': opts['limitOneTimeUseCodes'],
        'limit[prices]': opts['limitPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesOneTimeUseCodesGetToManyRelated operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesOneTimeUseCodesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeOneTimeUseCodes] the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesOneTimeUseCodesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeOneTimeUseCodesResponse}
     */
    subscriptionOfferCodesOneTimeUseCodesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesOneTimeUseCodesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionOfferCodeOneTimeUseCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeOneTimeUseCodes'], 'csv'),
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeOneTimeUseCodesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesOneTimeUseCodesGetToManyRelationship operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeOneTimeUseCodesLinkagesResponse}
     */
    subscriptionOfferCodesOneTimeUseCodesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesOneTimeUseCodesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeOneTimeUseCodesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/relationships/oneTimeUseCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesPricesGetToManyRelated operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesPricesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodePricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodePrices] the fields to include for returned resources of type subscriptionOfferCodePrices
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [fieldsSubscriptionPricePoints] the fields to include for returned resources of type subscriptionPricePoints
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesPricesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodePricesResponse}
     */
    subscriptionOfferCodesPricesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesPricesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionOfferCodePrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodePrices'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'fields[subscriptionPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPricePoints'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodePricesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesPricesGetToManyRelationship operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesPricesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodePricesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesPricesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodePricesLinkagesResponse}
     */
    subscriptionOfferCodesPricesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesPricesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodePricesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}/relationships/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodesUpdateInstance operation.
     * @callback module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionOfferCodeUpdateRequest} subscriptionOfferCodeUpdateRequest SubscriptionOfferCode representation
     * @param {module:api/SubscriptionOfferCodesApi~subscriptionOfferCodesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeResponse}
     */
    subscriptionOfferCodesUpdateInstance(id, subscriptionOfferCodeUpdateRequest, callback) {
      let postBody = subscriptionOfferCodeUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodesUpdateInstance");
      }
      // verify the required parameter 'subscriptionOfferCodeUpdateRequest' is set
      if (subscriptionOfferCodeUpdateRequest === undefined || subscriptionOfferCodeUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionOfferCodeUpdateRequest' when calling subscriptionOfferCodesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
