/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEventCreateRequest from '../model/AppEventCreateRequest';
import AppEventLocalizationsLinkagesResponse from '../model/AppEventLocalizationsLinkagesResponse';
import AppEventLocalizationsResponse from '../model/AppEventLocalizationsResponse';
import AppEventResponse from '../model/AppEventResponse';
import AppEventUpdateRequest from '../model/AppEventUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppEvents service.
* @module api/AppEventsApi
* @version 4.1
*/
export default class AppEventsApi {

    /**
    * Constructs a new AppEventsApi. 
    * @alias module:api/AppEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appEventsCreateInstance operation.
     * @callback module:api/AppEventsApi~appEventsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppEventCreateRequest} appEventCreateRequest AppEvent representation
     * @param {module:api/AppEventsApi~appEventsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventResponse}
     */
    appEventsCreateInstance(appEventCreateRequest, callback) {
      let postBody = appEventCreateRequest;
      // verify the required parameter 'appEventCreateRequest' is set
      if (appEventCreateRequest === undefined || appEventCreateRequest === null) {
        throw new Error("Missing the required parameter 'appEventCreateRequest' when calling appEventsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventResponse;
      return this.apiClient.callApi(
        '/v1/appEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventsDeleteInstance operation.
     * @callback module:api/AppEventsApi~appEventsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppEventsApi~appEventsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appEventsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventsGetInstance operation.
     * @callback module:api/AppEventsApi~appEventsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {module:api/AppEventsApi~appEventsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventResponse}
     */
    appEventsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventResponse;
      return this.apiClient.callApi(
        '/v1/appEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventsLocalizationsGetToManyRelated operation.
     * @callback module:api/AppEventsApi~appEventsLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEventLocalizations] the fields to include for returned resources of type appEventLocalizations
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsAppEventScreenshots] the fields to include for returned resources of type appEventScreenshots
     * @param {Array.<module:model/String>} [fieldsAppEventVideoClips] the fields to include for returned resources of type appEventVideoClips
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppEventScreenshots] maximum number of related appEventScreenshots returned (when they are included)
     * @param {Number} [limitAppEventVideoClips] maximum number of related appEventVideoClips returned (when they are included)
     * @param {module:api/AppEventsApi~appEventsLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationsResponse}
     */
    appEventsLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventsLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEventLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppEventLocalizations'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[appEventScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsAppEventScreenshots'], 'csv'),
        'fields[appEventVideoClips]': this.apiClient.buildCollectionParam(opts['fieldsAppEventVideoClips'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appEventScreenshots]': opts['limitAppEventScreenshots'],
        'limit[appEventVideoClips]': opts['limitAppEventVideoClips']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appEvents/{id}/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventsLocalizationsGetToManyRelationship operation.
     * @callback module:api/AppEventsApi~appEventsLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppEventsApi~appEventsLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventLocalizationsLinkagesResponse}
     */
    appEventsLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventsLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEventLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appEvents/{id}/relationships/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appEventsUpdateInstance operation.
     * @callback module:api/AppEventsApi~appEventsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppEventUpdateRequest} appEventUpdateRequest AppEvent representation
     * @param {module:api/AppEventsApi~appEventsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEventResponse}
     */
    appEventsUpdateInstance(id, appEventUpdateRequest, callback) {
      let postBody = appEventUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appEventsUpdateInstance");
      }
      // verify the required parameter 'appEventUpdateRequest' is set
      if (appEventUpdateRequest === undefined || appEventUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appEventUpdateRequest' when calling appEventsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEventResponse;
      return this.apiClient.callApi(
        '/v1/appEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
