/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CiArtifactsResponse from '../model/CiArtifactsResponse';
import CiBuildActionArtifactsLinkagesResponse from '../model/CiBuildActionArtifactsLinkagesResponse';
import CiBuildActionBuildRunLinkageResponse from '../model/CiBuildActionBuildRunLinkageResponse';
import CiBuildActionIssuesLinkagesResponse from '../model/CiBuildActionIssuesLinkagesResponse';
import CiBuildActionResponse from '../model/CiBuildActionResponse';
import CiBuildActionTestResultsLinkagesResponse from '../model/CiBuildActionTestResultsLinkagesResponse';
import CiBuildRunResponse from '../model/CiBuildRunResponse';
import CiIssuesResponse from '../model/CiIssuesResponse';
import CiTestResultsResponse from '../model/CiTestResultsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* CiBuildActions service.
* @module api/CiBuildActionsApi
* @version 4.1
*/
export default class CiBuildActionsApi {

    /**
    * Constructs a new CiBuildActionsApi. 
    * @alias module:api/CiBuildActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ciBuildActionsArtifactsGetToManyRelated operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsArtifactsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiArtifactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiArtifacts] the fields to include for returned resources of type ciArtifacts
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsArtifactsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiArtifactsResponse}
     */
    ciBuildActionsArtifactsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsArtifactsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciArtifacts]': this.apiClient.buildCollectionParam(opts['fieldsCiArtifacts'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiArtifactsResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsArtifactsGetToManyRelationship operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsArtifactsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionArtifactsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsArtifactsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionArtifactsLinkagesResponse}
     */
    ciBuildActionsArtifactsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsArtifactsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionArtifactsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/relationships/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsBuildRunGetToOneRelated operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsBuildRunGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsCiWorkflows] the fields to include for returned resources of type ciWorkflows
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Array.<module:model/String>} [fieldsScmPullRequests] the fields to include for returned resources of type scmPullRequests
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/CiBuildActionsApi~ciBuildActionsBuildRunGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunResponse}
     */
    ciBuildActionsBuildRunGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsBuildRunGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[ciWorkflows]': this.apiClient.buildCollectionParam(opts['fieldsCiWorkflows'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'fields[scmPullRequests]': this.apiClient.buildCollectionParam(opts['fieldsScmPullRequests'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/buildRun', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsBuildRunGetToOneRelationship operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsBuildRunGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionBuildRunLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/CiBuildActionsApi~ciBuildActionsBuildRunGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionBuildRunLinkageResponse}
     */
    ciBuildActionsBuildRunGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsBuildRunGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionBuildRunLinkageResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/relationships/buildRun', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsGetInstance operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiBuildActions] the fields to include for returned resources of type ciBuildActions
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiBuildActionsApi~ciBuildActionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionResponse}
     */
    ciBuildActionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciBuildActions]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildActions'], 'csv'),
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsIssuesGetToManyRelated operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsIssuesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiIssuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiIssues] the fields to include for returned resources of type ciIssues
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsIssuesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiIssuesResponse}
     */
    ciBuildActionsIssuesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsIssuesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciIssues]': this.apiClient.buildCollectionParam(opts['fieldsCiIssues'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiIssuesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsIssuesGetToManyRelationship operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsIssuesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionIssuesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsIssuesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionIssuesLinkagesResponse}
     */
    ciBuildActionsIssuesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsIssuesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionIssuesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/relationships/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsTestResultsGetToManyRelated operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsTestResultsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiTestResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiTestResults] the fields to include for returned resources of type ciTestResults
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsTestResultsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiTestResultsResponse}
     */
    ciBuildActionsTestResultsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsTestResultsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciTestResults]': this.apiClient.buildCollectionParam(opts['fieldsCiTestResults'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiTestResultsResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/testResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildActionsTestResultsGetToManyRelationship operation.
     * @callback module:api/CiBuildActionsApi~ciBuildActionsTestResultsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionTestResultsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildActionsApi~ciBuildActionsTestResultsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionTestResultsLinkagesResponse}
     */
    ciBuildActionsTestResultsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildActionsTestResultsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionTestResultsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildActions/{id}/relationships/testResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
