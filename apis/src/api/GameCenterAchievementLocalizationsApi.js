/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterAchievementImageResponse from '../model/GameCenterAchievementImageResponse';
import GameCenterAchievementLocalizationCreateRequest from '../model/GameCenterAchievementLocalizationCreateRequest';
import GameCenterAchievementLocalizationGameCenterAchievementImageLinkageResponse from '../model/GameCenterAchievementLocalizationGameCenterAchievementImageLinkageResponse';
import GameCenterAchievementLocalizationGameCenterAchievementLinkageResponse from '../model/GameCenterAchievementLocalizationGameCenterAchievementLinkageResponse';
import GameCenterAchievementLocalizationResponse from '../model/GameCenterAchievementLocalizationResponse';
import GameCenterAchievementLocalizationUpdateRequest from '../model/GameCenterAchievementLocalizationUpdateRequest';
import GameCenterAchievementResponse from '../model/GameCenterAchievementResponse';

/**
* GameCenterAchievementLocalizations service.
* @module api/GameCenterAchievementLocalizationsApi
* @version 4.1
*/
export default class GameCenterAchievementLocalizationsApi {

    /**
    * Constructs a new GameCenterAchievementLocalizationsApi. 
    * @alias module:api/GameCenterAchievementLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsCreateInstance operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterAchievementLocalizationCreateRequest} gameCenterAchievementLocalizationCreateRequest GameCenterAchievementLocalization representation
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationResponse}
     */
    gameCenterAchievementLocalizationsCreateInstance(gameCenterAchievementLocalizationCreateRequest, callback) {
      let postBody = gameCenterAchievementLocalizationCreateRequest;
      // verify the required parameter 'gameCenterAchievementLocalizationCreateRequest' is set
      if (gameCenterAchievementLocalizationCreateRequest === undefined || gameCenterAchievementLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementLocalizationCreateRequest' when calling gameCenterAchievementLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsDeleteInstance operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterAchievementLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementResponse}
     */
    gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationship operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationGameCenterAchievementLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationGameCenterAchievementLinkageResponse}
     */
    gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationGameCenterAchievementLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}/relationships/gameCenterAchievement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementImages] the fields to include for returned resources of type gameCenterAchievementImages
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementImageResponse}
     */
    gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievementImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementImages'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementImageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationship operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationGameCenterAchievementImageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationGameCenterAchievementImageLinkageResponse}
     */
    gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationGameCenterAchievementImageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}/relationships/gameCenterAchievementImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsGetInstance operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementImages] the fields to include for returned resources of type gameCenterAchievementImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationResponse}
     */
    gameCenterAchievementLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterAchievementImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementLocalizationsUpdateInstance operation.
     * @callback module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterAchievementLocalizationUpdateRequest} gameCenterAchievementLocalizationUpdateRequest GameCenterAchievementLocalization representation
     * @param {module:api/GameCenterAchievementLocalizationsApi~gameCenterAchievementLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationResponse}
     */
    gameCenterAchievementLocalizationsUpdateInstance(id, gameCenterAchievementLocalizationUpdateRequest, callback) {
      let postBody = gameCenterAchievementLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementLocalizationsUpdateInstance");
      }
      // verify the required parameter 'gameCenterAchievementLocalizationUpdateRequest' is set
      if (gameCenterAchievementLocalizationUpdateRequest === undefined || gameCenterAchievementLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementLocalizationUpdateRequest' when calling gameCenterAchievementLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievementLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
