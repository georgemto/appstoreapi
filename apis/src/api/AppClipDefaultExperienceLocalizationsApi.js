/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppClipDefaultExperienceLocalizationAppClipHeaderImageLinkageResponse from '../model/AppClipDefaultExperienceLocalizationAppClipHeaderImageLinkageResponse';
import AppClipDefaultExperienceLocalizationCreateRequest from '../model/AppClipDefaultExperienceLocalizationCreateRequest';
import AppClipDefaultExperienceLocalizationResponse from '../model/AppClipDefaultExperienceLocalizationResponse';
import AppClipDefaultExperienceLocalizationUpdateRequest from '../model/AppClipDefaultExperienceLocalizationUpdateRequest';
import AppClipHeaderImageResponse from '../model/AppClipHeaderImageResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppClipDefaultExperienceLocalizations service.
* @module api/AppClipDefaultExperienceLocalizationsApi
* @version 4.1
*/
export default class AppClipDefaultExperienceLocalizationsApi {

    /**
    * Constructs a new AppClipDefaultExperienceLocalizationsApi. 
    * @alias module:api/AppClipDefaultExperienceLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipHeaderImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClipHeaderImages] the fields to include for returned resources of type appClipHeaderImages
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipHeaderImageResponse}
     */
    appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClipHeaderImages]': this.apiClient.buildCollectionParam(opts['fieldsAppClipHeaderImages'], 'csv'),
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipHeaderImageResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationship operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceLocalizationAppClipHeaderImageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceLocalizationAppClipHeaderImageLinkageResponse}
     */
    appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceLocalizationAppClipHeaderImageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations/{id}/relationships/appClipHeaderImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsCreateInstance operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppClipDefaultExperienceLocalizationCreateRequest} appClipDefaultExperienceLocalizationCreateRequest AppClipDefaultExperienceLocalization representation
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceLocalizationResponse}
     */
    appClipDefaultExperienceLocalizationsCreateInstance(appClipDefaultExperienceLocalizationCreateRequest, callback) {
      let postBody = appClipDefaultExperienceLocalizationCreateRequest;
      // verify the required parameter 'appClipDefaultExperienceLocalizationCreateRequest' is set
      if (appClipDefaultExperienceLocalizationCreateRequest === undefined || appClipDefaultExperienceLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'appClipDefaultExperienceLocalizationCreateRequest' when calling appClipDefaultExperienceLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsDeleteInstance operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appClipDefaultExperienceLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperienceLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsGetInstance operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [fieldsAppClipHeaderImages] the fields to include for returned resources of type appClipHeaderImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceLocalizationResponse}
     */
    appClipDefaultExperienceLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperienceLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'fields[appClipHeaderImages]': this.apiClient.buildCollectionParam(opts['fieldsAppClipHeaderImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperienceLocalizationsUpdateInstance operation.
     * @callback module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppClipDefaultExperienceLocalizationUpdateRequest} appClipDefaultExperienceLocalizationUpdateRequest AppClipDefaultExperienceLocalization representation
     * @param {module:api/AppClipDefaultExperienceLocalizationsApi~appClipDefaultExperienceLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceLocalizationResponse}
     */
    appClipDefaultExperienceLocalizationsUpdateInstance(id, appClipDefaultExperienceLocalizationUpdateRequest, callback) {
      let postBody = appClipDefaultExperienceLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperienceLocalizationsUpdateInstance");
      }
      // verify the required parameter 'appClipDefaultExperienceLocalizationUpdateRequest' is set
      if (appClipDefaultExperienceLocalizationUpdateRequest === undefined || appClipDefaultExperienceLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appClipDefaultExperienceLocalizationUpdateRequest' when calling appClipDefaultExperienceLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperienceLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
