/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import SubscriptionGroupCreateRequest from '../model/SubscriptionGroupCreateRequest';
import SubscriptionGroupLocalizationsResponse from '../model/SubscriptionGroupLocalizationsResponse';
import SubscriptionGroupResponse from '../model/SubscriptionGroupResponse';
import SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse from '../model/SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse';
import SubscriptionGroupSubscriptionsLinkagesResponse from '../model/SubscriptionGroupSubscriptionsLinkagesResponse';
import SubscriptionGroupUpdateRequest from '../model/SubscriptionGroupUpdateRequest';
import SubscriptionsResponse from '../model/SubscriptionsResponse';

/**
* SubscriptionGroups service.
* @module api/SubscriptionGroupsApi
* @version 4.1
*/
export default class SubscriptionGroupsApi {

    /**
    * Constructs a new SubscriptionGroupsApi. 
    * @alias module:api/SubscriptionGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionGroupsCreateInstance operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionGroupCreateRequest} subscriptionGroupCreateRequest SubscriptionGroup representation
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    subscriptionGroupsCreateInstance(subscriptionGroupCreateRequest, callback) {
      let postBody = subscriptionGroupCreateRequest;
      // verify the required parameter 'subscriptionGroupCreateRequest' is set
      if (subscriptionGroupCreateRequest === undefined || subscriptionGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionGroupCreateRequest' when calling subscriptionGroupsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsDeleteInstance operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionGroupsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsGetInstance operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroupLocalizations] the fields to include for returned resources of type subscriptionGroupLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitSubscriptionGroupLocalizations] maximum number of related subscriptionGroupLocalizations returned (when they are included)
     * @param {Number} [limitSubscriptions] maximum number of related subscriptions returned (when they are included)
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    subscriptionGroupsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionGroupLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroupLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[subscriptionGroupLocalizations]': opts['limitSubscriptionGroupLocalizations'],
        'limit[subscriptions]': opts['limitSubscriptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroupLocalizations] the fields to include for returned resources of type subscriptionGroupLocalizations
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupLocalizationsResponse}
     */
    subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionGroupLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroupLocalizations'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationship operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse}
     */
    subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupSubscriptionGroupLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}/relationships/subscriptionGroupLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsSubscriptionsGetToManyRelated operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterProductId] filter by attribute 'productId'
     * @param {Array.<String>} [filterName] filter by attribute 'name'
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionLocalizations] the fields to include for returned resources of type subscriptionLocalizations
     * @param {Array.<module:model/String>} [fieldsSubscriptionAppStoreReviewScreenshots] the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsSubscriptionIntroductoryOffers] the fields to include for returned resources of type subscriptionIntroductoryOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOffers] the fields to include for returned resources of type subscriptionPromotionalOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionPrices] the fields to include for returned resources of type subscriptionPrices
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptionAvailabilities] the fields to include for returned resources of type subscriptionAvailabilities
     * @param {Array.<module:model/String>} [fieldsWinBackOffers] the fields to include for returned resources of type winBackOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionImages] the fields to include for returned resources of type subscriptionImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitSubscriptionLocalizations] maximum number of related subscriptionLocalizations returned (when they are included)
     * @param {Number} [limitIntroductoryOffers] maximum number of related introductoryOffers returned (when they are included)
     * @param {Number} [limitPromotionalOffers] maximum number of related promotionalOffers returned (when they are included)
     * @param {Number} [limitOfferCodes] maximum number of related offerCodes returned (when they are included)
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {Number} [limitWinBackOffers] maximum number of related winBackOffers returned (when they are included)
     * @param {Number} [limitImages] maximum number of related images returned (when they are included)
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionsResponse}
     */
    subscriptionGroupsSubscriptionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsSubscriptionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[productId]': this.apiClient.buildCollectionParam(opts['filterProductId'], 'csv'),
        'filter[name]': this.apiClient.buildCollectionParam(opts['filterName'], 'csv'),
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionLocalizations'], 'csv'),
        'fields[subscriptionAppStoreReviewScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAppStoreReviewScreenshots'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[subscriptionIntroductoryOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionIntroductoryOffers'], 'csv'),
        'fields[subscriptionPromotionalOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOffers'], 'csv'),
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'fields[subscriptionPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPrices'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[subscriptionAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAvailabilities'], 'csv'),
        'fields[winBackOffers]': this.apiClient.buildCollectionParam(opts['fieldsWinBackOffers'], 'csv'),
        'fields[subscriptionImages]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[subscriptionLocalizations]': opts['limitSubscriptionLocalizations'],
        'limit[introductoryOffers]': opts['limitIntroductoryOffers'],
        'limit[promotionalOffers]': opts['limitPromotionalOffers'],
        'limit[offerCodes]': opts['limitOfferCodes'],
        'limit[prices]': opts['limitPrices'],
        'limit[winBackOffers]': opts['limitWinBackOffers'],
        'limit[images]': opts['limitImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionsResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsSubscriptionsGetToManyRelationship operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupSubscriptionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsSubscriptionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupSubscriptionsLinkagesResponse}
     */
    subscriptionGroupsSubscriptionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsSubscriptionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupSubscriptionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}/relationships/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionGroupsUpdateInstance operation.
     * @callback module:api/SubscriptionGroupsApi~subscriptionGroupsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionGroupUpdateRequest} subscriptionGroupUpdateRequest SubscriptionGroup representation
     * @param {module:api/SubscriptionGroupsApi~subscriptionGroupsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    subscriptionGroupsUpdateInstance(id, subscriptionGroupUpdateRequest, callback) {
      let postBody = subscriptionGroupUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionGroupsUpdateInstance");
      }
      // verify the required parameter 'subscriptionGroupUpdateRequest' is set
      if (subscriptionGroupUpdateRequest === undefined || subscriptionGroupUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionGroupUpdateRequest' when calling subscriptionGroupsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
