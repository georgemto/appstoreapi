/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterLeaderboardImageResponse from '../model/GameCenterLeaderboardImageResponse';
import GameCenterLeaderboardLocalizationCreateRequest from '../model/GameCenterLeaderboardLocalizationCreateRequest';
import GameCenterLeaderboardLocalizationGameCenterLeaderboardImageLinkageResponse from '../model/GameCenterLeaderboardLocalizationGameCenterLeaderboardImageLinkageResponse';
import GameCenterLeaderboardLocalizationResponse from '../model/GameCenterLeaderboardLocalizationResponse';
import GameCenterLeaderboardLocalizationUpdateRequest from '../model/GameCenterLeaderboardLocalizationUpdateRequest';

/**
* GameCenterLeaderboardLocalizations service.
* @module api/GameCenterLeaderboardLocalizationsApi
* @version 4.1
*/
export default class GameCenterLeaderboardLocalizationsApi {

    /**
    * Constructs a new GameCenterLeaderboardLocalizationsApi. 
    * @alias module:api/GameCenterLeaderboardLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsCreateInstance operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterLeaderboardLocalizationCreateRequest} gameCenterLeaderboardLocalizationCreateRequest GameCenterLeaderboardLocalization representation
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationResponse}
     */
    gameCenterLeaderboardLocalizationsCreateInstance(gameCenterLeaderboardLocalizationCreateRequest, callback) {
      let postBody = gameCenterLeaderboardLocalizationCreateRequest;
      // verify the required parameter 'gameCenterLeaderboardLocalizationCreateRequest' is set
      if (gameCenterLeaderboardLocalizationCreateRequest === undefined || gameCenterLeaderboardLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardLocalizationCreateRequest' when calling gameCenterLeaderboardLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsDeleteInstance operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardImages] the fields to include for returned resources of type gameCenterLeaderboardImages
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardImageResponse}
     */
    gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardImages'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardImageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationGameCenterLeaderboardImageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationGameCenterLeaderboardImageLinkageResponse}
     */
    gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationGameCenterLeaderboardImageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations/{id}/relationships/gameCenterLeaderboardImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsGetInstance operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardImages] the fields to include for returned resources of type gameCenterLeaderboardImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationResponse}
     */
    gameCenterLeaderboardLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardLocalizationsUpdateInstance operation.
     * @callback module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardLocalizationUpdateRequest} gameCenterLeaderboardLocalizationUpdateRequest GameCenterLeaderboardLocalization representation
     * @param {module:api/GameCenterLeaderboardLocalizationsApi~gameCenterLeaderboardLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationResponse}
     */
    gameCenterLeaderboardLocalizationsUpdateInstance(id, gameCenterLeaderboardLocalizationUpdateRequest, callback) {
      let postBody = gameCenterLeaderboardLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardLocalizationsUpdateInstance");
      }
      // verify the required parameter 'gameCenterLeaderboardLocalizationUpdateRequest' is set
      if (gameCenterLeaderboardLocalizationUpdateRequest === undefined || gameCenterLeaderboardLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardLocalizationUpdateRequest' when calling gameCenterLeaderboardLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
