/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgeRatingDeclarationWithoutIncludesResponse from '../model/AgeRatingDeclarationWithoutIncludesResponse';
import AlternativeDistributionPackageResponse from '../model/AlternativeDistributionPackageResponse';
import AppClipDefaultExperienceResponse from '../model/AppClipDefaultExperienceResponse';
import AppStoreReviewDetailResponse from '../model/AppStoreReviewDetailResponse';
import AppStoreVersionAgeRatingDeclarationLinkageResponse from '../model/AppStoreVersionAgeRatingDeclarationLinkageResponse';
import AppStoreVersionAlternativeDistributionPackageLinkageResponse from '../model/AppStoreVersionAlternativeDistributionPackageLinkageResponse';
import AppStoreVersionAppClipDefaultExperienceLinkageRequest from '../model/AppStoreVersionAppClipDefaultExperienceLinkageRequest';
import AppStoreVersionAppClipDefaultExperienceLinkageResponse from '../model/AppStoreVersionAppClipDefaultExperienceLinkageResponse';
import AppStoreVersionAppStoreReviewDetailLinkageResponse from '../model/AppStoreVersionAppStoreReviewDetailLinkageResponse';
import AppStoreVersionAppStoreVersionExperimentsLinkagesResponse from '../model/AppStoreVersionAppStoreVersionExperimentsLinkagesResponse';
import AppStoreVersionAppStoreVersionExperimentsV2LinkagesResponse from '../model/AppStoreVersionAppStoreVersionExperimentsV2LinkagesResponse';
import AppStoreVersionAppStoreVersionLocalizationsLinkagesResponse from '../model/AppStoreVersionAppStoreVersionLocalizationsLinkagesResponse';
import AppStoreVersionAppStoreVersionPhasedReleaseLinkageResponse from '../model/AppStoreVersionAppStoreVersionPhasedReleaseLinkageResponse';
import AppStoreVersionAppStoreVersionSubmissionLinkageResponse from '../model/AppStoreVersionAppStoreVersionSubmissionLinkageResponse';
import AppStoreVersionBuildLinkageRequest from '../model/AppStoreVersionBuildLinkageRequest';
import AppStoreVersionBuildLinkageResponse from '../model/AppStoreVersionBuildLinkageResponse';
import AppStoreVersionCreateRequest from '../model/AppStoreVersionCreateRequest';
import AppStoreVersionCustomerReviewsLinkagesResponse from '../model/AppStoreVersionCustomerReviewsLinkagesResponse';
import AppStoreVersionExperimentsResponse from '../model/AppStoreVersionExperimentsResponse';
import AppStoreVersionExperimentsV2Response from '../model/AppStoreVersionExperimentsV2Response';
import AppStoreVersionGameCenterAppVersionLinkageResponse from '../model/AppStoreVersionGameCenterAppVersionLinkageResponse';
import AppStoreVersionLocalizationsResponse from '../model/AppStoreVersionLocalizationsResponse';
import AppStoreVersionPhasedReleaseWithoutIncludesResponse from '../model/AppStoreVersionPhasedReleaseWithoutIncludesResponse';
import AppStoreVersionResponse from '../model/AppStoreVersionResponse';
import AppStoreVersionRoutingAppCoverageLinkageResponse from '../model/AppStoreVersionRoutingAppCoverageLinkageResponse';
import AppStoreVersionSubmissionResponse from '../model/AppStoreVersionSubmissionResponse';
import AppStoreVersionUpdateRequest from '../model/AppStoreVersionUpdateRequest';
import BuildWithoutIncludesResponse from '../model/BuildWithoutIncludesResponse';
import CustomerReviewsResponse from '../model/CustomerReviewsResponse';
import ErrorResponse from '../model/ErrorResponse';
import GameCenterAppVersionResponse from '../model/GameCenterAppVersionResponse';
import RoutingAppCoverageWithoutIncludesResponse from '../model/RoutingAppCoverageWithoutIncludesResponse';

/**
* AppStoreVersions service.
* @module api/AppStoreVersionsApi
* @version 4.1
*/
export default class AppStoreVersionsApi {

    /**
    * Constructs a new AppStoreVersionsApi. 
    * @alias module:api/AppStoreVersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appStoreVersionsAgeRatingDeclarationGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgeRatingDeclarationWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgeRatingDeclarationWithoutIncludesResponse}
     */
    appStoreVersionsAgeRatingDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAgeRatingDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgeRatingDeclarationWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/ageRatingDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAgeRatingDeclarationGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAgeRatingDeclarationLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAgeRatingDeclarationGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAgeRatingDeclarationLinkageResponse}
     */
    appStoreVersionsAgeRatingDeclarationGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAgeRatingDeclarationGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAgeRatingDeclarationLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/ageRatingDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAlternativeDistributionPackageGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAlternativeDistributionPackageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlternativeDistributionPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackages] the fields to include for returned resources of type alternativeDistributionPackages
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackageVersions] the fields to include for returned resources of type alternativeDistributionPackageVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAlternativeDistributionPackageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlternativeDistributionPackageResponse}
     */
    appStoreVersionsAlternativeDistributionPackageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAlternativeDistributionPackageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[alternativeDistributionPackages]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackages'], 'csv'),
        'fields[alternativeDistributionPackageVersions]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackageVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlternativeDistributionPackageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/alternativeDistributionPackage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAlternativeDistributionPackageGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAlternativeDistributionPackageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAlternativeDistributionPackageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAlternativeDistributionPackageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAlternativeDistributionPackageLinkageResponse}
     */
    appStoreVersionsAlternativeDistributionPackageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAlternativeDistributionPackageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAlternativeDistributionPackageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/alternativeDistributionPackage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppClipDefaultExperienceGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [fieldsAppClipAppStoreReviewDetails] the fields to include for returned resources of type appClipAppStoreReviewDetails
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClipDefaultExperienceLocalizations] maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceResponse}
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'fields[appClipAppStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAppStoreReviewDetails'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClipDefaultExperienceLocalizations]': opts['limitAppClipDefaultExperienceLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appClipDefaultExperience', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppClipDefaultExperienceGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppClipDefaultExperienceLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppClipDefaultExperienceLinkageResponse}
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppClipDefaultExperienceLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionAppClipDefaultExperienceLinkageRequest} appStoreVersionAppClipDefaultExperienceLinkageRequest Related linkage
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(id, appStoreVersionAppClipDefaultExperienceLinkageRequest, callback) {
      let postBody = appStoreVersionAppClipDefaultExperienceLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");
      }
      // verify the required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' is set
      if (appStoreVersionAppClipDefaultExperienceLinkageRequest === undefined || appStoreVersionAppClipDefaultExperienceLinkageRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreReviewDetailGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreReviewDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewAttachments] the fields to include for returned resources of type appStoreReviewAttachments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreReviewAttachments] maximum number of related appStoreReviewAttachments returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreReviewDetailResponse}
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreReviewAttachments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewAttachments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreReviewAttachments]': opts['limitAppStoreReviewAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreReviewDetailResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreReviewDetailGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreReviewDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreReviewDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreReviewDetailLinkageResponse}
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreReviewDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreReviewDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionExperimentsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperimentTreatments] maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentsResponse}
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperimentTreatments]': opts['limitAppStoreVersionExperimentTreatments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionExperiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionExperimentsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreVersionExperimentsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreVersionExperimentsLinkagesResponse}
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreVersionExperimentsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreVersionExperiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionExperimentsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterState] filter by attribute 'state'
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperimentTreatments] the fields to include for returned resources of type appStoreVersionExperimentTreatments
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitControlVersions] maximum number of related controlVersions returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentTreatments] maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionExperimentsV2Response}
     */
    appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[state]': this.apiClient.buildCollectionParam(opts['filterState'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appStoreVersionExperimentTreatments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperimentTreatments'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[controlVersions]': opts['limitControlVersions'],
        'limit[appStoreVersionExperimentTreatments]': opts['limitAppStoreVersionExperimentTreatments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionExperimentsV2Response;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreVersionExperimentsV2LinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreVersionExperimentsV2LinkagesResponse}
     */
    appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreVersionExperimentsV2LinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreVersionExperimentsV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLocale] filter by attribute 'locale'
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppScreenshotSets] the fields to include for returned resources of type appScreenshotSets
     * @param {Array.<module:model/String>} [fieldsAppPreviewSets] the fields to include for returned resources of type appPreviewSets
     * @param {Array.<String>} [fieldsAppKeywords] the fields to include for returned resources of type appKeywords
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppScreenshotSets] maximum number of related appScreenshotSets returned (when they are included)
     * @param {Number} [limitAppPreviewSets] maximum number of related appPreviewSets returned (when they are included)
     * @param {Number} [limitSearchKeywords] maximum number of related searchKeywords returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionLocalizationsResponse}
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appScreenshotSets]': this.apiClient.buildCollectionParam(opts['fieldsAppScreenshotSets'], 'csv'),
        'fields[appPreviewSets]': this.apiClient.buildCollectionParam(opts['fieldsAppPreviewSets'], 'csv'),
        'fields[appKeywords]': this.apiClient.buildCollectionParam(opts['fieldsAppKeywords'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appScreenshotSets]': opts['limitAppScreenshotSets'],
        'limit[appPreviewSets]': opts['limitAppPreviewSets'],
        'limit[searchKeywords]': opts['limitSearchKeywords']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreVersionLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreVersionLocalizationsLinkagesResponse}
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreVersionLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreVersionLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionPhasedReleaseWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionPhasedReleaseWithoutIncludesResponse}
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionPhasedReleaseWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreVersionPhasedReleaseLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreVersionPhasedReleaseLinkageResponse}
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreVersionPhasedReleaseLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreVersionPhasedRelease', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionSubmissionGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionSubmissionResponse}
     */
    appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionSubmissionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionSubmissionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/appStoreVersionSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsAppStoreVersionSubmissionGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionAppStoreVersionSubmissionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionAppStoreVersionSubmissionLinkageResponse}
     */
    appStoreVersionsAppStoreVersionSubmissionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsAppStoreVersionSubmissionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionAppStoreVersionSubmissionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/appStoreVersionSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildWithoutIncludesResponse}
     */
    appStoreVersionsBuildGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionBuildLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionBuildLinkageResponse}
     */
    appStoreVersionsBuildGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionBuildLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsBuildUpdateToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsBuildUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionBuildLinkageRequest} appStoreVersionBuildLinkageRequest Related linkage
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsBuildUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionsBuildUpdateToOneRelationship(id, appStoreVersionBuildLinkageRequest, callback) {
      let postBody = appStoreVersionBuildLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsBuildUpdateToOneRelationship");
      }
      // verify the required parameter 'appStoreVersionBuildLinkageRequest' is set
      if (appStoreVersionBuildLinkageRequest === undefined || appStoreVersionBuildLinkageRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionBuildLinkageRequest' when calling appStoreVersionsBuildUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/build', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsCreateInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppStoreVersionCreateRequest} appStoreVersionCreateRequest AppStoreVersion representation
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsCreateInstance(appStoreVersionCreateRequest, callback) {
      let postBody = appStoreVersionCreateRequest;
      // verify the required parameter 'appStoreVersionCreateRequest' is set
      if (appStoreVersionCreateRequest === undefined || appStoreVersionCreateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionCreateRequest' when calling appStoreVersionsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsCustomerReviewsGetToManyRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsCustomerReviewsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerReviewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterTerritory] filter by attribute 'territory'
     * @param {Array.<String>} [filterRating] filter by attribute 'rating'
     * @param {Boolean} [existsPublishedResponse] filter by publishedResponse
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsCustomerReviews] the fields to include for returned resources of type customerReviews
     * @param {Array.<module:model/String>} [fieldsCustomerReviewResponses] the fields to include for returned resources of type customerReviewResponses
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsCustomerReviewsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerReviewsResponse}
     */
    appStoreVersionsCustomerReviewsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsCustomerReviewsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'filter[rating]': this.apiClient.buildCollectionParam(opts['filterRating'], 'csv'),
        'exists[publishedResponse]': opts['existsPublishedResponse'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[customerReviews]': this.apiClient.buildCollectionParam(opts['fieldsCustomerReviews'], 'csv'),
        'fields[customerReviewResponses]': this.apiClient.buildCollectionParam(opts['fieldsCustomerReviewResponses'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerReviewsResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/customerReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsCustomerReviewsGetToManyRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsCustomerReviewsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionCustomerReviewsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsCustomerReviewsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionCustomerReviewsLinkagesResponse}
     */
    appStoreVersionsCustomerReviewsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsCustomerReviewsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionCustomerReviewsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/customerReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsDeleteInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appStoreVersionsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsGameCenterAppVersionGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsGameCenterAppVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAppVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCompatibilityVersions] maximum number of related compatibilityVersions returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsGameCenterAppVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAppVersionResponse}
     */
    appStoreVersionsGameCenterAppVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsGameCenterAppVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[compatibilityVersions]': opts['limitCompatibilityVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAppVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/gameCenterAppVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsGameCenterAppVersionGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsGameCenterAppVersionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionGameCenterAppVersionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsGameCenterAppVersionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionGameCenterAppVersionLinkageResponse}
     */
    appStoreVersionsGameCenterAppVersionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsGameCenterAppVersionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionGameCenterAppVersionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/gameCenterAppVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsGetInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackages] the fields to include for returned resources of type alternativeDistributionPackages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionExperiments] maximum number of related appStoreVersionExperiments returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {Number} [limitAppStoreVersionLocalizations] maximum number of related appStoreVersionLocalizations returned (when they are included)
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[alternativeDistributionPackages]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionExperiments]': opts['limitAppStoreVersionExperiments'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2'],
        'limit[appStoreVersionLocalizations]': opts['limitAppStoreVersionLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsRoutingAppCoverageGetToOneRelated operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingAppCoverageWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingAppCoverageWithoutIncludesResponse}
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsRoutingAppCoverageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoutingAppCoverageWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/routingAppCoverage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsRoutingAppCoverageGetToOneRelationship operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionRoutingAppCoverageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsRoutingAppCoverageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionRoutingAppCoverageLinkageResponse}
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsRoutingAppCoverageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionRoutingAppCoverageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}/relationships/routingAppCoverage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appStoreVersionsUpdateInstance operation.
     * @callback module:api/AppStoreVersionsApi~appStoreVersionsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppStoreVersionUpdateRequest} appStoreVersionUpdateRequest AppStoreVersion representation
     * @param {module:api/AppStoreVersionsApi~appStoreVersionsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appStoreVersionsUpdateInstance(id, appStoreVersionUpdateRequest, callback) {
      let postBody = appStoreVersionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appStoreVersionsUpdateInstance");
      }
      // verify the required parameter 'appStoreVersionUpdateRequest' is set
      if (appStoreVersionUpdateRequest === undefined || appStoreVersionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appStoreVersionUpdateRequest' when calling appStoreVersionsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appStoreVersions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
