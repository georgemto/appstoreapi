/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppResponse from '../model/AppResponse';
import CiBuildRunsResponse from '../model/CiBuildRunsResponse';
import CiProductAdditionalRepositoriesLinkagesResponse from '../model/CiProductAdditionalRepositoriesLinkagesResponse';
import CiProductAppLinkageResponse from '../model/CiProductAppLinkageResponse';
import CiProductBuildRunsLinkagesResponse from '../model/CiProductBuildRunsLinkagesResponse';
import CiProductPrimaryRepositoriesLinkagesResponse from '../model/CiProductPrimaryRepositoriesLinkagesResponse';
import CiProductResponse from '../model/CiProductResponse';
import CiProductWorkflowsLinkagesResponse from '../model/CiProductWorkflowsLinkagesResponse';
import CiProductsResponse from '../model/CiProductsResponse';
import CiWorkflowsResponse from '../model/CiWorkflowsResponse';
import ErrorResponse from '../model/ErrorResponse';
import ScmRepositoriesResponse from '../model/ScmRepositoriesResponse';

/**
* CiProducts service.
* @module api/CiProductsApi
* @version 4.1
*/
export default class CiProductsApi {

    /**
    * Constructs a new CiProductsApi. 
    * @alias module:api/CiProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ciProductsAdditionalRepositoriesGetToManyRelated operation.
     * @callback module:api/CiProductsApi~ciProductsAdditionalRepositoriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiProductsApi~ciProductsAdditionalRepositoriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoriesResponse}
     */
    ciProductsAdditionalRepositoriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsAdditionalRepositoriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoriesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/additionalRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsAdditionalRepositoriesGetToManyRelationship operation.
     * @callback module:api/CiProductsApi~ciProductsAdditionalRepositoriesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductAdditionalRepositoriesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiProductsApi~ciProductsAdditionalRepositoriesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductAdditionalRepositoriesLinkagesResponse}
     */
    ciProductsAdditionalRepositoriesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsAdditionalRepositoriesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductAdditionalRepositoriesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/relationships/additionalRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsAppGetToOneRelated operation.
     * @callback module:api/CiProductsApi~ciProductsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaAppLocalizations] the fields to include for returned resources of type betaAppLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsBetaLicenseAgreements] the fields to include for returned resources of type betaLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewDetails] the fields to include for returned resources of type betaAppReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppInfos] the fields to include for returned resources of type appInfos
     * @param {Array.<module:model/String>} [fieldsAppClips] the fields to include for returned resources of type appClips
     * @param {Array.<module:model/String>} [fieldsEndUserLicenseAgreements] the fields to include for returned resources of type endUserLicenseAgreements
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptionGroups] the fields to include for returned resources of type subscriptionGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterEnabledVersions] the fields to include for returned resources of type gameCenterEnabledVersions
     * @param {Array.<module:model/String>} [fieldsAppCustomProductPages] the fields to include for returned resources of type appCustomProductPages
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsAppEvents] the fields to include for returned resources of type appEvents
     * @param {Array.<module:model/String>} [fieldsReviewSubmissions] the fields to include for returned resources of type reviewSubmissions
     * @param {Array.<module:model/String>} [fieldsSubscriptionGracePeriods] the fields to include for returned resources of type subscriptionGracePeriods
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppEncryptionDeclarations] maximum number of related appEncryptionDeclarations returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitAppStoreVersions] maximum number of related appStoreVersions returned (when they are included)
     * @param {Number} [limitPreReleaseVersions] maximum number of related preReleaseVersions returned (when they are included)
     * @param {Number} [limitBetaAppLocalizations] maximum number of related betaAppLocalizations returned (when they are included)
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {Number} [limitAppInfos] maximum number of related appInfos returned (when they are included)
     * @param {Number} [limitAppClips] maximum number of related appClips returned (when they are included)
     * @param {Number} [limitInAppPurchases] maximum number of related inAppPurchases returned (when they are included)
     * @param {Number} [limitSubscriptionGroups] maximum number of related subscriptionGroups returned (when they are included)
     * @param {Number} [limitGameCenterEnabledVersions] maximum number of related gameCenterEnabledVersions returned (when they are included)
     * @param {Number} [limitAppCustomProductPages] maximum number of related appCustomProductPages returned (when they are included)
     * @param {Number} [limitInAppPurchasesV2] maximum number of related inAppPurchasesV2 returned (when they are included)
     * @param {Number} [limitPromotedPurchases] maximum number of related promotedPurchases returned (when they are included)
     * @param {Number} [limitAppEvents] maximum number of related appEvents returned (when they are included)
     * @param {Number} [limitReviewSubmissions] maximum number of related reviewSubmissions returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {module:api/CiProductsApi~ciProductsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    ciProductsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaAppLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[betaLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsBetaLicenseAgreements'], 'csv'),
        'fields[betaAppReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewDetails'], 'csv'),
        'fields[appInfos]': this.apiClient.buildCollectionParam(opts['fieldsAppInfos'], 'csv'),
        'fields[appClips]': this.apiClient.buildCollectionParam(opts['fieldsAppClips'], 'csv'),
        'fields[endUserLicenseAgreements]': this.apiClient.buildCollectionParam(opts['fieldsEndUserLicenseAgreements'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[subscriptionGroups]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGroups'], 'csv'),
        'fields[gameCenterEnabledVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterEnabledVersions'], 'csv'),
        'fields[appCustomProductPages]': this.apiClient.buildCollectionParam(opts['fieldsAppCustomProductPages'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[appEvents]': this.apiClient.buildCollectionParam(opts['fieldsAppEvents'], 'csv'),
        'fields[reviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsReviewSubmissions'], 'csv'),
        'fields[subscriptionGracePeriods]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionGracePeriods'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appEncryptionDeclarations]': opts['limitAppEncryptionDeclarations'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[appStoreVersions]': opts['limitAppStoreVersions'],
        'limit[preReleaseVersions]': opts['limitPreReleaseVersions'],
        'limit[betaAppLocalizations]': opts['limitBetaAppLocalizations'],
        'limit[builds]': opts['limitBuilds'],
        'limit[appInfos]': opts['limitAppInfos'],
        'limit[appClips]': opts['limitAppClips'],
        'limit[inAppPurchases]': opts['limitInAppPurchases'],
        'limit[subscriptionGroups]': opts['limitSubscriptionGroups'],
        'limit[gameCenterEnabledVersions]': opts['limitGameCenterEnabledVersions'],
        'limit[appCustomProductPages]': opts['limitAppCustomProductPages'],
        'limit[inAppPurchasesV2]': opts['limitInAppPurchasesV2'],
        'limit[promotedPurchases]': opts['limitPromotedPurchases'],
        'limit[appEvents]': opts['limitAppEvents'],
        'limit[reviewSubmissions]': opts['limitReviewSubmissions'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsAppGetToOneRelationship operation.
     * @callback module:api/CiProductsApi~ciProductsAppGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductAppLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/CiProductsApi~ciProductsAppGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductAppLinkageResponse}
     */
    ciProductsAppGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsAppGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductAppLinkageResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/relationships/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsBuildRunsGetToManyRelated operation.
     * @callback module:api/CiProductsApi~ciProductsBuildRunsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsCiWorkflows] the fields to include for returned resources of type ciWorkflows
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Array.<module:model/String>} [fieldsScmPullRequests] the fields to include for returned resources of type scmPullRequests
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/CiProductsApi~ciProductsBuildRunsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunsResponse}
     */
    ciProductsBuildRunsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsBuildRunsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[ciWorkflows]': this.apiClient.buildCollectionParam(opts['fieldsCiWorkflows'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'fields[scmPullRequests]': this.apiClient.buildCollectionParam(opts['fieldsScmPullRequests'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunsResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/buildRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsBuildRunsGetToManyRelationship operation.
     * @callback module:api/CiProductsApi~ciProductsBuildRunsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductBuildRunsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiProductsApi~ciProductsBuildRunsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductBuildRunsLinkagesResponse}
     */
    ciProductsBuildRunsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsBuildRunsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductBuildRunsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/relationships/buildRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsDeleteInstance operation.
     * @callback module:api/CiProductsApi~ciProductsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/CiProductsApi~ciProductsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ciProductsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsGetCollection operation.
     * @callback module:api/CiProductsApi~ciProductsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterProductType] filter by attribute 'productType'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrimaryRepositories] maximum number of related primaryRepositories returned (when they are included)
     * @param {module:api/CiProductsApi~ciProductsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductsResponse}
     */
    ciProductsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[productType]': this.apiClient.buildCollectionParam(opts['filterProductType'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[primaryRepositories]': opts['limitPrimaryRepositories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductsResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsGetInstance operation.
     * @callback module:api/CiProductsApi~ciProductsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrimaryRepositories] maximum number of related primaryRepositories returned (when they are included)
     * @param {module:api/CiProductsApi~ciProductsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductResponse}
     */
    ciProductsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[primaryRepositories]': opts['limitPrimaryRepositories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsPrimaryRepositoriesGetToManyRelated operation.
     * @callback module:api/CiProductsApi~ciProductsPrimaryRepositoriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiProductsApi~ciProductsPrimaryRepositoriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoriesResponse}
     */
    ciProductsPrimaryRepositoriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsPrimaryRepositoriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoriesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/primaryRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsPrimaryRepositoriesGetToManyRelationship operation.
     * @callback module:api/CiProductsApi~ciProductsPrimaryRepositoriesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductPrimaryRepositoriesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiProductsApi~ciProductsPrimaryRepositoriesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductPrimaryRepositoriesLinkagesResponse}
     */
    ciProductsPrimaryRepositoriesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsPrimaryRepositoriesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductPrimaryRepositoriesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/relationships/primaryRepositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsWorkflowsGetToManyRelated operation.
     * @callback module:api/CiProductsApi~ciProductsWorkflowsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiWorkflows] the fields to include for returned resources of type ciWorkflows
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [fieldsCiXcodeVersions] the fields to include for returned resources of type ciXcodeVersions
     * @param {Array.<module:model/String>} [fieldsCiMacOsVersions] the fields to include for returned resources of type ciMacOsVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiProductsApi~ciProductsWorkflowsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowsResponse}
     */
    ciProductsWorkflowsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsWorkflowsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciWorkflows]': this.apiClient.buildCollectionParam(opts['fieldsCiWorkflows'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'fields[ciXcodeVersions]': this.apiClient.buildCollectionParam(opts['fieldsCiXcodeVersions'], 'csv'),
        'fields[ciMacOsVersions]': this.apiClient.buildCollectionParam(opts['fieldsCiMacOsVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiWorkflowsResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciProductsWorkflowsGetToManyRelationship operation.
     * @callback module:api/CiProductsApi~ciProductsWorkflowsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiProductWorkflowsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiProductsApi~ciProductsWorkflowsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiProductWorkflowsLinkagesResponse}
     */
    ciProductsWorkflowsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciProductsWorkflowsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiProductWorkflowsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciProducts/{id}/relationships/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
