/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import SubscriptionOfferCodeOneTimeUseCodeCreateRequest from '../model/SubscriptionOfferCodeOneTimeUseCodeCreateRequest';
import SubscriptionOfferCodeOneTimeUseCodeResponse from '../model/SubscriptionOfferCodeOneTimeUseCodeResponse';
import SubscriptionOfferCodeOneTimeUseCodeUpdateRequest from '../model/SubscriptionOfferCodeOneTimeUseCodeUpdateRequest';

/**
* SubscriptionOfferCodeOneTimeUseCodes service.
* @module api/SubscriptionOfferCodeOneTimeUseCodesApi
* @version 4.1
*/
export default class SubscriptionOfferCodeOneTimeUseCodesApi {

    /**
    * Constructs a new SubscriptionOfferCodeOneTimeUseCodesApi. 
    * @alias module:api/SubscriptionOfferCodeOneTimeUseCodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionOfferCodeOneTimeUseCodesCreateInstance operation.
     * @callback module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodeCreateRequest} subscriptionOfferCodeOneTimeUseCodeCreateRequest SubscriptionOfferCodeOneTimeUseCode representation
     * @param {module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeOneTimeUseCodeResponse}
     */
    subscriptionOfferCodeOneTimeUseCodesCreateInstance(subscriptionOfferCodeOneTimeUseCodeCreateRequest, callback) {
      let postBody = subscriptionOfferCodeOneTimeUseCodeCreateRequest;
      // verify the required parameter 'subscriptionOfferCodeOneTimeUseCodeCreateRequest' is set
      if (subscriptionOfferCodeOneTimeUseCodeCreateRequest === undefined || subscriptionOfferCodeOneTimeUseCodeCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionOfferCodeOneTimeUseCodeCreateRequest' when calling subscriptionOfferCodeOneTimeUseCodesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeOneTimeUseCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodeOneTimeUseCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodeOneTimeUseCodesGetInstance operation.
     * @callback module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeOneTimeUseCodes] the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeOneTimeUseCodeResponse}
     */
    subscriptionOfferCodeOneTimeUseCodesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodeOneTimeUseCodesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionOfferCodeOneTimeUseCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeOneTimeUseCodes'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeOneTimeUseCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodeOneTimeUseCodesUpdateInstance operation.
     * @callback module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionOfferCodeOneTimeUseCodeUpdateRequest} subscriptionOfferCodeOneTimeUseCodeUpdateRequest SubscriptionOfferCodeOneTimeUseCode representation
     * @param {module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodeOneTimeUseCodeResponse}
     */
    subscriptionOfferCodeOneTimeUseCodesUpdateInstance(id, subscriptionOfferCodeOneTimeUseCodeUpdateRequest, callback) {
      let postBody = subscriptionOfferCodeOneTimeUseCodeUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodeOneTimeUseCodesUpdateInstance");
      }
      // verify the required parameter 'subscriptionOfferCodeOneTimeUseCodeUpdateRequest' is set
      if (subscriptionOfferCodeOneTimeUseCodeUpdateRequest === undefined || subscriptionOfferCodeOneTimeUseCodeUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionOfferCodeOneTimeUseCodeUpdateRequest' when calling subscriptionOfferCodeOneTimeUseCodesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodeOneTimeUseCodeResponse;
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated operation.
     * @callback module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionOfferCodeOneTimeUseCodesApi~subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
