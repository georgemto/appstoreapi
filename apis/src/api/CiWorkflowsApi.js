/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CiBuildRunsResponse from '../model/CiBuildRunsResponse';
import CiWorkflowBuildRunsLinkagesResponse from '../model/CiWorkflowBuildRunsLinkagesResponse';
import CiWorkflowCreateRequest from '../model/CiWorkflowCreateRequest';
import CiWorkflowRepositoryLinkageResponse from '../model/CiWorkflowRepositoryLinkageResponse';
import CiWorkflowResponse from '../model/CiWorkflowResponse';
import CiWorkflowUpdateRequest from '../model/CiWorkflowUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';
import ScmRepositoryResponse from '../model/ScmRepositoryResponse';

/**
* CiWorkflows service.
* @module api/CiWorkflowsApi
* @version 4.1
*/
export default class CiWorkflowsApi {

    /**
    * Constructs a new CiWorkflowsApi. 
    * @alias module:api/CiWorkflowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ciWorkflowsBuildRunsGetToManyRelated operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsBuildRunsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterBuilds] filter by id(s) of related 'builds'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsCiWorkflows] the fields to include for returned resources of type ciWorkflows
     * @param {Array.<module:model/String>} [fieldsCiProducts] the fields to include for returned resources of type ciProducts
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Array.<module:model/String>} [fieldsScmPullRequests] the fields to include for returned resources of type scmPullRequests
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/CiWorkflowsApi~ciWorkflowsBuildRunsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunsResponse}
     */
    ciWorkflowsBuildRunsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsBuildRunsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[builds]': this.apiClient.buildCollectionParam(opts['filterBuilds'], 'csv'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[ciWorkflows]': this.apiClient.buildCollectionParam(opts['fieldsCiWorkflows'], 'csv'),
        'fields[ciProducts]': this.apiClient.buildCollectionParam(opts['fieldsCiProducts'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'fields[scmPullRequests]': this.apiClient.buildCollectionParam(opts['fieldsScmPullRequests'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunsResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}/buildRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsBuildRunsGetToManyRelationship operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsBuildRunsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowBuildRunsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiWorkflowsApi~ciWorkflowsBuildRunsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowBuildRunsLinkagesResponse}
     */
    ciWorkflowsBuildRunsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsBuildRunsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiWorkflowBuildRunsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}/relationships/buildRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsCreateInstance operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CiWorkflowCreateRequest} ciWorkflowCreateRequest CiWorkflow representation
     * @param {module:api/CiWorkflowsApi~ciWorkflowsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowResponse}
     */
    ciWorkflowsCreateInstance(ciWorkflowCreateRequest, callback) {
      let postBody = ciWorkflowCreateRequest;
      // verify the required parameter 'ciWorkflowCreateRequest' is set
      if (ciWorkflowCreateRequest === undefined || ciWorkflowCreateRequest === null) {
        throw new Error("Missing the required parameter 'ciWorkflowCreateRequest' when calling ciWorkflowsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CiWorkflowResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsDeleteInstance operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/CiWorkflowsApi~ciWorkflowsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ciWorkflowsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsGetInstance operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiWorkflows] the fields to include for returned resources of type ciWorkflows
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiWorkflowsApi~ciWorkflowsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowResponse}
     */
    ciWorkflowsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciWorkflows]': this.apiClient.buildCollectionParam(opts['fieldsCiWorkflows'], 'csv'),
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiWorkflowResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsRepositoryGetToOneRelated operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsRepositoryGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsScmRepositories] the fields to include for returned resources of type scmRepositories
     * @param {Array.<module:model/String>} [fieldsScmProviders] the fields to include for returned resources of type scmProviders
     * @param {Array.<module:model/String>} [fieldsScmGitReferences] the fields to include for returned resources of type scmGitReferences
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiWorkflowsApi~ciWorkflowsRepositoryGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmRepositoryResponse}
     */
    ciWorkflowsRepositoryGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsRepositoryGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[scmRepositories]': this.apiClient.buildCollectionParam(opts['fieldsScmRepositories'], 'csv'),
        'fields[scmProviders]': this.apiClient.buildCollectionParam(opts['fieldsScmProviders'], 'csv'),
        'fields[scmGitReferences]': this.apiClient.buildCollectionParam(opts['fieldsScmGitReferences'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScmRepositoryResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}/repository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsRepositoryGetToOneRelationship operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsRepositoryGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowRepositoryLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/CiWorkflowsApi~ciWorkflowsRepositoryGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowRepositoryLinkageResponse}
     */
    ciWorkflowsRepositoryGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsRepositoryGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiWorkflowRepositoryLinkageResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}/relationships/repository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciWorkflowsUpdateInstance operation.
     * @callback module:api/CiWorkflowsApi~ciWorkflowsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/CiWorkflowUpdateRequest} ciWorkflowUpdateRequest CiWorkflow representation
     * @param {module:api/CiWorkflowsApi~ciWorkflowsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiWorkflowResponse}
     */
    ciWorkflowsUpdateInstance(id, ciWorkflowUpdateRequest, callback) {
      let postBody = ciWorkflowUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciWorkflowsUpdateInstance");
      }
      // verify the required parameter 'ciWorkflowUpdateRequest' is set
      if (ciWorkflowUpdateRequest === undefined || ciWorkflowUpdateRequest === null) {
        throw new Error("Missing the required parameter 'ciWorkflowUpdateRequest' when calling ciWorkflowsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CiWorkflowResponse;
      return this.apiClient.callApi(
        '/v1/ciWorkflows/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
