/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PromotedPurchaseResponse from '../model/PromotedPurchaseResponse';
import SubscriptionAppStoreReviewScreenshotLinkageResponse from '../model/SubscriptionAppStoreReviewScreenshotLinkageResponse';
import SubscriptionAppStoreReviewScreenshotResponse from '../model/SubscriptionAppStoreReviewScreenshotResponse';
import SubscriptionAvailabilityResponse from '../model/SubscriptionAvailabilityResponse';
import SubscriptionCreateRequest from '../model/SubscriptionCreateRequest';
import SubscriptionImagesLinkagesResponse from '../model/SubscriptionImagesLinkagesResponse';
import SubscriptionImagesResponse from '../model/SubscriptionImagesResponse';
import SubscriptionIntroductoryOffersLinkagesRequest from '../model/SubscriptionIntroductoryOffersLinkagesRequest';
import SubscriptionIntroductoryOffersLinkagesResponse from '../model/SubscriptionIntroductoryOffersLinkagesResponse';
import SubscriptionIntroductoryOffersResponse from '../model/SubscriptionIntroductoryOffersResponse';
import SubscriptionLocalizationsResponse from '../model/SubscriptionLocalizationsResponse';
import SubscriptionOfferCodesLinkagesResponse from '../model/SubscriptionOfferCodesLinkagesResponse';
import SubscriptionOfferCodesResponse from '../model/SubscriptionOfferCodesResponse';
import SubscriptionPricePointsLinkagesResponse from '../model/SubscriptionPricePointsLinkagesResponse';
import SubscriptionPricePointsResponse from '../model/SubscriptionPricePointsResponse';
import SubscriptionPricesLinkagesRequest from '../model/SubscriptionPricesLinkagesRequest';
import SubscriptionPricesLinkagesResponse from '../model/SubscriptionPricesLinkagesResponse';
import SubscriptionPricesResponse from '../model/SubscriptionPricesResponse';
import SubscriptionPromotedPurchaseLinkageResponse from '../model/SubscriptionPromotedPurchaseLinkageResponse';
import SubscriptionPromotionalOffersLinkagesResponse from '../model/SubscriptionPromotionalOffersLinkagesResponse';
import SubscriptionPromotionalOffersResponse from '../model/SubscriptionPromotionalOffersResponse';
import SubscriptionResponse from '../model/SubscriptionResponse';
import SubscriptionSubscriptionAvailabilityLinkageResponse from '../model/SubscriptionSubscriptionAvailabilityLinkageResponse';
import SubscriptionSubscriptionLocalizationsLinkagesResponse from '../model/SubscriptionSubscriptionLocalizationsLinkagesResponse';
import SubscriptionUpdateRequest from '../model/SubscriptionUpdateRequest';
import SubscriptionWinBackOffersLinkagesResponse from '../model/SubscriptionWinBackOffersLinkagesResponse';
import WinBackOffersResponse from '../model/WinBackOffersResponse';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 4.1
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionsAppStoreReviewScreenshotGetToOneRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsAppStoreReviewScreenshotGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionAppStoreReviewScreenshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionAppStoreReviewScreenshots] the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsAppStoreReviewScreenshotGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionAppStoreReviewScreenshotResponse}
     */
    subscriptionsAppStoreReviewScreenshotGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsAppStoreReviewScreenshotGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionAppStoreReviewScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAppStoreReviewScreenshots'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionAppStoreReviewScreenshotResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/appStoreReviewScreenshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsAppStoreReviewScreenshotGetToOneRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsAppStoreReviewScreenshotGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionAppStoreReviewScreenshotLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionsApi~subscriptionsAppStoreReviewScreenshotGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionAppStoreReviewScreenshotLinkageResponse}
     */
    subscriptionsAppStoreReviewScreenshotGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsAppStoreReviewScreenshotGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionAppStoreReviewScreenshotLinkageResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/appStoreReviewScreenshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsCreateInstance operation.
     * @callback module:api/SubscriptionsApi~subscriptionsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionCreateRequest} subscriptionCreateRequest Subscription representation
     * @param {module:api/SubscriptionsApi~subscriptionsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    subscriptionsCreateInstance(subscriptionCreateRequest, callback) {
      let postBody = subscriptionCreateRequest;
      // verify the required parameter 'subscriptionCreateRequest' is set
      if (subscriptionCreateRequest === undefined || subscriptionCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionCreateRequest' when calling subscriptionsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsDeleteInstance operation.
     * @callback module:api/SubscriptionsApi~subscriptionsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionsApi~subscriptionsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsGetInstance operation.
     * @callback module:api/SubscriptionsApi~subscriptionsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionLocalizations] the fields to include for returned resources of type subscriptionLocalizations
     * @param {Array.<module:model/String>} [fieldsSubscriptionAppStoreReviewScreenshots] the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
     * @param {Array.<module:model/String>} [fieldsSubscriptionIntroductoryOffers] the fields to include for returned resources of type subscriptionIntroductoryOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOffers] the fields to include for returned resources of type subscriptionPromotionalOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionPrices] the fields to include for returned resources of type subscriptionPrices
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptionAvailabilities] the fields to include for returned resources of type subscriptionAvailabilities
     * @param {Array.<module:model/String>} [fieldsWinBackOffers] the fields to include for returned resources of type winBackOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptionImages] the fields to include for returned resources of type subscriptionImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitImages] maximum number of related images returned (when they are included)
     * @param {Number} [limitIntroductoryOffers] maximum number of related introductoryOffers returned (when they are included)
     * @param {Number} [limitOfferCodes] maximum number of related offerCodes returned (when they are included)
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {Number} [limitPromotionalOffers] maximum number of related promotionalOffers returned (when they are included)
     * @param {Number} [limitSubscriptionLocalizations] maximum number of related subscriptionLocalizations returned (when they are included)
     * @param {Number} [limitWinBackOffers] maximum number of related winBackOffers returned (when they are included)
     * @param {module:api/SubscriptionsApi~subscriptionsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    subscriptionsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionLocalizations'], 'csv'),
        'fields[subscriptionAppStoreReviewScreenshots]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAppStoreReviewScreenshots'], 'csv'),
        'fields[subscriptionIntroductoryOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionIntroductoryOffers'], 'csv'),
        'fields[subscriptionPromotionalOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOffers'], 'csv'),
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'fields[subscriptionPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPrices'], 'csv'),
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[subscriptionAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAvailabilities'], 'csv'),
        'fields[winBackOffers]': this.apiClient.buildCollectionParam(opts['fieldsWinBackOffers'], 'csv'),
        'fields[subscriptionImages]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[images]': opts['limitImages'],
        'limit[introductoryOffers]': opts['limitIntroductoryOffers'],
        'limit[offerCodes]': opts['limitOfferCodes'],
        'limit[prices]': opts['limitPrices'],
        'limit[promotionalOffers]': opts['limitPromotionalOffers'],
        'limit[subscriptionLocalizations]': opts['limitSubscriptionLocalizations'],
        'limit[winBackOffers]': opts['limitWinBackOffers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsImagesGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsImagesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionImages] the fields to include for returned resources of type subscriptionImages
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsImagesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionImagesResponse}
     */
    subscriptionsImagesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsImagesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionImages]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionImages'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionImagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsImagesGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsImagesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionImagesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsImagesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionImagesLinkagesResponse}
     */
    subscriptionsImagesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsImagesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionImagesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsIntroductoryOffersDeleteToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsIntroductoryOffersDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionIntroductoryOffersLinkagesRequest} subscriptionIntroductoryOffersLinkagesRequest List of related linkages
     * @param {module:api/SubscriptionsApi~subscriptionsIntroductoryOffersDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsIntroductoryOffersDeleteToManyRelationship(id, subscriptionIntroductoryOffersLinkagesRequest, callback) {
      let postBody = subscriptionIntroductoryOffersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsIntroductoryOffersDeleteToManyRelationship");
      }
      // verify the required parameter 'subscriptionIntroductoryOffersLinkagesRequest' is set
      if (subscriptionIntroductoryOffersLinkagesRequest === undefined || subscriptionIntroductoryOffersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionIntroductoryOffersLinkagesRequest' when calling subscriptionsIntroductoryOffersDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/introductoryOffers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsIntroductoryOffersGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsIntroductoryOffersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionIntroductoryOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsSubscriptionIntroductoryOffers] the fields to include for returned resources of type subscriptionIntroductoryOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [fieldsSubscriptionPricePoints] the fields to include for returned resources of type subscriptionPricePoints
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsIntroductoryOffersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionIntroductoryOffersResponse}
     */
    subscriptionsIntroductoryOffersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsIntroductoryOffersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionIntroductoryOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionIntroductoryOffers'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'fields[subscriptionPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPricePoints'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionIntroductoryOffersResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/introductoryOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsIntroductoryOffersGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsIntroductoryOffersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionIntroductoryOffersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsIntroductoryOffersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionIntroductoryOffersLinkagesResponse}
     */
    subscriptionsIntroductoryOffersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsIntroductoryOffersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionIntroductoryOffersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/introductoryOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsOfferCodesGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsOfferCodesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by territory
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodes] the fields to include for returned resources of type subscriptionOfferCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeOneTimeUseCodes] the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodeCustomCodes] the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
     * @param {Array.<module:model/String>} [fieldsSubscriptionOfferCodePrices] the fields to include for returned resources of type subscriptionOfferCodePrices
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitOneTimeUseCodes] maximum number of related oneTimeUseCodes returned (when they are included)
     * @param {Number} [limitCustomCodes] maximum number of related customCodes returned (when they are included)
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {module:api/SubscriptionsApi~subscriptionsOfferCodesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodesResponse}
     */
    subscriptionsOfferCodesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsOfferCodesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionOfferCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodes'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionOfferCodeOneTimeUseCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeOneTimeUseCodes'], 'csv'),
        'fields[subscriptionOfferCodeCustomCodes]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodeCustomCodes'], 'csv'),
        'fields[subscriptionOfferCodePrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionOfferCodePrices'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[oneTimeUseCodes]': opts['limitOneTimeUseCodes'],
        'limit[customCodes]': opts['limitCustomCodes'],
        'limit[prices]': opts['limitPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/offerCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsOfferCodesGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsOfferCodesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOfferCodesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsOfferCodesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOfferCodesLinkagesResponse}
     */
    subscriptionsOfferCodesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsOfferCodesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOfferCodesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/offerCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPricePointsGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPricePointsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPricePointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsSubscriptionPricePoints] the fields to include for returned resources of type subscriptionPricePoints
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsPricePointsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPricePointsResponse}
     */
    subscriptionsPricePointsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPricePointsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPricePoints'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = SubscriptionPricePointsResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/pricePoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPricePointsGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPricePointsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPricePointsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsPricePointsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPricePointsLinkagesResponse}
     */
    subscriptionsPricePointsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPricePointsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPricePointsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/pricePoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPricesDeleteToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPricesDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionPricesLinkagesRequest} subscriptionPricesLinkagesRequest List of related linkages
     * @param {module:api/SubscriptionsApi~subscriptionsPricesDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsPricesDeleteToManyRelationship(id, subscriptionPricesLinkagesRequest, callback) {
      let postBody = subscriptionPricesLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPricesDeleteToManyRelationship");
      }
      // verify the required parameter 'subscriptionPricesLinkagesRequest' is set
      if (subscriptionPricesLinkagesRequest === undefined || subscriptionPricesLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionPricesLinkagesRequest' when calling subscriptionsPricesDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/prices', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPricesGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPricesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterSubscriptionPricePoint] filter by id(s) of related 'subscriptionPricePoint'
     * @param {Array.<String>} [filterTerritory] filter by id(s) of related 'territory'
     * @param {Array.<module:model/String>} [fieldsSubscriptionPrices] the fields to include for returned resources of type subscriptionPrices
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [fieldsSubscriptionPricePoints] the fields to include for returned resources of type subscriptionPricePoints
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsPricesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPricesResponse}
     */
    subscriptionsPricesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPricesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[subscriptionPricePoint]': this.apiClient.buildCollectionParam(opts['filterSubscriptionPricePoint'], 'csv'),
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPrices'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'fields[subscriptionPricePoints]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPricePoints'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPricesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPricesGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPricesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPricesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsPricesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPricesLinkagesResponse}
     */
    subscriptionsPricesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPricesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPricesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPromotedPurchaseGetToOneRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPromotedPurchaseGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedPurchaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPromotedPurchases] the fields to include for returned resources of type promotedPurchases
     * @param {Array.<module:model/String>} [fieldsInAppPurchases] the fields to include for returned resources of type inAppPurchases
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsPromotedPurchaseGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedPurchaseResponse}
     */
    subscriptionsPromotedPurchaseGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPromotedPurchaseGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[promotedPurchases]': this.apiClient.buildCollectionParam(opts['fieldsPromotedPurchases'], 'csv'),
        'fields[inAppPurchases]': this.apiClient.buildCollectionParam(opts['fieldsInAppPurchases'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromotedPurchaseResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/promotedPurchase', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPromotedPurchaseGetToOneRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPromotedPurchaseGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotedPurchaseLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionsApi~subscriptionsPromotedPurchaseGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotedPurchaseLinkageResponse}
     */
    subscriptionsPromotedPurchaseGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPromotedPurchaseGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotedPurchaseLinkageResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/promotedPurchase', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPromotionalOffersGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPromotionalOffersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterTerritory] filter by territory
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOffers] the fields to include for returned resources of type subscriptionPromotionalOffers
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Array.<module:model/String>} [fieldsSubscriptionPromotionalOfferPrices] the fields to include for returned resources of type subscriptionPromotionalOfferPrices
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {module:api/SubscriptionsApi~subscriptionsPromotionalOffersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOffersResponse}
     */
    subscriptionsPromotionalOffersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPromotionalOffersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[territory]': this.apiClient.buildCollectionParam(opts['filterTerritory'], 'csv'),
        'fields[subscriptionPromotionalOffers]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOffers'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'fields[subscriptionPromotionalOfferPrices]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionPromotionalOfferPrices'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[prices]': opts['limitPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOffersResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/promotionalOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPromotionalOffersGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsPromotionalOffersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPromotionalOffersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsPromotionalOffersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPromotionalOffersLinkagesResponse}
     */
    subscriptionsPromotionalOffersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsPromotionalOffersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionPromotionalOffersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/promotionalOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionAvailabilityGetToOneRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionAvailabilityGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionAvailabilities] the fields to include for returned resources of type subscriptionAvailabilities
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAvailableTerritories] maximum number of related availableTerritories returned (when they are included)
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionAvailabilityGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionAvailabilityResponse}
     */
    subscriptionsSubscriptionAvailabilityGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsSubscriptionAvailabilityGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionAvailabilities]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionAvailabilities'], 'csv'),
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[availableTerritories]': opts['limitAvailableTerritories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionAvailabilityResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/subscriptionAvailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionAvailabilityGetToOneRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionAvailabilityGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSubscriptionAvailabilityLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionAvailabilityGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionSubscriptionAvailabilityLinkageResponse}
     */
    subscriptionsSubscriptionAvailabilityGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsSubscriptionAvailabilityGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionSubscriptionAvailabilityLinkageResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/subscriptionAvailability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionLocalizationsGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsSubscriptionLocalizations] the fields to include for returned resources of type subscriptionLocalizations
     * @param {Array.<module:model/String>} [fieldsSubscriptions] the fields to include for returned resources of type subscriptions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionLocalizationsResponse}
     */
    subscriptionsSubscriptionLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsSubscriptionLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[subscriptionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptionLocalizations'], 'csv'),
        'fields[subscriptions]': this.apiClient.buildCollectionParam(opts['fieldsSubscriptions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/subscriptionLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionLocalizationsGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionSubscriptionLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionSubscriptionLocalizationsLinkagesResponse}
     */
    subscriptionsSubscriptionLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsSubscriptionLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionSubscriptionLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/subscriptionLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsUpdateInstance operation.
     * @callback module:api/SubscriptionsApi~subscriptionsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/SubscriptionUpdateRequest} subscriptionUpdateRequest Subscription representation
     * @param {module:api/SubscriptionsApi~subscriptionsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    subscriptionsUpdateInstance(id, subscriptionUpdateRequest, callback) {
      let postBody = subscriptionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsUpdateInstance");
      }
      // verify the required parameter 'subscriptionUpdateRequest' is set
      if (subscriptionUpdateRequest === undefined || subscriptionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionUpdateRequest' when calling subscriptionsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsWinBackOffersGetToManyRelated operation.
     * @callback module:api/SubscriptionsApi~subscriptionsWinBackOffersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WinBackOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsWinBackOffers] the fields to include for returned resources of type winBackOffers
     * @param {Array.<module:model/String>} [fieldsWinBackOfferPrices] the fields to include for returned resources of type winBackOfferPrices
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitPrices] maximum number of related prices returned (when they are included)
     * @param {module:api/SubscriptionsApi~subscriptionsWinBackOffersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WinBackOffersResponse}
     */
    subscriptionsWinBackOffersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsWinBackOffersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[winBackOffers]': this.apiClient.buildCollectionParam(opts['fieldsWinBackOffers'], 'csv'),
        'fields[winBackOfferPrices]': this.apiClient.buildCollectionParam(opts['fieldsWinBackOfferPrices'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[prices]': opts['limitPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WinBackOffersResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/winBackOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsWinBackOffersGetToManyRelationship operation.
     * @callback module:api/SubscriptionsApi~subscriptionsWinBackOffersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionWinBackOffersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/SubscriptionsApi~subscriptionsWinBackOffersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionWinBackOffersLinkagesResponse}
     */
    subscriptionsWinBackOffersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subscriptionsWinBackOffersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionWinBackOffersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/subscriptions/{id}/relationships/winBackOffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
