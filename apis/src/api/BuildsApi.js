/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppEncryptionDeclarationWithoutIncludesResponse from '../model/AppEncryptionDeclarationWithoutIncludesResponse';
import AppStoreVersionResponse from '../model/AppStoreVersionResponse';
import AppWithoutIncludesResponse from '../model/AppWithoutIncludesResponse';
import BetaAppReviewSubmissionWithoutIncludesResponse from '../model/BetaAppReviewSubmissionWithoutIncludesResponse';
import BetaBuildLocalizationsWithoutIncludesResponse from '../model/BetaBuildLocalizationsWithoutIncludesResponse';
import BetaBuildUsagesV1MetricResponse from '../model/BetaBuildUsagesV1MetricResponse';
import BetaTestersWithoutIncludesResponse from '../model/BetaTestersWithoutIncludesResponse';
import BuildAppEncryptionDeclarationLinkageRequest from '../model/BuildAppEncryptionDeclarationLinkageRequest';
import BuildAppEncryptionDeclarationLinkageResponse from '../model/BuildAppEncryptionDeclarationLinkageResponse';
import BuildAppLinkageResponse from '../model/BuildAppLinkageResponse';
import BuildAppStoreVersionLinkageResponse from '../model/BuildAppStoreVersionLinkageResponse';
import BuildBetaAppReviewSubmissionLinkageResponse from '../model/BuildBetaAppReviewSubmissionLinkageResponse';
import BuildBetaBuildLocalizationsLinkagesResponse from '../model/BuildBetaBuildLocalizationsLinkagesResponse';
import BuildBetaDetailResponse from '../model/BuildBetaDetailResponse';
import BuildBetaGroupsLinkagesRequest from '../model/BuildBetaGroupsLinkagesRequest';
import BuildBuildBetaDetailLinkageResponse from '../model/BuildBuildBetaDetailLinkageResponse';
import BuildDiagnosticSignaturesLinkagesResponse from '../model/BuildDiagnosticSignaturesLinkagesResponse';
import BuildIconsLinkagesResponse from '../model/BuildIconsLinkagesResponse';
import BuildIconsWithoutIncludesResponse from '../model/BuildIconsWithoutIncludesResponse';
import BuildIndividualTestersLinkagesRequest from '../model/BuildIndividualTestersLinkagesRequest';
import BuildIndividualTestersLinkagesResponse from '../model/BuildIndividualTestersLinkagesResponse';
import BuildPreReleaseVersionLinkageResponse from '../model/BuildPreReleaseVersionLinkageResponse';
import BuildResponse from '../model/BuildResponse';
import BuildUpdateRequest from '../model/BuildUpdateRequest';
import BuildsResponse from '../model/BuildsResponse';
import DiagnosticSignaturesResponse from '../model/DiagnosticSignaturesResponse';
import ErrorResponse from '../model/ErrorResponse';
import PrereleaseVersionWithoutIncludesResponse from '../model/PrereleaseVersionWithoutIncludesResponse';
import XcodeMetrics from '../model/XcodeMetrics';

/**
* Builds service.
* @module api/BuildsApi
* @version 4.1
*/
export default class BuildsApi {

    /**
    * Constructs a new BuildsApi. 
    * @alias module:api/BuildsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEncryptionDeclarationWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEncryptionDeclarationWithoutIncludesResponse}
     */
    buildsAppEncryptionDeclarationGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEncryptionDeclarationWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/appEncryptionDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildAppEncryptionDeclarationLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildAppEncryptionDeclarationLinkageResponse}
     */
    buildsAppEncryptionDeclarationGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildAppEncryptionDeclarationLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/appEncryptionDeclaration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppEncryptionDeclarationUpdateToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppEncryptionDeclarationUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildAppEncryptionDeclarationLinkageRequest} buildAppEncryptionDeclarationLinkageRequest Related linkage
     * @param {module:api/BuildsApi~buildsAppEncryptionDeclarationUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsAppEncryptionDeclarationUpdateToOneRelationship(id, buildAppEncryptionDeclarationLinkageRequest, callback) {
      let postBody = buildAppEncryptionDeclarationLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship");
      }
      // verify the required parameter 'buildAppEncryptionDeclarationLinkageRequest' is set
      if (buildAppEncryptionDeclarationLinkageRequest === undefined || buildAppEncryptionDeclarationLinkageRequest === null) {
        throw new Error("Missing the required parameter 'buildAppEncryptionDeclarationLinkageRequest' when calling buildsAppEncryptionDeclarationUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/appEncryptionDeclaration', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {module:api/BuildsApi~buildsAppGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppWithoutIncludesResponse}
     */
    buildsAppGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildAppLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsAppGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildAppLinkageResponse}
     */
    buildsAppGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildAppLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppStoreVersionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsAppStoreVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackages] the fields to include for returned resources of type alternativeDistributionPackages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionLocalizations] maximum number of related appStoreVersionLocalizations returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperiments] maximum number of related appStoreVersionExperiments returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {module:api/BuildsApi~buildsAppStoreVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    buildsAppStoreVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppStoreVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[alternativeDistributionPackages]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionLocalizations]': opts['limitAppStoreVersionLocalizations'],
        'limit[appStoreVersionExperiments]': opts['limitAppStoreVersionExperiments'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/appStoreVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsAppStoreVersionGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsAppStoreVersionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildAppStoreVersionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsAppStoreVersionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildAppStoreVersionLinkageResponse}
     */
    buildsAppStoreVersionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsAppStoreVersionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildAppStoreVersionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/appStoreVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaAppReviewSubmissionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaAppReviewSubmissionWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaAppReviewSubmissionWithoutIncludesResponse}
     */
    buildsBetaAppReviewSubmissionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaAppReviewSubmissionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaAppReviewSubmissionWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/betaAppReviewSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaAppReviewSubmissionGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBetaAppReviewSubmissionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsBetaAppReviewSubmissionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBetaAppReviewSubmissionLinkageResponse}
     */
    buildsBetaAppReviewSubmissionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaAppReviewSubmissionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBetaAppReviewSubmissionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaAppReviewSubmission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaBuildLocalizationsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildLocalizationsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildLocalizationsWithoutIncludesResponse}
     */
    buildsBetaBuildLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaBuildLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildLocalizationsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/betaBuildLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaBuildLocalizationsGetToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBetaBuildLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsBetaBuildLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBetaBuildLocalizationsLinkagesResponse}
     */
    buildsBetaBuildLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaBuildLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBetaBuildLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaBuildLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaBuildUsagesGetMetrics operation.
     * @callback module:api/BuildsApi~buildsBetaBuildUsagesGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaBuildUsagesV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/BuildsApi~buildsBetaBuildUsagesGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaBuildUsagesV1MetricResponse}
     */
    buildsBetaBuildUsagesGetMetrics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaBuildUsagesGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaBuildUsagesV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/metrics/betaBuildUsages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaGroupsCreateToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaGroupsCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildBetaGroupsLinkagesRequest} buildBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsBetaGroupsCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsBetaGroupsCreateToManyRelationship(id, buildBetaGroupsLinkagesRequest, callback) {
      let postBody = buildBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaGroupsCreateToManyRelationship");
      }
      // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
      if (buildBetaGroupsLinkagesRequest === undefined || buildBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBetaGroupsDeleteToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsBetaGroupsDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildBetaGroupsLinkagesRequest} buildBetaGroupsLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsBetaGroupsDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsBetaGroupsDeleteToManyRelationship(id, buildBetaGroupsLinkagesRequest, callback) {
      let postBody = buildBetaGroupsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBetaGroupsDeleteToManyRelationship");
      }
      // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
      if (buildBetaGroupsLinkagesRequest === undefined || buildBetaGroupsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildBetaGroupsLinkagesRequest' when calling buildsBetaGroupsDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/betaGroups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBuildBetaDetailGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBetaDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBetaDetailResponse}
     */
    buildsBuildBetaDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBuildBetaDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBetaDetailResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/buildBetaDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsBuildBetaDetailGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildBuildBetaDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsBuildBetaDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildBuildBetaDetailLinkageResponse}
     */
    buildsBuildBetaDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsBuildBetaDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildBuildBetaDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/buildBetaDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsDiagnosticSignaturesGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticSignaturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterDiagnosticType] filter by attribute 'diagnosticType'
     * @param {Array.<module:model/String>} [fieldsDiagnosticSignatures] the fields to include for returned resources of type diagnosticSignatures
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticSignaturesResponse}
     */
    buildsDiagnosticSignaturesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsDiagnosticSignaturesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[diagnosticType]': this.apiClient.buildCollectionParam(opts['filterDiagnosticType'], 'csv'),
        'fields[diagnosticSignatures]': this.apiClient.buildCollectionParam(opts['fieldsDiagnosticSignatures'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticSignaturesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/diagnosticSignatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsDiagnosticSignaturesGetToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildDiagnosticSignaturesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsDiagnosticSignaturesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildDiagnosticSignaturesLinkagesResponse}
     */
    buildsDiagnosticSignaturesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsDiagnosticSignaturesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildDiagnosticSignaturesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/diagnosticSignatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetCollection operation.
     * @callback module:api/BuildsApi~buildsGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterVersion] filter by attribute 'version'
     * @param {Array.<String>} [filterExpired] filter by attribute 'expired'
     * @param {Array.<module:model/String>} [filterProcessingState] filter by attribute 'processingState'
     * @param {Array.<module:model/String>} [filterBetaAppReviewSubmissionBetaReviewState] filter by attribute 'betaAppReviewSubmission.betaReviewState'
     * @param {Array.<String>} [filterUsesNonExemptEncryption] filter by attribute 'usesNonExemptEncryption'
     * @param {Array.<String>} [filterPreReleaseVersionVersion] filter by attribute 'preReleaseVersion.version'
     * @param {Array.<module:model/String>} [filterPreReleaseVersionPlatform] filter by attribute 'preReleaseVersion.platform'
     * @param {Array.<module:model/String>} [filterBuildAudienceType] filter by attribute 'buildAudienceType'
     * @param {Array.<String>} [filterPreReleaseVersion] filter by id(s) of related 'preReleaseVersion'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<String>} [filterBetaGroups] filter by id(s) of related 'betaGroups'
     * @param {Array.<String>} [filterAppStoreVersion] filter by id(s) of related 'appStoreVersion'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Boolean} [existsUsesNonExemptEncryption] filter by attribute 'usesNonExemptEncryption'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBetaBuildLocalizations] maximum number of related betaBuildLocalizations returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuildBundles] maximum number of related buildBundles returned (when they are included)
     * @param {Number} [limitIcons] maximum number of related icons returned (when they are included)
     * @param {Number} [limitIndividualTesters] maximum number of related individualTesters returned (when they are included)
     * @param {module:api/BuildsApi~buildsGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsResponse}
     */
    buildsGetCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[version]': this.apiClient.buildCollectionParam(opts['filterVersion'], 'csv'),
        'filter[expired]': this.apiClient.buildCollectionParam(opts['filterExpired'], 'csv'),
        'filter[processingState]': this.apiClient.buildCollectionParam(opts['filterProcessingState'], 'csv'),
        'filter[betaAppReviewSubmission.betaReviewState]': this.apiClient.buildCollectionParam(opts['filterBetaAppReviewSubmissionBetaReviewState'], 'csv'),
        'filter[usesNonExemptEncryption]': this.apiClient.buildCollectionParam(opts['filterUsesNonExemptEncryption'], 'csv'),
        'filter[preReleaseVersion.version]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionVersion'], 'csv'),
        'filter[preReleaseVersion.platform]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionPlatform'], 'csv'),
        'filter[buildAudienceType]': this.apiClient.buildCollectionParam(opts['filterBuildAudienceType'], 'csv'),
        'filter[preReleaseVersion]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersion'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'filter[betaGroups]': this.apiClient.buildCollectionParam(opts['filterBetaGroups'], 'csv'),
        'filter[appStoreVersion]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersion'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'exists[usesNonExemptEncryption]': opts['existsUsesNonExemptEncryption'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[betaBuildLocalizations]': opts['limitBetaBuildLocalizations'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[buildBundles]': opts['limitBuildBundles'],
        'limit[icons]': opts['limitIcons'],
        'limit[individualTesters]': opts['limitIndividualTesters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsResponse;
      return this.apiClient.callApi(
        '/v1/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetInstance operation.
     * @callback module:api/BuildsApi~buildsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBetaBuildLocalizations] maximum number of related betaBuildLocalizations returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBuildBundles] maximum number of related buildBundles returned (when they are included)
     * @param {Number} [limitIcons] maximum number of related icons returned (when they are included)
     * @param {Number} [limitIndividualTesters] maximum number of related individualTesters returned (when they are included)
     * @param {module:api/BuildsApi~buildsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    buildsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[betaBuildLocalizations]': opts['limitBetaBuildLocalizations'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[buildBundles]': opts['limitBuildBundles'],
        'limit[icons]': opts['limitIcons'],
        'limit[individualTesters]': opts['limitIndividualTesters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIconsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsIconsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildIconsWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIconsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildIconsWithoutIncludesResponse}
     */
    buildsIconsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIconsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildIconsWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIconsGetToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIconsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildIconsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIconsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildIconsLinkagesResponse}
     */
    buildsIconsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIconsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildIconsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersCreateToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersCreateToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildIndividualTestersLinkagesRequest} buildIndividualTestersLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsIndividualTestersCreateToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsIndividualTestersCreateToManyRelationship(id, buildIndividualTestersLinkagesRequest, callback) {
      let postBody = buildIndividualTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersCreateToManyRelationship");
      }
      // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
      if (buildIndividualTestersLinkagesRequest === undefined || buildIndividualTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersCreateToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersDeleteToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersDeleteToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildIndividualTestersLinkagesRequest} buildIndividualTestersLinkagesRequest List of related linkages
     * @param {module:api/BuildsApi~buildsIndividualTestersDeleteToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsIndividualTestersDeleteToManyRelationship(id, buildIndividualTestersLinkagesRequest, callback) {
      let postBody = buildIndividualTestersLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersDeleteToManyRelationship");
      }
      // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
      if (buildIndividualTestersLinkagesRequest === undefined || buildIndividualTestersLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'buildIndividualTestersLinkagesRequest' when calling buildsIndividualTestersDeleteToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetaTestersWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIndividualTestersGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetaTestersWithoutIncludesResponse}
     */
    buildsIndividualTestersGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetaTestersWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/individualTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsIndividualTestersGetToManyRelationship operation.
     * @callback module:api/BuildsApi~buildsIndividualTestersGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildIndividualTestersLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/BuildsApi~buildsIndividualTestersGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildIndividualTestersLinkagesResponse}
     */
    buildsIndividualTestersGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsIndividualTestersGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildIndividualTestersLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/individualTesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsPerfPowerMetricsGetToManyRelated operation.
     * @callback module:api/BuildsApi~buildsPerfPowerMetricsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XcodeMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filterPlatform] filter by attribute 'platform'
     * @param {Array.<module:model/String>} [filterMetricType] filter by attribute 'metricType'
     * @param {Array.<String>} [filterDeviceType] filter by attribute 'deviceType'
     * @param {module:api/BuildsApi~buildsPerfPowerMetricsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XcodeMetrics}
     */
    buildsPerfPowerMetricsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsPerfPowerMetricsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[platform]': this.apiClient.buildCollectionParam(opts['filterPlatform'], 'csv'),
        'filter[metricType]': this.apiClient.buildCollectionParam(opts['filterMetricType'], 'csv'),
        'filter[deviceType]': this.apiClient.buildCollectionParam(opts['filterDeviceType'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.apple.xcode-metrics+json'];
      let returnType = XcodeMetrics;
      return this.apiClient.callApi(
        '/v1/builds/{id}/perfPowerMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsPreReleaseVersionGetToOneRelated operation.
     * @callback module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrereleaseVersionWithoutIncludesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrereleaseVersionWithoutIncludesResponse}
     */
    buildsPreReleaseVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsPreReleaseVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrereleaseVersionWithoutIncludesResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/preReleaseVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsPreReleaseVersionGetToOneRelationship operation.
     * @callback module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildPreReleaseVersionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/BuildsApi~buildsPreReleaseVersionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildPreReleaseVersionLinkageResponse}
     */
    buildsPreReleaseVersionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsPreReleaseVersionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildPreReleaseVersionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}/relationships/preReleaseVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsUpdateInstance operation.
     * @callback module:api/BuildsApi~buildsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/BuildUpdateRequest} buildUpdateRequest Build representation
     * @param {module:api/BuildsApi~buildsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildResponse}
     */
    buildsUpdateInstance(id, buildUpdateRequest, callback) {
      let postBody = buildUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling buildsUpdateInstance");
      }
      // verify the required parameter 'buildUpdateRequest' is set
      if (buildUpdateRequest === undefined || buildUpdateRequest === null) {
        throw new Error("Missing the required parameter 'buildUpdateRequest' when calling buildsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildResponse;
      return this.apiClient.callApi(
        '/v1/builds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
