/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterAchievementReleasesResponse from '../model/GameCenterAchievementReleasesResponse';
import GameCenterAchievementsResponse from '../model/GameCenterAchievementsResponse';
import GameCenterActivitiesResponse from '../model/GameCenterActivitiesResponse';
import GameCenterActivityVersionReleasesResponse from '../model/GameCenterActivityVersionReleasesResponse';
import GameCenterAppVersionsResponse from '../model/GameCenterAppVersionsResponse';
import GameCenterChallengeVersionReleasesResponse from '../model/GameCenterChallengeVersionReleasesResponse';
import GameCenterChallengesResponse from '../model/GameCenterChallengesResponse';
import GameCenterDetailAchievementReleasesLinkagesResponse from '../model/GameCenterDetailAchievementReleasesLinkagesResponse';
import GameCenterDetailActivityReleasesLinkagesResponse from '../model/GameCenterDetailActivityReleasesLinkagesResponse';
import GameCenterDetailChallengeReleasesLinkagesResponse from '../model/GameCenterDetailChallengeReleasesLinkagesResponse';
import GameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest from '../model/GameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest';
import GameCenterDetailCreateRequest from '../model/GameCenterDetailCreateRequest';
import GameCenterDetailGameCenterAchievementsLinkagesRequest from '../model/GameCenterDetailGameCenterAchievementsLinkagesRequest';
import GameCenterDetailGameCenterAchievementsLinkagesResponse from '../model/GameCenterDetailGameCenterAchievementsLinkagesResponse';
import GameCenterDetailGameCenterActivitiesLinkagesResponse from '../model/GameCenterDetailGameCenterActivitiesLinkagesResponse';
import GameCenterDetailGameCenterAppVersionsLinkagesResponse from '../model/GameCenterDetailGameCenterAppVersionsLinkagesResponse';
import GameCenterDetailGameCenterChallengesLinkagesResponse from '../model/GameCenterDetailGameCenterChallengesLinkagesResponse';
import GameCenterDetailGameCenterGroupLinkageResponse from '../model/GameCenterDetailGameCenterGroupLinkageResponse';
import GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest from '../model/GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest';
import GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse from '../model/GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse';
import GameCenterDetailGameCenterLeaderboardsLinkagesRequest from '../model/GameCenterDetailGameCenterLeaderboardsLinkagesRequest';
import GameCenterDetailGameCenterLeaderboardsLinkagesResponse from '../model/GameCenterDetailGameCenterLeaderboardsLinkagesResponse';
import GameCenterDetailLeaderboardReleasesLinkagesResponse from '../model/GameCenterDetailLeaderboardReleasesLinkagesResponse';
import GameCenterDetailLeaderboardSetReleasesLinkagesResponse from '../model/GameCenterDetailLeaderboardSetReleasesLinkagesResponse';
import GameCenterDetailResponse from '../model/GameCenterDetailResponse';
import GameCenterDetailUpdateRequest from '../model/GameCenterDetailUpdateRequest';
import GameCenterGroupResponse from '../model/GameCenterGroupResponse';
import GameCenterLeaderboardReleasesResponse from '../model/GameCenterLeaderboardReleasesResponse';
import GameCenterLeaderboardSetReleasesResponse from '../model/GameCenterLeaderboardSetReleasesResponse';
import GameCenterLeaderboardSetsResponse from '../model/GameCenterLeaderboardSetsResponse';
import GameCenterLeaderboardsResponse from '../model/GameCenterLeaderboardsResponse';
import GameCenterMatchmakingAppRequestsV1MetricResponse from '../model/GameCenterMatchmakingAppRequestsV1MetricResponse';

/**
* GameCenterDetails service.
* @module api/GameCenterDetailsApi
* @version 4.1
*/
export default class GameCenterDetailsApi {

    /**
    * Constructs a new GameCenterDetailsApi. 
    * @alias module:api/GameCenterDetailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterDetailsAchievementReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsAchievementReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterAchievement] filter by id(s) of related 'gameCenterAchievement'
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsAchievementReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementReleasesResponse}
     */
    gameCenterDetailsAchievementReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsAchievementReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterAchievement]': this.apiClient.buildCollectionParam(opts['filterGameCenterAchievement'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/achievementReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsAchievementReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsAchievementReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailAchievementReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsAchievementReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailAchievementReleasesLinkagesResponse}
     */
    gameCenterDetailsAchievementReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsAchievementReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailAchievementReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/achievementReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsActivityReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsActivityReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivityVersionReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersionReleases] the fields to include for returned resources of type gameCenterActivityVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersions] the fields to include for returned resources of type gameCenterActivityVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsActivityReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivityVersionReleasesResponse}
     */
    gameCenterDetailsActivityReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsActivityReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterActivityVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersionReleases'], 'csv'),
        'fields[gameCenterActivityVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivityVersionReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/activityReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsActivityReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsActivityReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailActivityReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsActivityReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailActivityReleasesLinkagesResponse}
     */
    gameCenterDetailsActivityReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsActivityReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailActivityReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/activityReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsChallengeReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsChallengeReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeVersionReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersionReleases] the fields to include for returned resources of type gameCenterChallengeVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersions] the fields to include for returned resources of type gameCenterChallengeVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsChallengeReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeVersionReleasesResponse}
     */
    gameCenterDetailsChallengeReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsChallengeReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterChallengeVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersionReleases'], 'csv'),
        'fields[gameCenterChallengeVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeVersionReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/challengeReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsChallengeReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsChallengeReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailChallengeReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsChallengeReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailChallengeReleasesLinkagesResponse}
     */
    gameCenterDetailsChallengeReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsChallengeReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailChallengeReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/challengeReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest} gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationship(id, gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest, callback) {
      let postBody = gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest' is set
      if (gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest === undefined || gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailChallengesMinimumPlatformVersionsLinkagesRequest' when calling gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/challengesMinimumPlatformVersions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsClassicMatchmakingRequestsGetMetrics operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsClassicMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingAppRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsClassicMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingAppRequestsV1MetricResponse}
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingAppRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsCreateInstance operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterDetailCreateRequest} gameCenterDetailCreateRequest GameCenterDetail representation
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailResponse}
     */
    gameCenterDetailsCreateInstance(gameCenterDetailCreateRequest, callback) {
      let postBody = gameCenterDetailCreateRequest;
      // verify the required parameter 'gameCenterDetailCreateRequest' is set
      if (gameCenterDetailCreateRequest === undefined || gameCenterDetailCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailCreateRequest' when calling gameCenterDetailsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterAchievementsGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementsResponse}
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterAchievementsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterAchievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterAchievementsGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterAchievementsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterAchievementsLinkagesResponse}
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterAchievementsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterAchievementsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterDetailGameCenterAchievementsLinkagesRequest} gameCenterDetailGameCenterAchievementsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(id, gameCenterDetailGameCenterAchievementsLinkagesRequest, callback) {
      let postBody = gameCenterDetailGameCenterAchievementsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' is set
      if (gameCenterDetailGameCenterAchievementsLinkagesRequest === undefined || gameCenterDetailGameCenterAchievementsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterActivitiesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterActivitiesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersions] the fields to include for returned resources of type gameCenterActivityVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAchievements] maximum number of related achievements returned (when they are included)
     * @param {Number} [limitLeaderboards] maximum number of related leaderboards returned (when they are included)
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterActivitiesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterActivitiesResponse}
     */
    gameCenterDetailsGameCenterActivitiesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterActivitiesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterActivityVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[achievements]': opts['limitAchievements'],
        'limit[leaderboards]': opts['limitLeaderboards'],
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterActivitiesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterActivities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterActivitiesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterActivitiesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterActivitiesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterActivitiesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterActivitiesLinkagesResponse}
     */
    gameCenterDetailsGameCenterActivitiesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterActivitiesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterActivitiesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterActivities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterAppVersionsGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAppVersionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAppVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterEnabled] filter by attribute 'enabled'
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitCompatibilityVersions] maximum number of related compatibilityVersions returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAppVersionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAppVersionsResponse}
     */
    gameCenterDetailsGameCenterAppVersionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterAppVersionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[enabled]': this.apiClient.buildCollectionParam(opts['filterEnabled'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[compatibilityVersions]': opts['limitCompatibilityVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAppVersionsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterAppVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterAppVersionsGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAppVersionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterAppVersionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterAppVersionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterAppVersionsLinkagesResponse}
     */
    gameCenterDetailsGameCenterAppVersionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterAppVersionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterAppVersionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterAppVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterChallengesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterChallengesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersions] the fields to include for returned resources of type gameCenterChallengeVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitVersions] maximum number of related versions returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterChallengesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengesResponse}
     */
    gameCenterDetailsGameCenterChallengesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterChallengesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterChallengeVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersions'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[versions]': opts['limitVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterChallenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterChallengesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterChallengesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterChallengesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterChallengesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterChallengesLinkagesResponse}
     */
    gameCenterDetailsGameCenterChallengesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterChallengesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterChallengesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterChallenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterGroupGetToOneRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterGroupGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterDetails] maximum number of related gameCenterDetails returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterGroupGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterGroupResponse}
     */
    gameCenterDetailsGameCenterGroupGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterGroupGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterDetails]': opts['limitGameCenterDetails'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterGroupResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterGroupGetToOneRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterGroupGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterGroupLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterGroupGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterGroupLinkageResponse}
     */
    gameCenterDetailsGameCenterGroupGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterGroupGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterGroupLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetsResponse}
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse}
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest} gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(id, gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, callback) {
      let postBody = gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' is set
      if (gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === undefined || gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardsGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterReferenceName] filter by attribute 'referenceName'
     * @param {Array.<String>} [filterArchived] filter by attribute 'archived'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardsResponse}
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[referenceName]': this.apiClient.buildCollectionParam(opts['filterReferenceName'], 'csv'),
        'filter[archived]': this.apiClient.buildCollectionParam(opts['filterArchived'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailGameCenterLeaderboardsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailGameCenterLeaderboardsLinkagesResponse}
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailGameCenterLeaderboardsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterDetailGameCenterLeaderboardsLinkagesRequest} gameCenterDetailGameCenterLeaderboardsLinkagesRequest List of related linkages
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(id, gameCenterDetailGameCenterLeaderboardsLinkagesRequest, callback) {
      let postBody = gameCenterDetailGameCenterLeaderboardsLinkagesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");
      }
      // verify the required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' is set
      if (gameCenterDetailGameCenterLeaderboardsLinkagesRequest === undefined || gameCenterDetailGameCenterLeaderboardsLinkagesRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsGetInstance operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivityVersionReleases] the fields to include for returned resources of type gameCenterActivityVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeVersionReleases] the fields to include for returned resources of type gameCenterChallengeVersionReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAchievementReleases] maximum number of related achievementReleases returned (when they are included)
     * @param {Number} [limitActivityReleases] maximum number of related activityReleases returned (when they are included)
     * @param {Number} [limitChallengeReleases] maximum number of related challengeReleases returned (when they are included)
     * @param {Number} [limitChallengesMinimumPlatformVersions] maximum number of related challengesMinimumPlatformVersions returned (when they are included)
     * @param {Number} [limitGameCenterAchievements] maximum number of related gameCenterAchievements returned (when they are included)
     * @param {Number} [limitGameCenterActivities] maximum number of related gameCenterActivities returned (when they are included)
     * @param {Number} [limitGameCenterAppVersions] maximum number of related gameCenterAppVersions returned (when they are included)
     * @param {Number} [limitGameCenterChallenges] maximum number of related gameCenterChallenges returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitGameCenterLeaderboards] maximum number of related gameCenterLeaderboards returned (when they are included)
     * @param {Number} [limitLeaderboardReleases] maximum number of related leaderboardReleases returned (when they are included)
     * @param {Number} [limitLeaderboardSetReleases] maximum number of related leaderboardSetReleases returned (when they are included)
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailResponse}
     */
    gameCenterDetailsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivityVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivityVersionReleases'], 'csv'),
        'fields[gameCenterChallengeVersionReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeVersionReleases'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[achievementReleases]': opts['limitAchievementReleases'],
        'limit[activityReleases]': opts['limitActivityReleases'],
        'limit[challengeReleases]': opts['limitChallengeReleases'],
        'limit[challengesMinimumPlatformVersions]': opts['limitChallengesMinimumPlatformVersions'],
        'limit[gameCenterAchievements]': opts['limitGameCenterAchievements'],
        'limit[gameCenterActivities]': opts['limitGameCenterActivities'],
        'limit[gameCenterAppVersions]': opts['limitGameCenterAppVersions'],
        'limit[gameCenterChallenges]': opts['limitGameCenterChallenges'],
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[gameCenterLeaderboards]': opts['limitGameCenterLeaderboards'],
        'limit[leaderboardReleases]': opts['limitLeaderboardReleases'],
        'limit[leaderboardSetReleases]': opts['limitLeaderboardSetReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsLeaderboardReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterLeaderboard] filter by id(s) of related 'gameCenterLeaderboard'
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardReleasesResponse}
     */
    gameCenterDetailsLeaderboardReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsLeaderboardReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterLeaderboard]': this.apiClient.buildCollectionParam(opts['filterGameCenterLeaderboard'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/leaderboardReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsLeaderboardReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailLeaderboardReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailLeaderboardReleasesLinkagesResponse}
     */
    gameCenterDetailsLeaderboardReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsLeaderboardReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailLeaderboardReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/leaderboardReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsLeaderboardSetReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterLeaderboardSet] filter by id(s) of related 'gameCenterLeaderboardSet'
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetReleases] the fields to include for returned resources of type gameCenterLeaderboardSetReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetReleasesResponse}
     */
    gameCenterDetailsLeaderboardSetReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsLeaderboardSetReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterLeaderboardSet]': this.apiClient.buildCollectionParam(opts['filterGameCenterLeaderboardSet'], 'csv'),
        'fields[gameCenterLeaderboardSetReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/leaderboardSetReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsLeaderboardSetReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailLeaderboardSetReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailLeaderboardSetReleasesLinkagesResponse}
     */
    gameCenterDetailsLeaderboardSetReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsLeaderboardSetReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailLeaderboardSetReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/relationships/leaderboardSetReleases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingAppRequestsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {module:model/String} [filterResult] filter by 'result' attribute dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingAppRequestsV1MetricResponse}
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingAppRequestsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterDetailsUpdateInstance operation.
     * @callback module:api/GameCenterDetailsApi~gameCenterDetailsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterDetailUpdateRequest} gameCenterDetailUpdateRequest GameCenterDetail representation
     * @param {module:api/GameCenterDetailsApi~gameCenterDetailsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterDetailResponse}
     */
    gameCenterDetailsUpdateInstance(id, gameCenterDetailUpdateRequest, callback) {
      let postBody = gameCenterDetailUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterDetailsUpdateInstance");
      }
      // verify the required parameter 'gameCenterDetailUpdateRequest' is set
      if (gameCenterDetailUpdateRequest === undefined || gameCenterDetailUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterDetailUpdateRequest' when calling gameCenterDetailsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterDetailResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterDetails/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
