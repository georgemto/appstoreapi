/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppTagResponse from '../model/AppTagResponse';
import AppTagTerritoriesLinkagesResponse from '../model/AppTagTerritoriesLinkagesResponse';
import AppTagUpdateRequest from '../model/AppTagUpdateRequest';
import ErrorResponse from '../model/ErrorResponse';
import TerritoriesResponse from '../model/TerritoriesResponse';

/**
* AppTags service.
* @module api/AppTagsApi
* @version 4.1
*/
export default class AppTagsApi {

    /**
    * Constructs a new AppTagsApi. 
    * @alias module:api/AppTagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appTagsTerritoriesGetToManyRelated operation.
     * @callback module:api/AppTagsApi~appTagsTerritoriesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerritoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsTerritories] the fields to include for returned resources of type territories
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppTagsApi~appTagsTerritoriesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerritoriesResponse}
     */
    appTagsTerritoriesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appTagsTerritoriesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[territories]': this.apiClient.buildCollectionParam(opts['fieldsTerritories'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TerritoriesResponse;
      return this.apiClient.callApi(
        '/v1/appTags/{id}/territories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appTagsTerritoriesGetToManyRelationship operation.
     * @callback module:api/AppTagsApi~appTagsTerritoriesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppTagTerritoriesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppTagsApi~appTagsTerritoriesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppTagTerritoriesLinkagesResponse}
     */
    appTagsTerritoriesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appTagsTerritoriesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppTagTerritoriesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appTags/{id}/relationships/territories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appTagsUpdateInstance operation.
     * @callback module:api/AppTagsApi~appTagsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppTagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppTagUpdateRequest} appTagUpdateRequest AppTag representation
     * @param {module:api/AppTagsApi~appTagsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppTagResponse}
     */
    appTagsUpdateInstance(id, appTagUpdateRequest, callback) {
      let postBody = appTagUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appTagsUpdateInstance");
      }
      // verify the required parameter 'appTagUpdateRequest' is set
      if (appTagUpdateRequest === undefined || appTagUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appTagUpdateRequest' when calling appTagsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppTagResponse;
      return this.apiClient.callApi(
        '/v1/appTags/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
