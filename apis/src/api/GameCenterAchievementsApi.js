/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterAchievementActivityLinkageRequest from '../model/GameCenterAchievementActivityLinkageRequest';
import GameCenterAchievementCreateRequest from '../model/GameCenterAchievementCreateRequest';
import GameCenterAchievementGroupAchievementLinkageRequest from '../model/GameCenterAchievementGroupAchievementLinkageRequest';
import GameCenterAchievementGroupAchievementLinkageResponse from '../model/GameCenterAchievementGroupAchievementLinkageResponse';
import GameCenterAchievementLocalizationsLinkagesResponse from '../model/GameCenterAchievementLocalizationsLinkagesResponse';
import GameCenterAchievementLocalizationsResponse from '../model/GameCenterAchievementLocalizationsResponse';
import GameCenterAchievementReleasesLinkagesResponse from '../model/GameCenterAchievementReleasesLinkagesResponse';
import GameCenterAchievementReleasesResponse from '../model/GameCenterAchievementReleasesResponse';
import GameCenterAchievementResponse from '../model/GameCenterAchievementResponse';
import GameCenterAchievementUpdateRequest from '../model/GameCenterAchievementUpdateRequest';

/**
* GameCenterAchievements service.
* @module api/GameCenterAchievementsApi
* @version 4.1
*/
export default class GameCenterAchievementsApi {

    /**
    * Constructs a new GameCenterAchievementsApi. 
    * @alias module:api/GameCenterAchievementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterAchievementsActivityUpdateToOneRelationship operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsActivityUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterAchievementActivityLinkageRequest} gameCenterAchievementActivityLinkageRequest Related linkage
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsActivityUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterAchievementsActivityUpdateToOneRelationship(id, gameCenterAchievementActivityLinkageRequest, callback) {
      let postBody = gameCenterAchievementActivityLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsActivityUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterAchievementActivityLinkageRequest' is set
      if (gameCenterAchievementActivityLinkageRequest === undefined || gameCenterAchievementActivityLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementActivityLinkageRequest' when calling gameCenterAchievementsActivityUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/relationships/activity', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsCreateInstance operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterAchievementCreateRequest} gameCenterAchievementCreateRequest GameCenterAchievement representation
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementResponse}
     */
    gameCenterAchievementsCreateInstance(gameCenterAchievementCreateRequest, callback) {
      let postBody = gameCenterAchievementCreateRequest;
      // verify the required parameter 'gameCenterAchievementCreateRequest' is set
      if (gameCenterAchievementCreateRequest === undefined || gameCenterAchievementCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementCreateRequest' when calling gameCenterAchievementsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsDeleteInstance operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterAchievementsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsGetInstance operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementResponse}
     */
    gameCenterAchievementsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsGroupAchievementGetToOneRelated operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementResponse}
     */
    gameCenterAchievementsGroupAchievementGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsGroupAchievementGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/groupAchievement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsGroupAchievementGetToOneRelationship operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementGroupAchievementLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementGroupAchievementLinkageResponse}
     */
    gameCenterAchievementsGroupAchievementGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsGroupAchievementGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementGroupAchievementLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/relationships/groupAchievement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsGroupAchievementUpdateToOneRelationship operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterAchievementGroupAchievementLinkageRequest} gameCenterAchievementGroupAchievementLinkageRequest Related linkage
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsGroupAchievementUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterAchievementsGroupAchievementUpdateToOneRelationship(id, gameCenterAchievementGroupAchievementLinkageRequest, callback) {
      let postBody = gameCenterAchievementGroupAchievementLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterAchievementGroupAchievementLinkageRequest' is set
      if (gameCenterAchievementGroupAchievementLinkageRequest === undefined || gameCenterAchievementGroupAchievementLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementGroupAchievementLinkageRequest' when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/relationships/groupAchievement', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsLocalizationsGetToManyRelated operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementLocalizations] the fields to include for returned resources of type gameCenterAchievementLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementImages] the fields to include for returned resources of type gameCenterAchievementImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationsResponse}
     */
    gameCenterAchievementsLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterAchievementLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementLocalizations'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'fields[gameCenterAchievementImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsLocalizationsGetToManyRelationship operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementLocalizationsLinkagesResponse}
     */
    gameCenterAchievementsLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/relationships/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterDetail] filter by id(s) of related 'gameCenterDetail'
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievementReleases] the fields to include for returned resources of type gameCenterAchievementReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterAchievements] the fields to include for returned resources of type gameCenterAchievements
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementReleasesResponse}
     */
    gameCenterAchievementsReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterDetail]': this.apiClient.buildCollectionParam(opts['filterGameCenterDetail'], 'csv'),
        'fields[gameCenterAchievementReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievementReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterAchievements]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAchievements'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementReleasesLinkagesResponse}
     */
    gameCenterAchievementsReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}/relationships/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterAchievementsUpdateInstance operation.
     * @callback module:api/GameCenterAchievementsApi~gameCenterAchievementsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterAchievementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterAchievementUpdateRequest} gameCenterAchievementUpdateRequest GameCenterAchievement representation
     * @param {module:api/GameCenterAchievementsApi~gameCenterAchievementsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterAchievementResponse}
     */
    gameCenterAchievementsUpdateInstance(id, gameCenterAchievementUpdateRequest, callback) {
      let postBody = gameCenterAchievementUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterAchievementsUpdateInstance");
      }
      // verify the required parameter 'gameCenterAchievementUpdateRequest' is set
      if (gameCenterAchievementUpdateRequest === undefined || gameCenterAchievementUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterAchievementUpdateRequest' when calling gameCenterAchievementsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterAchievementResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterAchievements/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
