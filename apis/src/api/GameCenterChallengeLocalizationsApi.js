/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterChallengeImageResponse from '../model/GameCenterChallengeImageResponse';
import GameCenterChallengeLocalizationCreateRequest from '../model/GameCenterChallengeLocalizationCreateRequest';
import GameCenterChallengeLocalizationImageLinkageResponse from '../model/GameCenterChallengeLocalizationImageLinkageResponse';
import GameCenterChallengeLocalizationResponse from '../model/GameCenterChallengeLocalizationResponse';
import GameCenterChallengeLocalizationUpdateRequest from '../model/GameCenterChallengeLocalizationUpdateRequest';

/**
* GameCenterChallengeLocalizations service.
* @module api/GameCenterChallengeLocalizationsApi
* @version 4.1
*/
export default class GameCenterChallengeLocalizationsApi {

    /**
    * Constructs a new GameCenterChallengeLocalizationsApi. 
    * @alias module:api/GameCenterChallengeLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsCreateInstance operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterChallengeLocalizationCreateRequest} gameCenterChallengeLocalizationCreateRequest GameCenterChallengeLocalization representation
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeLocalizationResponse}
     */
    gameCenterChallengeLocalizationsCreateInstance(gameCenterChallengeLocalizationCreateRequest, callback) {
      let postBody = gameCenterChallengeLocalizationCreateRequest;
      // verify the required parameter 'gameCenterChallengeLocalizationCreateRequest' is set
      if (gameCenterChallengeLocalizationCreateRequest === undefined || gameCenterChallengeLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterChallengeLocalizationCreateRequest' when calling gameCenterChallengeLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsDeleteInstance operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterChallengeLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengeLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsGetInstance operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeLocalizations] the fields to include for returned resources of type gameCenterChallengeLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeImages] the fields to include for returned resources of type gameCenterChallengeImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeLocalizationResponse}
     */
    gameCenterChallengeLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengeLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterChallengeLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeLocalizations'], 'csv'),
        'fields[gameCenterChallengeImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsImageGetToOneRelated operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsImageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterChallengeImages] the fields to include for returned resources of type gameCenterChallengeImages
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsImageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeImageResponse}
     */
    gameCenterChallengeLocalizationsImageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengeLocalizationsImageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterChallengeImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallengeImages'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeImageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations/{id}/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsImageGetToOneRelationship operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsImageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeLocalizationImageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsImageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeLocalizationImageLinkageResponse}
     */
    gameCenterChallengeLocalizationsImageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengeLocalizationsImageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeLocalizationImageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations/{id}/relationships/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterChallengeLocalizationsUpdateInstance operation.
     * @callback module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterChallengeLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterChallengeLocalizationUpdateRequest} gameCenterChallengeLocalizationUpdateRequest GameCenterChallengeLocalization representation
     * @param {module:api/GameCenterChallengeLocalizationsApi~gameCenterChallengeLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterChallengeLocalizationResponse}
     */
    gameCenterChallengeLocalizationsUpdateInstance(id, gameCenterChallengeLocalizationUpdateRequest, callback) {
      let postBody = gameCenterChallengeLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterChallengeLocalizationsUpdateInstance");
      }
      // verify the required parameter 'gameCenterChallengeLocalizationUpdateRequest' is set
      if (gameCenterChallengeLocalizationUpdateRequest === undefined || gameCenterChallengeLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterChallengeLocalizationUpdateRequest' when calling gameCenterChallengeLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterChallengeLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterChallengeLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
