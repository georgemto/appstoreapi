/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuildsResponse from '../model/BuildsResponse';
import CiBuildActionsResponse from '../model/CiBuildActionsResponse';
import CiBuildRunActionsLinkagesResponse from '../model/CiBuildRunActionsLinkagesResponse';
import CiBuildRunBuildsLinkagesResponse from '../model/CiBuildRunBuildsLinkagesResponse';
import CiBuildRunCreateRequest from '../model/CiBuildRunCreateRequest';
import CiBuildRunResponse from '../model/CiBuildRunResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* CiBuildRuns service.
* @module api/CiBuildRunsApi
* @version 4.1
*/
export default class CiBuildRunsApi {

    /**
    * Constructs a new CiBuildRunsApi. 
    * @alias module:api/CiBuildRunsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ciBuildRunsActionsGetToManyRelated operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsActionsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiBuildActions] the fields to include for returned resources of type ciBuildActions
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/CiBuildRunsApi~ciBuildRunsActionsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildActionsResponse}
     */
    ciBuildRunsActionsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildRunsActionsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciBuildActions]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildActions'], 'csv'),
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildActionsResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns/{id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildRunsActionsGetToManyRelationship operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsActionsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunActionsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildRunsApi~ciBuildRunsActionsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunActionsLinkagesResponse}
     */
    ciBuildRunsActionsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildRunsActionsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunActionsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns/{id}/relationships/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildRunsBuildsGetToManyRelated operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsBuildsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterVersion] filter by attribute 'version'
     * @param {Array.<String>} [filterExpired] filter by attribute 'expired'
     * @param {Array.<module:model/String>} [filterProcessingState] filter by attribute 'processingState'
     * @param {Array.<module:model/String>} [filterBetaAppReviewSubmissionBetaReviewState] filter by attribute 'betaAppReviewSubmission.betaReviewState'
     * @param {Array.<String>} [filterUsesNonExemptEncryption] filter by attribute 'usesNonExemptEncryption'
     * @param {Array.<String>} [filterPreReleaseVersionVersion] filter by attribute 'preReleaseVersion.version'
     * @param {Array.<module:model/String>} [filterPreReleaseVersionPlatform] filter by attribute 'preReleaseVersion.platform'
     * @param {Array.<module:model/String>} [filterBuildAudienceType] filter by attribute 'buildAudienceType'
     * @param {Array.<String>} [filterPreReleaseVersion] filter by id(s) of related 'preReleaseVersion'
     * @param {Array.<String>} [filterApp] filter by id(s) of related 'app'
     * @param {Array.<String>} [filterBetaGroups] filter by id(s) of related 'betaGroups'
     * @param {Array.<String>} [filterAppStoreVersion] filter by id(s) of related 'appStoreVersion'
     * @param {Array.<String>} [filterId] filter by id(s)
     * @param {Boolean} [existsUsesNonExemptEncryption] filter by attribute 'usesNonExemptEncryption'
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; resources will be sorted as specified
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsPreReleaseVersions] the fields to include for returned resources of type preReleaseVersions
     * @param {Array.<module:model/String>} [fieldsBetaTesters] the fields to include for returned resources of type betaTesters
     * @param {Array.<module:model/String>} [fieldsBetaGroups] the fields to include for returned resources of type betaGroups
     * @param {Array.<module:model/String>} [fieldsBetaBuildLocalizations] the fields to include for returned resources of type betaBuildLocalizations
     * @param {Array.<module:model/String>} [fieldsAppEncryptionDeclarations] the fields to include for returned resources of type appEncryptionDeclarations
     * @param {Array.<module:model/String>} [fieldsBetaAppReviewSubmissions] the fields to include for returned resources of type betaAppReviewSubmissions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsBuildBetaDetails] the fields to include for returned resources of type buildBetaDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsBuildIcons] the fields to include for returned resources of type buildIcons
     * @param {Array.<module:model/String>} [fieldsBuildBundles] the fields to include for returned resources of type buildBundles
     * @param {Array.<module:model/String>} [fieldsBuildUploads] the fields to include for returned resources of type buildUploads
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitIndividualTesters] maximum number of related individualTesters returned (when they are included)
     * @param {Number} [limitBetaGroups] maximum number of related betaGroups returned (when they are included)
     * @param {Number} [limitBetaBuildLocalizations] maximum number of related betaBuildLocalizations returned (when they are included)
     * @param {Number} [limitIcons] maximum number of related icons returned (when they are included)
     * @param {Number} [limitBuildBundles] maximum number of related buildBundles returned (when they are included)
     * @param {module:api/CiBuildRunsApi~ciBuildRunsBuildsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsResponse}
     */
    ciBuildRunsBuildsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildRunsBuildsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[version]': this.apiClient.buildCollectionParam(opts['filterVersion'], 'csv'),
        'filter[expired]': this.apiClient.buildCollectionParam(opts['filterExpired'], 'csv'),
        'filter[processingState]': this.apiClient.buildCollectionParam(opts['filterProcessingState'], 'csv'),
        'filter[betaAppReviewSubmission.betaReviewState]': this.apiClient.buildCollectionParam(opts['filterBetaAppReviewSubmissionBetaReviewState'], 'csv'),
        'filter[usesNonExemptEncryption]': this.apiClient.buildCollectionParam(opts['filterUsesNonExemptEncryption'], 'csv'),
        'filter[preReleaseVersion.version]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionVersion'], 'csv'),
        'filter[preReleaseVersion.platform]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersionPlatform'], 'csv'),
        'filter[buildAudienceType]': this.apiClient.buildCollectionParam(opts['filterBuildAudienceType'], 'csv'),
        'filter[preReleaseVersion]': this.apiClient.buildCollectionParam(opts['filterPreReleaseVersion'], 'csv'),
        'filter[app]': this.apiClient.buildCollectionParam(opts['filterApp'], 'csv'),
        'filter[betaGroups]': this.apiClient.buildCollectionParam(opts['filterBetaGroups'], 'csv'),
        'filter[appStoreVersion]': this.apiClient.buildCollectionParam(opts['filterAppStoreVersion'], 'csv'),
        'filter[id]': this.apiClient.buildCollectionParam(opts['filterId'], 'csv'),
        'exists[usesNonExemptEncryption]': opts['existsUsesNonExemptEncryption'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[preReleaseVersions]': this.apiClient.buildCollectionParam(opts['fieldsPreReleaseVersions'], 'csv'),
        'fields[betaTesters]': this.apiClient.buildCollectionParam(opts['fieldsBetaTesters'], 'csv'),
        'fields[betaGroups]': this.apiClient.buildCollectionParam(opts['fieldsBetaGroups'], 'csv'),
        'fields[betaBuildLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsBetaBuildLocalizations'], 'csv'),
        'fields[appEncryptionDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAppEncryptionDeclarations'], 'csv'),
        'fields[betaAppReviewSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsBetaAppReviewSubmissions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[buildBetaDetails]': this.apiClient.buildCollectionParam(opts['fieldsBuildBetaDetails'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[buildIcons]': this.apiClient.buildCollectionParam(opts['fieldsBuildIcons'], 'csv'),
        'fields[buildBundles]': this.apiClient.buildCollectionParam(opts['fieldsBuildBundles'], 'csv'),
        'fields[buildUploads]': this.apiClient.buildCollectionParam(opts['fieldsBuildUploads'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[individualTesters]': opts['limitIndividualTesters'],
        'limit[betaGroups]': opts['limitBetaGroups'],
        'limit[betaBuildLocalizations]': opts['limitBetaBuildLocalizations'],
        'limit[icons]': opts['limitIcons'],
        'limit[buildBundles]': opts['limitBuildBundles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns/{id}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildRunsBuildsGetToManyRelationship operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsBuildsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunBuildsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/CiBuildRunsApi~ciBuildRunsBuildsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunBuildsLinkagesResponse}
     */
    ciBuildRunsBuildsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildRunsBuildsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunBuildsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns/{id}/relationships/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildRunsCreateInstance operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CiBuildRunCreateRequest} ciBuildRunCreateRequest CiBuildRun representation
     * @param {module:api/CiBuildRunsApi~ciBuildRunsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunResponse}
     */
    ciBuildRunsCreateInstance(ciBuildRunCreateRequest, callback) {
      let postBody = ciBuildRunCreateRequest;
      // verify the required parameter 'ciBuildRunCreateRequest' is set
      if (ciBuildRunCreateRequest === undefined || ciBuildRunCreateRequest === null) {
        throw new Error("Missing the required parameter 'ciBuildRunCreateRequest' when calling ciBuildRunsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CiBuildRunResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ciBuildRunsGetInstance operation.
     * @callback module:api/CiBuildRunsApi~ciBuildRunsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiBuildRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsCiBuildRuns] the fields to include for returned resources of type ciBuildRuns
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitBuilds] maximum number of related builds returned (when they are included)
     * @param {module:api/CiBuildRunsApi~ciBuildRunsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiBuildRunResponse}
     */
    ciBuildRunsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ciBuildRunsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[ciBuildRuns]': this.apiClient.buildCollectionParam(opts['fieldsCiBuildRuns'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[builds]': opts['limitBuilds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiBuildRunResponse;
      return this.apiClient.callApi(
        '/v1/ciBuildRuns/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
