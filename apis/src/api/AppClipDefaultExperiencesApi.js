/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppClipAppStoreReviewDetailResponse from '../model/AppClipAppStoreReviewDetailResponse';
import AppClipDefaultExperienceAppClipAppStoreReviewDetailLinkageResponse from '../model/AppClipDefaultExperienceAppClipAppStoreReviewDetailLinkageResponse';
import AppClipDefaultExperienceAppClipDefaultExperienceLocalizationsLinkagesResponse from '../model/AppClipDefaultExperienceAppClipDefaultExperienceLocalizationsLinkagesResponse';
import AppClipDefaultExperienceCreateRequest from '../model/AppClipDefaultExperienceCreateRequest';
import AppClipDefaultExperienceLocalizationsResponse from '../model/AppClipDefaultExperienceLocalizationsResponse';
import AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest from '../model/AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest';
import AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse from '../model/AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse';
import AppClipDefaultExperienceResponse from '../model/AppClipDefaultExperienceResponse';
import AppClipDefaultExperienceUpdateRequest from '../model/AppClipDefaultExperienceUpdateRequest';
import AppStoreVersionResponse from '../model/AppStoreVersionResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AppClipDefaultExperiences service.
* @module api/AppClipDefaultExperiencesApi
* @version 4.1
*/
export default class AppClipDefaultExperiencesApi {

    /**
    * Constructs a new AppClipDefaultExperiencesApi. 
    * @alias module:api/AppClipDefaultExperiencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipAppStoreReviewDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClipAppStoreReviewDetails] the fields to include for returned resources of type appClipAppStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipAppStoreReviewDetailResponse}
     */
    appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClipAppStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAppStoreReviewDetails'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipAppStoreReviewDetailResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationship operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceAppClipAppStoreReviewDetailLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceAppClipAppStoreReviewDetailLinkageResponse}
     */
    appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceAppClipAppStoreReviewDetailLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/relationships/appClipAppStoreReviewDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLocale] filter by attribute 'locale'
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppClipHeaderImages] the fields to include for returned resources of type appClipHeaderImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceLocalizationsResponse}
     */
    appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[locale]': this.apiClient.buildCollectionParam(opts['filterLocale'], 'csv'),
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appClipHeaderImages]': this.apiClient.buildCollectionParam(opts['fieldsAppClipHeaderImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationship operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceAppClipDefaultExperienceLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceAppClipDefaultExperienceLocalizationsLinkagesResponse}
     */
    appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceAppClipDefaultExperienceLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/relationships/appClipDefaultExperienceLocalizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesCreateInstance operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AppClipDefaultExperienceCreateRequest} appClipDefaultExperienceCreateRequest AppClipDefaultExperience representation
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceResponse}
     */
    appClipDefaultExperiencesCreateInstance(appClipDefaultExperienceCreateRequest, callback) {
      let postBody = appClipDefaultExperienceCreateRequest;
      // verify the required parameter 'appClipDefaultExperienceCreateRequest' is set
      if (appClipDefaultExperienceCreateRequest === undefined || appClipDefaultExperienceCreateRequest === null) {
        throw new Error("Missing the required parameter 'appClipDefaultExperienceCreateRequest' when calling appClipDefaultExperiencesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesDeleteInstance operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appClipDefaultExperiencesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesGetInstance operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperienceLocalizations] the fields to include for returned resources of type appClipDefaultExperienceLocalizations
     * @param {Array.<module:model/String>} [fieldsAppClipAppStoreReviewDetails] the fields to include for returned resources of type appClipAppStoreReviewDetails
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppClipDefaultExperienceLocalizations] maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceResponse}
     */
    appClipDefaultExperiencesGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[appClipDefaultExperienceLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperienceLocalizations'], 'csv'),
        'fields[appClipAppStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppClipAppStoreReviewDetails'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appClipDefaultExperienceLocalizations]': opts['limitAppClipDefaultExperienceLocalizations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppStoreVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsAppStoreVersions] the fields to include for returned resources of type appStoreVersions
     * @param {Array.<module:model/String>} [fieldsApps] the fields to include for returned resources of type apps
     * @param {Array.<module:model/String>} [fieldsAgeRatingDeclarations] the fields to include for returned resources of type ageRatingDeclarations
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionLocalizations] the fields to include for returned resources of type appStoreVersionLocalizations
     * @param {Array.<module:model/String>} [fieldsBuilds] the fields to include for returned resources of type builds
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionPhasedReleases] the fields to include for returned resources of type appStoreVersionPhasedReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterAppVersions] the fields to include for returned resources of type gameCenterAppVersions
     * @param {Array.<module:model/String>} [fieldsRoutingAppCoverages] the fields to include for returned resources of type routingAppCoverages
     * @param {Array.<module:model/String>} [fieldsAppStoreReviewDetails] the fields to include for returned resources of type appStoreReviewDetails
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionSubmissions] the fields to include for returned resources of type appStoreVersionSubmissions
     * @param {Array.<module:model/String>} [fieldsAppClipDefaultExperiences] the fields to include for returned resources of type appClipDefaultExperiences
     * @param {Array.<module:model/String>} [fieldsAppStoreVersionExperiments] the fields to include for returned resources of type appStoreVersionExperiments
     * @param {Array.<module:model/String>} [fieldsAlternativeDistributionPackages] the fields to include for returned resources of type alternativeDistributionPackages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitAppStoreVersionLocalizations] maximum number of related appStoreVersionLocalizations returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperiments] maximum number of related appStoreVersionExperiments returned (when they are included)
     * @param {Number} [limitAppStoreVersionExperimentsV2] maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppStoreVersionResponse}
     */
    appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[appStoreVersions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersions'], 'csv'),
        'fields[apps]': this.apiClient.buildCollectionParam(opts['fieldsApps'], 'csv'),
        'fields[ageRatingDeclarations]': this.apiClient.buildCollectionParam(opts['fieldsAgeRatingDeclarations'], 'csv'),
        'fields[appStoreVersionLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionLocalizations'], 'csv'),
        'fields[builds]': this.apiClient.buildCollectionParam(opts['fieldsBuilds'], 'csv'),
        'fields[appStoreVersionPhasedReleases]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionPhasedReleases'], 'csv'),
        'fields[gameCenterAppVersions]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterAppVersions'], 'csv'),
        'fields[routingAppCoverages]': this.apiClient.buildCollectionParam(opts['fieldsRoutingAppCoverages'], 'csv'),
        'fields[appStoreReviewDetails]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreReviewDetails'], 'csv'),
        'fields[appStoreVersionSubmissions]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionSubmissions'], 'csv'),
        'fields[appClipDefaultExperiences]': this.apiClient.buildCollectionParam(opts['fieldsAppClipDefaultExperiences'], 'csv'),
        'fields[appStoreVersionExperiments]': this.apiClient.buildCollectionParam(opts['fieldsAppStoreVersionExperiments'], 'csv'),
        'fields[alternativeDistributionPackages]': this.apiClient.buildCollectionParam(opts['fieldsAlternativeDistributionPackages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[appStoreVersionLocalizations]': opts['limitAppStoreVersionLocalizations'],
        'limit[appStoreVersionExperiments]': opts['limitAppStoreVersionExperiments'],
        'limit[appStoreVersionExperimentsV2]': opts['limitAppStoreVersionExperimentsV2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppStoreVersionResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse}
     */
    appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest} appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest Related linkage
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(id, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, callback) {
      let postBody = appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");
      }
      // verify the required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' is set
      if (appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest === undefined || appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest === null) {
        throw new Error("Missing the required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClipDefaultExperiencesUpdateInstance operation.
     * @callback module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClipDefaultExperienceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/AppClipDefaultExperienceUpdateRequest} appClipDefaultExperienceUpdateRequest AppClipDefaultExperience representation
     * @param {module:api/AppClipDefaultExperiencesApi~appClipDefaultExperiencesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClipDefaultExperienceResponse}
     */
    appClipDefaultExperiencesUpdateInstance(id, appClipDefaultExperienceUpdateRequest, callback) {
      let postBody = appClipDefaultExperienceUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appClipDefaultExperiencesUpdateInstance");
      }
      // verify the required parameter 'appClipDefaultExperienceUpdateRequest' is set
      if (appClipDefaultExperienceUpdateRequest === undefined || appClipDefaultExperienceUpdateRequest === null) {
        throw new Error("Missing the required parameter 'appClipDefaultExperienceUpdateRequest' when calling appClipDefaultExperiencesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClipDefaultExperienceResponse;
      return this.apiClient.callApi(
        '/v1/appClipDefaultExperiences/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
