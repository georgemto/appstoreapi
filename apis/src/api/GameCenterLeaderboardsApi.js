/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterLeaderboardActivityLinkageRequest from '../model/GameCenterLeaderboardActivityLinkageRequest';
import GameCenterLeaderboardChallengeLinkageRequest from '../model/GameCenterLeaderboardChallengeLinkageRequest';
import GameCenterLeaderboardCreateRequest from '../model/GameCenterLeaderboardCreateRequest';
import GameCenterLeaderboardGroupLeaderboardLinkageRequest from '../model/GameCenterLeaderboardGroupLeaderboardLinkageRequest';
import GameCenterLeaderboardGroupLeaderboardLinkageResponse from '../model/GameCenterLeaderboardGroupLeaderboardLinkageResponse';
import GameCenterLeaderboardLocalizationsLinkagesResponse from '../model/GameCenterLeaderboardLocalizationsLinkagesResponse';
import GameCenterLeaderboardLocalizationsResponse from '../model/GameCenterLeaderboardLocalizationsResponse';
import GameCenterLeaderboardReleasesLinkagesResponse from '../model/GameCenterLeaderboardReleasesLinkagesResponse';
import GameCenterLeaderboardReleasesResponse from '../model/GameCenterLeaderboardReleasesResponse';
import GameCenterLeaderboardResponse from '../model/GameCenterLeaderboardResponse';
import GameCenterLeaderboardUpdateRequest from '../model/GameCenterLeaderboardUpdateRequest';

/**
* GameCenterLeaderboards service.
* @module api/GameCenterLeaderboardsApi
* @version 4.1
*/
export default class GameCenterLeaderboardsApi {

    /**
    * Constructs a new GameCenterLeaderboardsApi. 
    * @alias module:api/GameCenterLeaderboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterLeaderboardsActivityUpdateToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsActivityUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardActivityLinkageRequest} gameCenterLeaderboardActivityLinkageRequest Related linkage
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsActivityUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardsActivityUpdateToOneRelationship(id, gameCenterLeaderboardActivityLinkageRequest, callback) {
      let postBody = gameCenterLeaderboardActivityLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsActivityUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardActivityLinkageRequest' is set
      if (gameCenterLeaderboardActivityLinkageRequest === undefined || gameCenterLeaderboardActivityLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardActivityLinkageRequest' when calling gameCenterLeaderboardsActivityUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/activity', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsChallengeUpdateToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsChallengeUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardChallengeLinkageRequest} gameCenterLeaderboardChallengeLinkageRequest Related linkage
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsChallengeUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardsChallengeUpdateToOneRelationship(id, gameCenterLeaderboardChallengeLinkageRequest, callback) {
      let postBody = gameCenterLeaderboardChallengeLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsChallengeUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardChallengeLinkageRequest' is set
      if (gameCenterLeaderboardChallengeLinkageRequest === undefined || gameCenterLeaderboardChallengeLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardChallengeLinkageRequest' when calling gameCenterLeaderboardsChallengeUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/challenge', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsCreateInstance operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterLeaderboardCreateRequest} gameCenterLeaderboardCreateRequest GameCenterLeaderboard representation
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardResponse}
     */
    gameCenterLeaderboardsCreateInstance(gameCenterLeaderboardCreateRequest, callback) {
      let postBody = gameCenterLeaderboardCreateRequest;
      // verify the required parameter 'gameCenterLeaderboardCreateRequest' is set
      if (gameCenterLeaderboardCreateRequest === undefined || gameCenterLeaderboardCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardCreateRequest' when calling gameCenterLeaderboardsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsDeleteInstance operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsGetInstance operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardResponse}
     */
    gameCenterLeaderboardsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsGroupLeaderboardGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterGroups] the fields to include for returned resources of type gameCenterGroups
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSets] the fields to include for returned resources of type gameCenterLeaderboardSets
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterActivities] the fields to include for returned resources of type gameCenterActivities
     * @param {Array.<module:model/String>} [fieldsGameCenterChallenges] the fields to include for returned resources of type gameCenterChallenges
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {Number} [limitGameCenterLeaderboardSets] maximum number of related gameCenterLeaderboardSets returned (when they are included)
     * @param {Number} [limitLocalizations] maximum number of related localizations returned (when they are included)
     * @param {Number} [limitReleases] maximum number of related releases returned (when they are included)
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardResponse}
     */
    gameCenterLeaderboardsGroupLeaderboardGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsGroupLeaderboardGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterGroups]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterGroups'], 'csv'),
        'fields[gameCenterLeaderboardSets]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSets'], 'csv'),
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterActivities]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterActivities'], 'csv'),
        'fields[gameCenterChallenges]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterChallenges'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'limit[gameCenterLeaderboardSets]': opts['limitGameCenterLeaderboardSets'],
        'limit[localizations]': opts['limitLocalizations'],
        'limit[releases]': opts['limitReleases']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/groupLeaderboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardGroupLeaderboardLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardGroupLeaderboardLinkageResponse}
     */
    gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardGroupLeaderboardLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardGroupLeaderboardLinkageRequest} gameCenterLeaderboardGroupLeaderboardLinkageRequest Related linkage
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship(id, gameCenterLeaderboardGroupLeaderboardLinkageRequest, callback) {
      let postBody = gameCenterLeaderboardGroupLeaderboardLinkageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship");
      }
      // verify the required parameter 'gameCenterLeaderboardGroupLeaderboardLinkageRequest' is set
      if (gameCenterLeaderboardGroupLeaderboardLinkageRequest === undefined || gameCenterLeaderboardGroupLeaderboardLinkageRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardGroupLeaderboardLinkageRequest' when calling gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsLocalizationsGetToManyRelated operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsLocalizationsGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardLocalizations] the fields to include for returned resources of type gameCenterLeaderboardLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardImages] the fields to include for returned resources of type gameCenterLeaderboardImages
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsLocalizationsGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationsResponse}
     */
    gameCenterLeaderboardsLocalizationsGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsLocalizationsGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardLocalizations'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'fields[gameCenterLeaderboardImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardImages'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationsResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsLocalizationsGetToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsLocalizationsGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardLocalizationsLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsLocalizationsGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardLocalizationsLinkagesResponse}
     */
    gameCenterLeaderboardsLocalizationsGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsLocalizationsGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardLocalizationsLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/localizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsReleasesGetToManyRelated operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsReleasesGetToManyRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardReleasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filterLive] filter by attribute 'live'
     * @param {Array.<String>} [filterGameCenterDetail] filter by id(s) of related 'gameCenterDetail'
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardReleases] the fields to include for returned resources of type gameCenterLeaderboardReleases
     * @param {Array.<module:model/String>} [fieldsGameCenterDetails] the fields to include for returned resources of type gameCenterDetails
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboards] the fields to include for returned resources of type gameCenterLeaderboards
     * @param {Number} [limit] maximum resources per page
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsReleasesGetToManyRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardReleasesResponse}
     */
    gameCenterLeaderboardsReleasesGetToManyRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsReleasesGetToManyRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter[live]': this.apiClient.buildCollectionParam(opts['filterLive'], 'csv'),
        'filter[gameCenterDetail]': this.apiClient.buildCollectionParam(opts['filterGameCenterDetail'], 'csv'),
        'fields[gameCenterLeaderboardReleases]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardReleases'], 'csv'),
        'fields[gameCenterDetails]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterDetails'], 'csv'),
        'fields[gameCenterLeaderboards]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboards'], 'csv'),
        'limit': opts['limit'],
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardReleasesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsReleasesGetToManyRelationship operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsReleasesGetToManyRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardReleasesLinkagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] maximum resources per page
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsReleasesGetToManyRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardReleasesLinkagesResponse}
     */
    gameCenterLeaderboardsReleasesGetToManyRelationship(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsReleasesGetToManyRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardReleasesLinkagesResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}/relationships/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardsUpdateInstance operation.
     * @callback module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardUpdateRequest} gameCenterLeaderboardUpdateRequest GameCenterLeaderboard representation
     * @param {module:api/GameCenterLeaderboardsApi~gameCenterLeaderboardsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardResponse}
     */
    gameCenterLeaderboardsUpdateInstance(id, gameCenterLeaderboardUpdateRequest, callback) {
      let postBody = gameCenterLeaderboardUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardsUpdateInstance");
      }
      // verify the required parameter 'gameCenterLeaderboardUpdateRequest' is set
      if (gameCenterLeaderboardUpdateRequest === undefined || gameCenterLeaderboardUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardUpdateRequest' when calling gameCenterLeaderboardsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboards/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
