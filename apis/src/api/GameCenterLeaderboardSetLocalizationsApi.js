/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterLeaderboardSetImageResponse from '../model/GameCenterLeaderboardSetImageResponse';
import GameCenterLeaderboardSetLocalizationCreateRequest from '../model/GameCenterLeaderboardSetLocalizationCreateRequest';
import GameCenterLeaderboardSetLocalizationGameCenterLeaderboardSetImageLinkageResponse from '../model/GameCenterLeaderboardSetLocalizationGameCenterLeaderboardSetImageLinkageResponse';
import GameCenterLeaderboardSetLocalizationResponse from '../model/GameCenterLeaderboardSetLocalizationResponse';
import GameCenterLeaderboardSetLocalizationUpdateRequest from '../model/GameCenterLeaderboardSetLocalizationUpdateRequest';

/**
* GameCenterLeaderboardSetLocalizations service.
* @module api/GameCenterLeaderboardSetLocalizationsApi
* @version 4.1
*/
export default class GameCenterLeaderboardSetLocalizationsApi {

    /**
    * Constructs a new GameCenterLeaderboardSetLocalizationsApi. 
    * @alias module:api/GameCenterLeaderboardSetLocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsCreateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterLeaderboardSetLocalizationCreateRequest} gameCenterLeaderboardSetLocalizationCreateRequest GameCenterLeaderboardSetLocalization representation
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationResponse}
     */
    gameCenterLeaderboardSetLocalizationsCreateInstance(gameCenterLeaderboardSetLocalizationCreateRequest, callback) {
      let postBody = gameCenterLeaderboardSetLocalizationCreateRequest;
      // verify the required parameter 'gameCenterLeaderboardSetLocalizationCreateRequest' is set
      if (gameCenterLeaderboardSetLocalizationCreateRequest === undefined || gameCenterLeaderboardSetLocalizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetLocalizationCreateRequest' when calling gameCenterLeaderboardSetLocalizationsCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsDeleteInstance operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterLeaderboardSetLocalizationsDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetLocalizationsDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetImages] the fields to include for returned resources of type gameCenterLeaderboardSetImages
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetImageResponse}
     */
    gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSetImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetImages'], 'csv'),
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetImageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationship operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationGameCenterLeaderboardSetImageLinkageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationGameCenterLeaderboardSetImageLinkageResponse}
     */
    gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationship(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationship");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationGameCenterLeaderboardSetImageLinkageResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations/{id}/relationships/gameCenterLeaderboardSetImage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsGetInstance operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGetInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetLocalizations] the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
     * @param {Array.<module:model/String>} [fieldsGameCenterLeaderboardSetImages] the fields to include for returned resources of type gameCenterLeaderboardSetImages
     * @param {Array.<module:model/String>} [include] comma-separated list of relationships to include
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsGetInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationResponse}
     */
    gameCenterLeaderboardSetLocalizationsGetInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetLocalizationsGetInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[gameCenterLeaderboardSetLocalizations]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetLocalizations'], 'csv'),
        'fields[gameCenterLeaderboardSetImages]': this.apiClient.buildCollectionParam(opts['fieldsGameCenterLeaderboardSetImages'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterLeaderboardSetLocalizationsUpdateInstance operation.
     * @callback module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterLeaderboardSetLocalizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterLeaderboardSetLocalizationUpdateRequest} gameCenterLeaderboardSetLocalizationUpdateRequest GameCenterLeaderboardSetLocalization representation
     * @param {module:api/GameCenterLeaderboardSetLocalizationsApi~gameCenterLeaderboardSetLocalizationsUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterLeaderboardSetLocalizationResponse}
     */
    gameCenterLeaderboardSetLocalizationsUpdateInstance(id, gameCenterLeaderboardSetLocalizationUpdateRequest, callback) {
      let postBody = gameCenterLeaderboardSetLocalizationUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterLeaderboardSetLocalizationsUpdateInstance");
      }
      // verify the required parameter 'gameCenterLeaderboardSetLocalizationUpdateRequest' is set
      if (gameCenterLeaderboardSetLocalizationUpdateRequest === undefined || gameCenterLeaderboardSetLocalizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterLeaderboardSetLocalizationUpdateRequest' when calling gameCenterLeaderboardSetLocalizationsUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterLeaderboardSetLocalizationResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterLeaderboardSetLocalizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
