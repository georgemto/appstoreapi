/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GameCenterMatchmakingBooleanRuleResultsV1MetricResponse from '../model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse';
import GameCenterMatchmakingNumberRuleResultsV1MetricResponse from '../model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse';
import GameCenterMatchmakingRuleCreateRequest from '../model/GameCenterMatchmakingRuleCreateRequest';
import GameCenterMatchmakingRuleErrorsV1MetricResponse from '../model/GameCenterMatchmakingRuleErrorsV1MetricResponse';
import GameCenterMatchmakingRuleResponse from '../model/GameCenterMatchmakingRuleResponse';
import GameCenterMatchmakingRuleUpdateRequest from '../model/GameCenterMatchmakingRuleUpdateRequest';

/**
* GameCenterMatchmakingRules service.
* @module api/GameCenterMatchmakingRulesApi
* @version 4.1
*/
export default class GameCenterMatchmakingRulesApi {

    /**
    * Constructs a new GameCenterMatchmakingRulesApi. 
    * @alias module:api/GameCenterMatchmakingRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesCreateInstance operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesCreateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameCenterMatchmakingRuleCreateRequest} gameCenterMatchmakingRuleCreateRequest GameCenterMatchmakingRule representation
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesCreateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingRuleResponse}
     */
    gameCenterMatchmakingRulesCreateInstance(gameCenterMatchmakingRuleCreateRequest, callback) {
      let postBody = gameCenterMatchmakingRuleCreateRequest;
      // verify the required parameter 'gameCenterMatchmakingRuleCreateRequest' is set
      if (gameCenterMatchmakingRuleCreateRequest === undefined || gameCenterMatchmakingRuleCreateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterMatchmakingRuleCreateRequest' when calling gameCenterMatchmakingRulesCreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingRuleResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesDeleteInstance operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesDeleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesDeleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameCenterMatchmakingRulesDeleteInstance(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesDeleteInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterResult] filter by 'result' attribute dimension
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingBooleanRuleResultsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[result]': opts['filterResult'],
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingBooleanRuleResultsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingNumberRuleResultsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingNumberRuleResultsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingRuleErrorsV1MetricResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/String} granularity the granularity of the per-group dataset
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [groupBy] the dimension by which to group the results
     * @param {String} [filterGameCenterMatchmakingQueue] filter by 'gameCenterMatchmakingQueue' relationship dimension
     * @param {Array.<module:model/String>} [sort] comma-separated list of sort expressions; metrics will be sorted as specified
     * @param {Number} [limit] maximum number of groups to return per page
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingRuleErrorsV1MetricResponse}
     */
    gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(id, granularity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'granularity': granularity,
        'groupBy': this.apiClient.buildCollectionParam(opts['groupBy'], 'csv'),
        'filter[gameCenterMatchmakingQueue]': opts['filterGameCenterMatchmakingQueue'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingRuleErrorsV1MetricResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameCenterMatchmakingRulesUpdateInstance operation.
     * @callback module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesUpdateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameCenterMatchmakingRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id the id of the requested resource
     * @param {module:model/GameCenterMatchmakingRuleUpdateRequest} gameCenterMatchmakingRuleUpdateRequest GameCenterMatchmakingRule representation
     * @param {module:api/GameCenterMatchmakingRulesApi~gameCenterMatchmakingRulesUpdateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameCenterMatchmakingRuleResponse}
     */
    gameCenterMatchmakingRulesUpdateInstance(id, gameCenterMatchmakingRuleUpdateRequest, callback) {
      let postBody = gameCenterMatchmakingRuleUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameCenterMatchmakingRulesUpdateInstance");
      }
      // verify the required parameter 'gameCenterMatchmakingRuleUpdateRequest' is set
      if (gameCenterMatchmakingRuleUpdateRequest === undefined || gameCenterMatchmakingRuleUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gameCenterMatchmakingRuleUpdateRequest' when calling gameCenterMatchmakingRulesUpdateInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['itc-bearer-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameCenterMatchmakingRuleResponse;
      return this.apiClient.callApi(
        '/v1/gameCenterMatchmakingRules/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
