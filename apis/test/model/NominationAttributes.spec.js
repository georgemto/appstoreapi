/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppStoreConnectApi);
  }
}(this, function(expect, AppStoreConnectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppStoreConnectApi.NominationAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NominationAttributes', function() {
    it('should create an instance of NominationAttributes', function() {
      // uncomment below and update the code to test NominationAttributes
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be.a(AppStoreConnectApi.NominationAttributes);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedDate (base name: "lastModifiedDate")', function() {
      // uncomment below and update the code to test the property lastModifiedDate
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property submittedDate (base name: "submittedDate")', function() {
      // uncomment below and update the code to test the property submittedDate
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property publishStartDate (base name: "publishStartDate")', function() {
      // uncomment below and update the code to test the property publishStartDate
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property publishEndDate (base name: "publishEndDate")', function() {
      // uncomment below and update the code to test the property publishEndDate
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property deviceFamilies (base name: "deviceFamilies")', function() {
      // uncomment below and update the code to test the property deviceFamilies
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property locales (base name: "locales")', function() {
      // uncomment below and update the code to test the property locales
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property supplementalMaterialsUris (base name: "supplementalMaterialsUris")', function() {
      // uncomment below and update the code to test the property supplementalMaterialsUris
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property hasInAppEvents (base name: "hasInAppEvents")', function() {
      // uncomment below and update the code to test the property hasInAppEvents
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property launchInSelectMarketsFirst (base name: "launchInSelectMarketsFirst")', function() {
      // uncomment below and update the code to test the property launchInSelectMarketsFirst
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property preOrderEnabled (base name: "preOrderEnabled")', function() {
      // uncomment below and update the code to test the property preOrderEnabled
      //var instance = new AppStoreConnectApi.NominationAttributes();
      //expect(instance).to.be();
    });

  });

}));
